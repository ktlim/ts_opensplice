// -*- MPC -*-
// $Id:$

project : c_or_cplusplus {
    includes += .
    specific (make) {
        obj_dir_flat = 1
        obj_dir = .obj$(CFG)<%slash%>
    }

    specific (make) {
        output_dir = .
        // Switch off dependency checking
        supports_include =
    }
    // Visual studio (2010 certainly, probably all since 2008) behaves really weirdly WRT
    // configurations. The 'default' is always 'Debug' if it exists when any solution is first
    // opened irrespective of any other configs specified or the order they are specified in.
    // If Debug is not there then the default on first open is the lowest name alphabetically.
    // The only way to set a 'non default' (i.e. non Debug) is via an *.suo file and this is
    // an opaque binary file & MSDN strongly discourages their distribution.
    // Therefore the only way to have a solution 'just work' on first
    // open is to have only one configuration, and for it to match the 'build config'.
    // We therefore set a default (& only) here of Release only.
    specific (prop:windows) {
        configurations = Release
        output_dir = .
    }
    // eclipse seems real unhappy with capital letters on the configuration names.
    specific (cdt7) {
        configurations = release debug
        output_dir = .
    }
}

feature(!src_co) {
    includes += $(OSPL_HOME)/examples/include $(OSPL_HOME)/examples
    // To distribute the examples we only ship the Release configuration
    // The "if" makefile construct is a gnuism & not portable to all makes
    specific (make) {
        configurations = Release
    }
}

feature(src_co) {
    includes += $(OSPL_HOME_NORMALIZED)/examples/include $(OSPL_HOME_NORMALIZED)/examples
    // When building examples in a checkout the default config is Release. Examples can be (re)built
    // Debug though with:
    // make CFG=Debug
    specific (make) {
        configurations = Release Debug
    }
}

feature (!src_co, ospl_os_linux) {
    specific (make) {
        linkflags += -Wl,-rpath,\$$ORIGIN -Wl,-rpath,\$$ORIGIN/$(OSPL_HOME)/lib
    }
}

feature (src_co, ospl_os_linux) {
    specific (make) {
        linkflags += -Wl,-rpath,\$$ORIGIN -Wl,-rpath,\$$ORIGIN/$(OSPL_HOME)/lib/$(SPLICE_TARGET)
    }
}

feature (ospl_os_pikeos, !ospl_os_host_win) : ospl_cmxml, ospl_ddsosnet, ospl_ddsrrstorage {
    Source_Files {
        ospl_config.c
    }

    libs += spliced networking durability cmsoap

    verbatim(make, local) {
        "URIFILE=$(subst file:\/\/,,$(OSPL_URI))"

        ".PHONY: ospl_config.c"
        "ospl_config.c:"
        "	osplconf2c -o $@"
    }
}

feature (ospl_os_pikeos, ospl_os_host_win) : ospl_cmxml, ospl_ddsosnet, ospl_ddsrrstorage {
    Source_Files {
        ospl_config.c

    }

    libs += spliced networking durability cmsoap

    verbatim(make, local) {
        "URIFILE=$(subst file:\/\/,,$(OSPL_URI))"

        ".PHONY: ospl_config.c"
        "ospl_config.c:"
        "	osplconf2c -u \"file:\/\/`cygpath -w \"$(URIFILE)\"`\" -o $@"
    }

    verbatim(make, top) {
        ifneq (,$(LWIP_HOME))
        LWIP_INC_FLAG = -I\"$(LWIP_HOME)\"
        LWIP_LD_FLAG = -L\"$(LWIP_HOME)\" \"$(LWIP_HOME)/lwip_config.o\"
        else
        LWIP_INC_FLAG =
        LWIP_LD_FLAG =
        endif
    }
}

feature (ospl_os_vxworks, ospl_os_ver_5_5){
    specific (make) {
       linkflags += -r -nostdlib
       dll_ext = .out
    }
    //libpaths += $(EXTRALIBPATH)PPC604gnu

        //"EXTRALIBPATH=$(shell ccppc -v 2>&1 | grep 'Reading specs from' | sed -e 's@Reading specs from @@' -e 's@specs$$@@')
}

feature (ospl_os_vxworks, ospl_kernelspace, ospl_os_ver_5_5, !ospl_examples_dynamic) : ospl_cmxml, ospl_ddsosnet, ospl_ddsrrstorage  {
   libs += ddsserviceWrapper spliced ddsi2e networking durability cmsoap
}

feature (ospl_kernelspace, !ospl_os_ver_5_5, !ospl_examples_dynamic ) {
   libs += ddsserviceWrapper spliced ddsi2e networking durability cmsoap
}
