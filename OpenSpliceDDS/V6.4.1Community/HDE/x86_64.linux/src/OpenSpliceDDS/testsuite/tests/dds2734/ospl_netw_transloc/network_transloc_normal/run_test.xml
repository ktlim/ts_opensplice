<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE stax SYSTEM "../../stax/stax.dtd">
<stax>
    <!-- Define default function to execute -->
    <defaultcall function="network_transloc_normal"/>
<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
    <!-- Function runs the "network_transloc_normal" test -->
    <function name="network_transloc_normal" scope="local">
    
        <!-- Function description -->
        <function-epilog>
            <![CDATA[
            ]]>
        </function-epilog>
        <!-- Function dependencies -->
        <function-import file="../../../stax/test_ospl.xml"/>
        <!-- Function arguments -->
        <function-list-args>
            <function-required-arg name="host_ip1">
                The IP address of the 1st host for the test:
            </function-required-arg>
            <function-required-arg name="host_ip2">
                The IP address of the 2nd host for the test:
            </function-required-arg>
            <function-required-arg name="ospl_home1">
                OSPL_HOME value of the OSPL installed on the 1st host
            </function-required-arg>
            <function-required-arg name="ospl_home2">
                OSPL_HOME value of the OSPL installed on the 2nd host
            </function-required-arg>
            <function-optional-arg name="staf_port1" default="'6503'">
                Staf port for the 1st host
            </function-optional-arg>
            <function-optional-arg name="staf_port2" default="'6503'">
                Staf port for the 2nd host
            </function-optional-arg>
            <function-optional-arg name="ospli_src1" default="'c:\cygwin\home\user\ospli'">
                The OSPL source code (OSPLI) location on the 1st host
            </function-optional-arg>
            <function-optional-arg name="ospli_src2" default="'c:\cygwin\home\user\ospli'">
                The OSPL source code (OSPLI) location on the 2st host
            </function-optional-arg>
        </function-list-args>
        <!-- Function body begin -->
        <sequence>
            <call function='"GetStafLocalTcpPort"'/>
            <script>
                localhost_staf_port = STAXResult
            </script>
            <script>
                import os
                import sys
                from time import *
                # Get starting test time:
                start_time = time()
                # Get time stamp to compose the folder name:
                time_stamp = strftime("%d-%m-%Y-%H-%M-%S", localtime())
                this_xml_dir = STAXCurrentXMLFile[:STAXCurrentXMLFile.rfind(os.sep)]
                sys.path.append(this_xml_dir + os.sep + "..")
                sys.path.append(this_xml_dir + os.sep + ".."   +\
                                               os.sep + ".."   +\
                                               os.sep + "stax" +\
                                               os.sep + "python")
                from host                             import Host
                from dds2734_transloc_test_scenario import DDS2734TransLocTestScenario
                # Define the scenario:
                test_scenario = DDS2734TransLocTestScenario(DDS2734TransLocTestScenario.TRANSLOC_NORMAL)
                localhost = Host(staf_port = localhost_staf_port)
                local_fs = localhost.get_file_sep()
                localhost.set_log_dir(this_xml_dir + local_fs + "log" + local_fs + time_stamp)
                # Create local directory:
                os.makedirs(localhost.get_log_dir())
                # Set test case result log file:
                test_scenario.set_result_file(localhost.get_log_dir()  + local_fs +\
                                              test_scenario.get_name() + "_result.log")
            </script>
            <try>
                <sequence>
                    <!-- Initialize the framework -->
                    <call function="'Initialise'"/>
                    <script>
                        # Define the host for the scanario:
                        host1 = test_scenario.define_host(
                            ospl_home = ospl_home1,
                            host_name = host_ip1,
                            staf_port = staf_port1)
                        host2 = test_scenario.define_host(
                            ospl_home = ospl_home2,
                            host_name = host_ip2,
                            staf_port = staf_port2)

                        # Set role for the hosts:
                        host1.set_role("Pub")
                        host2.set_role("Sub")
                    </script>
                    <!-- For all defined hosts -->
                    <iterate var="host" in="test_scenario.get_all_hosts()">
                        <!-- Init the host -->
                        <call function="'InitHost'">host</call>
                    </iterate>
                    <script>
                        from time import *
                        # Publisher/Subscriber process executable:
                        node_app_exe = {0: "dds2734_publisher", 1: "dds2734_subscriber"}
                        # OSPL_URI for the test:
                        ospl_uri_name = "OSPL_NETW_TRANSLOC.xml"
                        # OSPLI_SRC for the test
                        ospli_src = [ospli_src1, ospli_src2]
                        # Sub-name for the test set:
                        test_sub_name = test_scenario.get_name()
                        # File separators on the hosts:
                        fs             = []
                        # OSPL_HOME of the hosts:
                        ospl_homes     = []
                        # OSPL_URI of the hosts:
                        ospl_uri_locations      = []
                        # Log sub-directories for the hosts:
                        log_subdirs    = []
                        # Path to the node application on the hosts :
                        app_pathes = []
                        # Node app for each hosts:
                        node_apps = []
                        # Host index:
                        i = 0
                        for host in test_scenario.get_all_hosts():
                            # Get file separators:
                            fs.append(host.get_file_sep())
                            # Get OSPL_HOME:
                            ospl_homes.append(host.get_ospl_home())
                            # Set log subdir (log/time_stamp/host_name/test_sub_name):
                            log_subdirs.append("log" + fs[i] + time_stamp + fs[i] + host.get_host_name() + fs[i] + test_sub_name)
                            # Set app path (/testsuite/tests/dds2734/ospl_netw_transloc/application/sub)
                            app_pathes.append(ospli_src[i] + fs[i] + 'testsuite' + fs[i] + 'tests' + fs[i] + 'dds2734' + fs[i] + 'ospl_netw_transloc' + fs[i] + 'application' + fs[i] + 'exec')    
                            # Set log locations on the nodes:
                            host.set_log_dir(app_pathes[i] + fs[i] + log_subdirs[i])
                            host.set_ospl_log_dir(host.get_log_dir())
                            # Set OSPL_URI for each host 
                            ospl_uri_locations.append(ospli_src[i] + fs[i] +'testsuite' + fs[i] + 'tests' + fs[i] + 'dds2734' + fs[i] + 'ospl_netw_transloc' + fs[i] + 'application' + fs[i] + 'exec')
                            host.set_ospl_uri("file://" + ospl_uri_locations[i] + fs[i] + ospl_uri_name)
                            host.set_env_value("OSPL_URI", host.get_ospl_uri())

                            # Define node monitor executable ($OSPL_HOME/example_path/node_monitor_exe):
                            node_apps.append(host.define_process(app_pathes[i] + fs[i] + node_app_exe[i]))
                            # Set process name:
                            node_apps[i].set_name(node_app_exe[i])
                            # Set log file for the process:
                            node_apps[i].set_log_file(host.get_log_dir() + fs[i] + node_app_exe[i] + ".log")
                            # Increment index:
                            i += 1
                        test_scenario.set_log_root(localhost.get_log_dir())
                        publisher = node_apps[0]
                        subscriber = node_apps[1]
                    </script>
                    <!-- For all defined hosts -->
                    <iterate var="host" in="test_scenario.get_all_hosts()" indexvar="i">
                        <sequence>
                            <!-- Create log directory on the host -->
                            <call function="'CreateLogDirOnHost'">host</call>
                            <call function="'CopyFileFromTo'">[localhost, host, this_xml_dir + local_fs + '..' + local_fs + ospl_uri_name, ospl_uri_locations[i]]</call>
                            <message> STAXResult </message>
                        </sequence>
                    </iterate>
                    <!-- Initialized scenario: ready to go! -->
                    <script>test_scenario.set_test_scenario_initialized(1)</script>
                </sequence>
                <!-- Catch all possible exceptions -->
                <catch exception="'...'" typevar="type" var="info">
                    <sequence>
                        <script>
                            test_scenario.fail()
                            test_scenario.errors.append("Initializing process error: %s (%s)!"% (type, info))
                        </script>
                    </sequence>
                </catch>
            </try>
            <if expr="test_scenario.is_test_scenario_initialized()">
                <!-- Test case begin -->
                <testcase name = "test_scenario.get_name()">
                    <sequence>
                        <try>
                            <sequence>
                                <!-- Step 1: -->
                                <!-- For all hosts start OSPL daemon -->
                                <iterate var="host" in="test_scenario.get_all_hosts()">
                                    <call function="'StartOSPL'">host</call>
                                </iterate>
                                <!-- Wait 10 sec -->
                                <message>"Waiting %d sec..."% 5</message>
                                <script>sleep(5)</script>
                                <message>"Done."</message>
                                <!-- Step 2: -->
                                <!-- Starting publisher and subscriber -->
                                <parallel>
                                    <call function="'RunProcess'">[host2, subscriber, '60s']</call>
                                    <sequence>
                                        <!-- Wait 30 sec -->
                                        <message>"Waiting %d sec..."% 30</message>
                                        <script>sleep(30)</script>
                                        <call function="'RunProcess'">[host1, publisher, '61s']</call>
                                    </sequence>
                                </parallel>    
                                <!-- For all hosts get logs -->
                                <paralleliterate var="host" in="test_scenario.get_all_hosts()" indexvar="i">
                                    <call function="'CopyDirFromTo'">
                                        [host,
                                        localhost,
                                        host.get_log_dir(),
                                        localhost.get_log_dir() + local_fs + host.get_host_name()]
                                    </call>
                                </paralleliterate>
                            </sequence>
                            <!-- Catch "OSPL did not started" exception (may be raised by the "StartOSPL" function) -->
                            <catch exception="'OSPLDidNotStarted'" var="msg">
                                <script>
                                    test_scenario.fail()
                                    test_scenario.errors.append("Cannot start OSPL: " + msg)
                                </script>
                            </catch>
                            <!-- Catch "Running process error" exception (may be raised by the "RunProcess" function) -->
                            <catch exception="'RunningProcessError'" var="msg">
                                <script>
                                    test_scenario.fail()
                                    test_scenario.errors.append("Runing process error: " + msg)
                                </script>
                            </catch>
                            <!-- Catch "File copy failed" exception (may be raised by the "FileCopyFailed" function) -->
                            <catch exception="'FileCopyFailed'" var="msg">
                                <script>
                                    test_scenario.fail()
                                    test_scenario.errors.append("Copying file error: " + msg)
                                </script>
                            </catch>
                            <!-- Catch all other exceptions -->
                            <catch exception="'...'" typevar="type" var="info">
                                <script>
                                    test_scenario.fail()
                                    test_scenario.errors.append("Running test case error: %s (%s)!"% (type, info))
                                </script>
                            </catch>
                            <!-- At the end in any case -->
                            <finally>
                                    <!-- For all hosts stop OSPL daemon -->
                                    <iterate var="host" in="test_scenario.get_all_hosts()" indexvar="i">
                                        <try>
                                            <sequence>
                                                <call function="'StopOSPL'">host</call>
                                                <call function="'DeleteFileFrom'">[host, ospl_uri_locations[i] + fs[i] + ospl_uri_name]</call>
                                            </sequence>
                                            <!-- Catch "OSPL did not stopped" exception (may be raised by the "StopOSPL" function) -->
                                            <catch exception="'OSPLDidNotStopped'" var="msg">
                                                <script>
                                                    test_scenario.fail()
                                                    test_scenario.errors.append("Cannot stop OSPL: " + msg)
                                                </script>
                                            </catch>
                                            <catch exception="'...'" typevar="type" var="info">
                                                <script>
                                                    test_scenario.warning.append("Test case error: %s (%s)!"% (type, info))
                                                </script>
                                            </catch>
                                        </try>
                                    </iterate>
                            </finally>
                        </try>
                    </sequence>
                </testcase>
            </if>
            <!-- Test case end -->
            <script>
                # Get stopping test time:
                stop_time    = time()
                # Calc the difference:
                elapsed_secs = stop_time - start_time
                test_scenario.analyze()
            </script>
            <message>"Test complete - ran for [%d] seconds."% elapsed_secs</message>
            <if expr="test_scenario.is_passed()">
                <message>"Test is PASSED."</message>
            </if>
            <if expr="test_scenario.is_failed()">
                <message>"Test is FAILED see [%s] log for details."% test_scenario.get_result_file()</message>
            </if>
            <if expr="test_scenario.is_not_tested()">
                <message>"Test is NOT TESTED see [%s] log for details."% test_scenario.get_result_file()</message>
            </if>
            <return>test_scenario.is_passed()</return>
        </sequence>
        <!-- Function body end -->
    </function>
    <!-- function: multi_full_main -->
<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
</stax>
