#!/bin/bash

# This file must only be sourced.
if [ -z "$BASH_SOURCE" -o "$0" = "$BASH_SOURCE" ]; then
    echo "ERROR: Only source '$0' file"
    exit 1
fi

# Source current settings.
. "$(dirname "$BASH_SOURCE")/../osplsettings.shsrc" "$@"
. "$(dirname "$BASH_SOURCE")/../ospltestutils.shsrc" "$@"
. "$(dirname "$BASH_SOURCE")/../osplconfig.shsrc" "$@"
. "$(dirname "$BASH_SOURCE")/../touchstones/tssettings.shsrc" "$@"

check_ts_dir || exit 1

check_ts_prereqs || exit 1

# We plainly hardcode some of the values. There is no sense to make these
# parameters configurable as they change very rarely.
g_wait_period=5
g_transport='broadcast'
# We probably need to do both shm and sp from 6.1
g_runtype='shm'
# Exit status of run_soak_test which we cannot directly return in bash
# since we pipe script output to tee.
g_soak_test_failed=0

function soak_test_id ()
{
    if [ $# -ne 3 ]; then
        error_trace "ERROR: Wrong number of arguments to ${FUNCNAME[0]}"
        return 1
    fi

    local machine="$1" && test -n "$machine" || error_trace "ERROR: Parameter \$1 is empty" || return 1
    local remote="$2" && test -n "$remote" || error_trace "ERROR: Parameter \$2 is empty" || return 1
    local lang="$3" && test -n "$lang" || error_trace "ERROR: Parameter \$3 is empty" || return 1

    local p h localpart remotepart
    for p in $(testing_prefices)
    do
        eval "h=\${${p}_HOSTNAME}"
        if [ "$machine" = "$h" ]; then
            localpart="$p"
        elif [ "$remote" = "$h" ]; then
            remotepart="$p"
        fi
    done

    if [ -z "$localpart" -o -z "$remotepart" ]; then
        error_help "ERROR: Hosts '$machine' or '$remote' are unknown"
        return 1
    fi

    echo "${localpart}_${remotepart}_${lang}" | tr '[:upper:]' '[:lower:]'
}

function soak_impl_name ()
{
    if [ "$g_impl" = 'cpp' ]; then
        echo 'C++'
    elif [ "$g_impl" = 'java' ]; then
        echo 'Java'
    else
        echo 'Unknown'
    fi
}

function touchstone_process_name ()
{
    if [ "$g_impl" = 'cpp' ]; then
        echo 'touchstone_cpp'
    elif [ "$g_impl" = 'java' ]; then
        echo 'java'
    else
        echo 'unknown'
    fi
}

function is_process_running ()
{
    if [ $# -ne 2 ]; then
        error_trace "ERROR: Wrong number of arguments to ${FUNCNAME[0]}"
        return 1
    fi

    local pid="$1" && test -n "$pid" || error_trace "ERROR: Parameter \$1 is empty" || return 1
    local name="$2" && test -n "$name" || error_trace "ERROR: Parameter \$2 is empty" || return 1

    local flags='xa'
    if [ "$(uname -o)" = 'Cygwin' ]; then
        flags='-W'
    fi
    local res="$(ps "$flags" | grep -e "^ *${pid} .*${name}")"
    test "$res" != ''
}

function soak_test_port ()
{
    if [ "$g_impl" = 'cpp' -a \( "$g_remote" = "$LIN32_HOSTNAME" -o "$g_local" = "$LIN32_HOSTNAME" \) ]; then
        echo '53572'
    elif [ "$g_impl" = 'java' -a \( "$g_remote" = "$LIN32_HOSTNAME" -o "$g_local" = "$LIN32_HOSTNAME" \) ]; then
        echo '53571'
    elif [ "$g_impl" = 'cpp' -a \( "$g_remote" = "$WIN32_HOSTNAME" -o "$g_local" = "$WIN32_HOSTNAME" \) ]; then
        echo '53472'
    elif [ "$g_impl" = 'java' -a \( "$g_remote" = "$WIN32_HOSTNAME" -o "$g_local" = "$WIN32_HOSTNAME" \) ]; then
        echo '53471'
    else
        error_help "ERROR: Combination '$g_local'/'$g_remote' and '$g_impl' is not defined"
        return 1
    fi
}

function ts_group_id ()
{
    if [ $# -ne 2 ]; then
        error_trace "ERROR: Wrong number of arguments to ${FUNCNAME[0]}"
        return 1
    fi

    local machine="$1" && test -n "$machine" || error_trace "ERROR: Parameter \$1 is empty" || return 1
    local remote="$2" && test -n "$remote" || error_trace "ERROR: Parameter \$2 is empty" || return 1

    if [ "$machine" = "$LIN64_HOSTNAME" -a "$remote" = "$LIN32_HOSTNAME" ]; then
        echo '4001'
    elif [ "$machine" = "$LIN32_HOSTNAME" -a "$remote" = "$LIN64_HOSTNAME" ]; then
        echo '3001'
    elif [ "$machine" = "$LIN64_HOSTNAME" -a "$remote" = "$WIN32_HOSTNAME" ]; then
        echo '2001'
    elif [ "$machine" = "$WIN32_HOSTNAME" -a "$remote" = "$LIN64_HOSTNAME" ]; then
        echo '1001'
    else
        error_help "ERROR: Combination '$machine' and '$remote' is not defined"
        return 1
    fi
}

function setup_logging ()
{
    g_logdir="$(remote_var_value "$g_local" LOG_DIR)" || return 1
    # We are only interested in test specific log directory.
    g_logdir="$g_logdir/$g_soak_id"
    g_unix_logdir="$(to_unix_path "$g_logdir")"

    if [ -n "$g_cleanlogs" ]; then
        # The mkdir below is only to make rm successful even if it's a first
        # run and the log dir doesn't exist yet.
        mkdir -p "$g_unix_logdir" || return 1
        echo -e "\nDeleting old logs..."
        rm -rf "$g_unix_logdir" || return 1
    fi
    mkdir -p "$g_unix_logdir" || return 1
}

function source_soak_env ()
{
    # We plainly hardcode some of the values. There is no sense to make these
    # parameters configurable as they change very rarely.
    g_unix_ts_root="$(to_unix_path "$TS_ROOT")"

    local ts_bin
    ts_bin="$(remote_var_value "$g_local" TS_BIN)" || return 1
    g_unix_ts_bin="$(to_unix_path "$ts_bin")"

    local scriptdir="$PWD/$(dirname "$BASH_SOURCE")"
    pushd "$PWD" &>/dev/null
    cd "$g_unix_ts_root" || return 1
    #we cannot do the following line because we do not have the actual 
    #touchstone checked out from sourceforge so we cannot update it
    #svn revert -R "bin/start_recording.sh" || return 1
    echo -e "\nPatching for starting recorder in background..."
    patch -p0 <"$scriptdir/diffs/bin+start_recording.sh.diff" || return 1
    popd &>/dev/null

    PATH="$g_unix_ts_bin:$g_unix_ts_root/bin:$PATH"
    if [ "$(uname -o)" = 'Cygwin' ]; then
        CLASSPATH="$ts_bin/touchstone.jar;$CLASSPATH"
    else
        CLASSPATH="$g_unix_ts_bin/touchstone.jar:$CLASSPATH"
    fi
    export PATH CLASSPATH
}

function source_ospl_uri ()
{
    local ospl_home orig_ospl my_ospl soak_ospl soak_port cur_path
    ospl_home="$(remote_var_value "$g_local" OSPL_DISTPATH)" || return 1
    ospl_home="$(to_unix_path "$ospl_home")"
    orig_ospl="$(orig_ospl_config "$g_runtype" "$g_transport")" || return 1
    my_ospl="$(my_ospl_config  "$g_local" "$g_runtype" "$g_transport")" || return 1

    soak_port="$(soak_test_port)" || return 1

    "$(dirname "$0")/../.cp_chmod" "$ospl_home/etc/config/$orig_ospl" "$(osplconfig_current_path)/$my_ospl" || return 1

    echo -e "\nPatching ospl.xml..."
    create_ospl_config "$g_local" "$g_runtype" "$g_transport" "$soak_port" "$g_soak_id" || return 1
    mv -f "$(osplconfig_current_path)/$my_ospl" "$g_unix_logdir/ospl_${g_soak_id}_${g_runtype}_${g_transport}.xml" || return 1

    export OSPL_URI="file://$g_logdir/ospl_${g_soak_id}_${g_runtype}_${g_transport}.xml"
}

function _patch_for_latency ()
{
    if [ $# -ne 2 ]; then
        error_trace "ERROR: Wrong number of arguments to ${FUNCNAME[0]}"
        return 1
    fi

    local afile="$1" && test -n "$afile" || error_trace "ERROR: Parameter \$1 is empty" || return 1
    local remote="$2" && test -n "$remote" || error_trace "ERROR: Parameter \$2 is empty" || return 1

    local my_group_id other_soak_id other_group_id
    other_soak_id="$(soak_test_id "$remote" "$g_local" "$g_impl")" || return 1
    my_group_id="$(ts_group_id "$g_local" "$remote")" || return 1
    other_group_id="$(ts_group_id "$remote" "$g_local")" || return 1

    patch -p0 <<_EOF
--- $afile	2011-01-01 12:00:00.000000000 +0000
+++ $afile	2011-01-01 12:00:00.000000000 +0000
@@ -1,5 +1,5 @@
-DDSTouchStoneCommand= { kind=TransponderDef delay= { sec=0 nanosec=50000000 } disposed=FALSE command= { group_id=1001 transponder_id=1 partition_id=1 topic_id=1 topic_kind=BEST_EFFORT scheduling_class=TIMESHARING thread_priority=0 } }
-DDSTouchStoneCommand= { kind=TransceiverDef delay= { sec=2 nanosec=0 } disposed=FALSE command= { group_id=2001 transceiver_id=1 partition_id=1 topic_id=1 topic_kind=BEST_EFFORT scheduling_class=TIMESHARING thread_priority=0 message_size=512 write_period=50 report_period=10000 } }
-DDSTouchStoneCommand= { kind=TransceiverDef delay= { sec=300 nanosec=0 } disposed=TRUE command= { group_id=2001 transceiver_id=1 partition_id=1 topic_id=1 topic_kind=BEST_EFFORT scheduling_class=TIMESHARING thread_priority=0 message_size=512 write_period=50 report_period=10000 } }
-DDSTouchStoneCommand= { kind=TransponderDef delay= { sec=2 nanosec=0 } disposed=TRUE command= { group_id=1001 transponder_id=1 partition_id=1 topic_id=1 topic_kind=BEST_EFFORT scheduling_class=TIMESHARING thread_priority=0 } }
+DDSTouchStoneCommand= { kind=TransponderDef delay= { sec=0 nanosec=50000000 } disposed=FALSE command= { group_id=$my_group_id transponder_id=1 partition_id=1 topic_id=1 topic_kind=BEST_EFFORT scheduling_class=TIMESHARING thread_priority=0 } }
+DDSTouchStoneCommand= { kind=TransceiverDef delay= { sec=2 nanosec=0 } disposed=FALSE command= { group_id=$other_group_id transceiver_id=1 partition_id=1 topic_id=1 topic_kind=BEST_EFFORT scheduling_class=TIMESHARING thread_priority=0 message_size=512 write_period=50 report_period=10000 } }
+DDSTouchStoneCommand= { kind=TransceiverDef delay= { sec=300 nanosec=0 } disposed=TRUE command= { group_id=$other_group_id transceiver_id=1 partition_id=1 topic_id=1 topic_kind=BEST_EFFORT scheduling_class=TIMESHARING thread_priority=0 message_size=512 write_period=50 report_period=10000 } }
+DDSTouchStoneCommand= { kind=TransponderDef delay= { sec=2 nanosec=0 } disposed=TRUE command= { group_id=$my_group_id transponder_id=1 partition_id=1 topic_id=1 topic_kind=BEST_EFFORT scheduling_class=TIMESHARING thread_priority=0 } }
 
_EOF
}

function _patch_for_throughput ()
{
    if [ $# -ne 2 ]; then
        error_trace "ERROR: Wrong number of arguments to ${FUNCNAME[0]}"
        return 1
    fi

    local afile="$1" && test -n "$afile" || error_trace "ERROR: Parameter \$1 is empty" || return 1
    local remote="$2" && test -n "$remote" || error_trace "ERROR: Parameter \$2 is empty" || return 1

    local my_group_id other_soak_id other_group_id
    other_soak_id="$(soak_test_id "$remote" "$g_local" "$g_impl")" || return 1
    my_group_id="$(ts_group_id "$g_local" "$remote")" || return 1
    other_group_id="$(ts_group_id "$remote" "$g_local")" || return 1

    patch -p0 <<_EOF
--- $afile	2011-01-01 12:00:00.000000000 +0000
+++ $afile	2011-01-01 12:00:00.000000000 +0000
@@ -1,5 +1,5 @@
-DDSTouchStoneCommand= { kind=ReceiverDef delay= { sec=0 nanosec=50000000 } disposed=FALSE command= { group_id=1001 receiver_id=1 partition_id=1 topic_id=1 topic_kind=BEST_EFFORT scheduling_class=TIMESHARING thread_priority=0 report_period=10000 polling_period=10 } }
-DDSTouchStoneCommand= { kind=TransmitterDef delay= { sec=2 nanosec=0 } disposed=FALSE command= { group_id=2001 transmitter_id=1 partition_id=1 topic_id=1 topic_kind=BEST_EFFORT scheduling_class=TIMESHARING thread_priority=0 message_size=512 messages_per_burst=55 burst_period=50 } }
-DDSTouchStoneCommand= { kind=TransmitterDef delay= { sec=300 nanosec=0 } disposed=TRUE command= { group_id=2001 transmitter_id=1 partition_id=1 topic_id=1 topic_kind=BEST_EFFORT scheduling_class=TIMESHARING thread_priority=0 message_size=512 messages_per_burst=55 burst_period=50 } }
-DDSTouchStoneCommand= { kind=ReceiverDef delay= { sec=0 nanosec=50000000 } disposed=TRUE command= { group_id=1001 receiver_id=1 partition_id=1 topic_id=1 topic_kind=BEST_EFFORT scheduling_class=TIMESHARING thread_priority=0 report_period=10000 polling_period=10 } }
+DDSTouchStoneCommand= { kind=ReceiverDef delay= { sec=0 nanosec=50000000 } disposed=FALSE command= { group_id=$my_group_id receiver_id=1 partition_id=1 topic_id=1 topic_kind=BEST_EFFORT scheduling_class=TIMESHARING thread_priority=0 report_period=10000 polling_period=10 } }
+DDSTouchStoneCommand= { kind=TransmitterDef delay= { sec=2 nanosec=0 } disposed=FALSE command= { group_id=$other_group_id transmitter_id=1 partition_id=1 topic_id=1 topic_kind=BEST_EFFORT scheduling_class=TIMESHARING thread_priority=0 message_size=512 messages_per_burst=55 burst_period=50 } }
+DDSTouchStoneCommand= { kind=TransmitterDef delay= { sec=300 nanosec=0 } disposed=TRUE command= { group_id=$other_group_id transmitter_id=1 partition_id=1 topic_id=1 topic_kind=BEST_EFFORT scheduling_class=TIMESHARING thread_priority=0 message_size=512 messages_per_burst=55 burst_period=50 } }
+DDSTouchStoneCommand= { kind=ReceiverDef delay= { sec=0 nanosec=50000000 } disposed=TRUE command= { group_id=$my_group_id receiver_id=1 partition_id=1 topic_id=1 topic_kind=BEST_EFFORT scheduling_class=TIMESHARING thread_priority=0 report_period=10000 polling_period=10 } }
 
_EOF
}

function create_recording_script ()
{
    if [ $# -ne 4 ]; then
        error_trace "ERROR: Wrong number of arguments to ${FUNCNAME[0]}"
        return 1
    fi

    local patcher="$1" && test -n "$patcher" || error_trace "ERROR: Parameter \$1 is empty" || return 1
    local remote="$2" && test -n "$remote" || error_trace "ERROR: Parameter \$2 is empty" || return 1
    local src="$3" && test -n "$src" || error_trace "ERROR: Parameter \$3 is empty" || return 1
    local dst="$4" && test -n "$dst" || error_trace "ERROR: Parameter \$4 is empty" || return 1

    if [ ! -f "$src" -o ! -d "$(dirname "$dst")" ]; then
        error_help "ERROR: '$src' or '$dst' or both are invalid"
        return 1
    fi

    local tmpfile="tmp$(date +%s).dat"
    # Make sure that the line endings in the scripts is only '\n'
    cat "$src" | tr -d '\r' >"$tmpfile" || return 1
    eval "\"$patcher\" \"$tmpfile\" \"$remote\"" || return 1
    mv -f "$tmpfile" "$dst"
}

function start_ospl ()
{
    pushd "$PWD" &>/dev/null
    cd "$g_unix_logdir"

    local result=0
    echo -e "\nStarting OSPL for $(soak_impl_name) touchstone instance using [$OSPL_URI]..."
    ospl start || result=$?
    echo -e "\nAvailable domain(s):"
    # 'oslp list' returns a number of running OSPLs. So, it fails if returns 0.
    ospl list && result=0

    echo "result of starting ospl is $result"

    popd &>/dev/null
    return $result
}

function stop_ospl ()
{
    pushd "$PWD" &>/dev/null
    cd "$g_unix_logdir"

    local result=0
    echo -e "\nStopping OSPL for $(soak_impl_name) touchstone instance using [$OSPL_URI]..."
    ospl stop || result=1

    popd &>/dev/null
    return $result
}

function start_touchstone ()
{
    echo -e "\n Starting touchstone"

    local group_id
    group_id="$(ts_group_id "$g_local" "$g_remote")" || return 1

    pushd "$PWD" &>/dev/null
    cd "$g_unix_logdir"

    echo -e "\nStarting $(soak_impl_name) touchstone instance with group id '$group_id'..."
    . "$g_unix_ts_root/bin/start_touchstones.sh" "$g_impl" 1 "$group_id" 1 >"$g_unix_logdir/touchstone_${g_soak_id}.log" 2>&1
    g_touchstone_pid=$!
    sleep "$g_wait_period"

    is_process_running "$g_touchstone_pid" "$(touchstone_process_name)"
    local result=$?
    if [ $result -ne 0 ]; then
        unset g_touchstone_pid
    fi

    popd &>/dev/null
    return $result
}

function stop_touchstone ()
{
    if [ -n "$g_touchstone_pid" ]; then
        echo -e "\nStopping $(soak_impl_name) touchstone instance..."
        kill -9 "$g_touchstone_pid"
        wait "$g_touchstone_pid" &>/dev/null
    fi
}

function start_watcher ()
{
    echo -e "\n Starting watcher"

    pushd "$PWD" &>/dev/null
    cd "$g_unix_logdir"

    echo -e "\nStarting watcher..."
    "$g_unix_ts_bin/watcher" -v >"$g_unix_logdir/watcher_${g_soak_id}.log" 2>&1 &
    g_watcher_pid=$!
    sleep "$g_wait_period"

    is_process_running "$g_watcher_pid" "watcher" && return 0
    local result=$?
    if [ $result -ne 0 ]; then
        unset g_watcher_pid
    fi

    popd &>/dev/null
    return $result
}

function stop_watcher ()
{
    if [ -n "$g_watcher_pid" ]; then
        echo -e "\nStopping watcher..."
        kill -9 "$g_watcher_pid"
        wait "$g_watcher_pid" &>/dev/null
    fi
}

function setup_recording_scripts ()
{
    echo -e "\n Doing setup_recording_scripts"

    # Hardcode the hosts that do recording.
    if [ "$(plain_hostname)" = "$LIN32_HOSTNAME" -o "$(plain_hostname)" = "$WIN32_HOSTNAME" ]; then
        echo -e "\nPatching recorder scripts..."
        create_recording_script _patch_for_latency "$LIN64_HOSTNAME" "$g_unix_ts_root/examples/simple/latency/simple_latency_recording.dat" "$g_unix_logdir/latency_recording_${g_soak_id}.dat" || return 1
        create_recording_script _patch_for_throughput "$LIN64_HOSTNAME" "$g_unix_ts_root/examples/simple/throughput/simple_throughput_recording.dat" "$g_unix_logdir/throughput_recording_${g_soak_id}.dat" || return 1
    fi
}

function start_latency_recording ()
{
    echo -e "\n Doing start_latency_recording" 

    # Hardcode the hosts that do recording.
    if [ "$(plain_hostname)" = "$LIN32_HOSTNAME" -o "$(plain_hostname)" = "$WIN32_HOSTNAME" ]; then
        pushd "$PWD" &>/dev/null
        cd "$g_unix_logdir"

        echo -e "\nStarting latency recording..."
        . "$g_unix_ts_root/bin/start_recording.sh" "$g_logdir/latency_recording_${g_soak_id}.dat" >"$g_unix_logdir/latency_recording_${g_soak_id}.log" 2>&1
        g_latency_recording_pid=$!
        sleep "$g_wait_period"

        is_process_running "$g_latency_recording_pid" "recorder"
        local result=$?
        if [ $result -ne 0 ]; then
            unset g_latency_recording_pid
        fi

        popd &>/dev/null
        return $result
    fi
    return 0
}

function stop_latency_recording ()
{
    if [ -n "$g_latency_recording_pid" ]; then
        echo -e "\nStopping latency recording..."
        kill -9 "$g_latency_recording_pid"
        wait "$g_latency_recording_pid" &>/dev/null
    fi
}

function start_throughput_recording ()
{
    echo -e "\n Doing start_throughtput_recording"

    # Hardcode the hosts that do recording.
    if [ "$(plain_hostname)" = "$LIN32_HOSTNAME" -o "$(plain_hostname)" = "$WIN32_HOSTNAME" ]; then
        pushd "$PWD" &>/dev/null
        cd "$g_unix_logdir"

        echo -e "\nStarting throughput recording..."
        . "$g_unix_ts_root/bin/start_recording.sh" "$g_logdir/throughput_recording_${g_soak_id}.dat" >"$g_unix_logdir/throughput_recording_${g_soak_id}.log" 2>&1
        g_throughput_recording_pid=$!
        sleep "$g_wait_period"

        is_process_running "$g_throughput_recording_pid" "recorder"
        local result=$?
        if [ $result -ne 0 ]; then
            unset g_throughput_recording_pid
        fi

        popd &>/dev/null
        return $result
    fi
    return 0
}

function stop_throughput_recording ()
{
    if [ -n "$g_throughput_recording_pid" ]; then
        echo -e "\nStopping throughput recording..."
        kill -9 "$g_throughput_recording_pid"
        wait "$g_throughput_recording_pid" &>/dev/null
    fi
}

function start_mmstat ()
{
    echo -e "\n Starting mmstat"

    pushd "$PWD" &>/dev/null
    cd "$g_unix_logdir"

    echo -e "\nStarting mmstat..."
    mmstat -i 3600000 2>&1 | tee "$g_unix_logdir/mmstat_${g_soak_id}.log"

    popd &>/dev/null
}

function run_soak_test ()
{
    source_soak_env || g_soak_test_failed=1
    source_ospl_uri || g_soak_test_failed=1

    echo -e "\n Starting ospl"

    test $g_soak_test_failed -eq 0 && start_ospl || g_soak_test_failed=1

    test $g_soak_test_failed -eq 0 && start_touchstone || g_soak_test_failed=1

    test $g_soak_test_failed -eq 0 && start_watcher || g_soak_test_failed=1

    # These steps are done conditionally on the host where the script is run.
    test $g_soak_test_failed -eq 0 && setup_recording_scripts || g_soak_test_failed=1

    test $g_soak_test_failed -eq 0 && start_latency_recording || g_soak_test_failed=1

    test $g_soak_test_failed -eq 0 && start_throughput_recording || g_soak_test_failed=1


    # Start the blocking part only if all the previous steps were allgoodful.
    test $g_soak_test_failed -eq 0 && start_mmstat

    # Stop everything without looking at success status of each step.
    stop_throughput_recording || g_soak_test_failed=1
    stop_latency_recording || g_soak_test_failed=1

    stop_watcher || g_soak_test_failed=1
    stop_touchstone || g_soak_test_failed=1

    stop_ospl || g_soak_test_failed=1
}

function log_places ()
{
    local p1 p2 h1 h2 l
    for p1 in $(testing_prefices)
    do
        for p2 in $(testing_prefices)
        do
            if [ "$p1" = "$p2" ]; then
                : # Do nothing.
            elif [ "$p1" = 'LIN32' -a "$p2" = 'WIN32' ]; then
                : # Do nothing.
            elif [ "$p1" = 'WIN32' -a "$p2" = 'LIN32' ]; then
                : # Do nothing.
            else
                eval "h1=\${${p1}_HOSTNAME}"
                eval "h2=\${${p2}_HOSTNAME}"
                eval "l=\${${p1}_LOG_DIR}"

                echo "$l/$(soak_test_id "$h1" "$h2" 'cpp')|$h1"
                echo "$l/$(soak_test_id "$h1" "$h2" 'java')|$h1"
            fi
        done
    done
}

function savelogs ()
{
    if [ $# -ne 1 ]; then
        error_trace "ERROR: Wrong number of arguments to ${FUNCNAME[0]}"
        return 1
    fi

    local machine="$1" && test -n "$machine" || error_trace "ERROR: Parameter \$1 is empty" || return 1

    local logdir unix_logdir
    logdir="$(remote_var_value "$machine" LOG_DIR)" || return 1
    unix_logdir="$(to_unix_path "$logdir")"
    local archfile="soak$(date +%F_%s).tar"

    # This is a zero archive to start with in a current directory.
    tar -cf "$archfile" --files-from /dev/null || return 1

    local place path machine base
    for place in $(log_places)
    do
        path="$(echo "$place" | sed -e 's/|.*$//')"
        remote="$(echo "$place" | sed -e 's/^[^|]*|//')"
        base="$(basename "$path")"

        if [ "$machine" != "$remote" ]; then
            echo -e "\nGetting '$path' from '$remote'..."
            STAF "$remote" FS COPY DIRECTORY "$path" TODIRECTORY "$logdir/$base" || return 1

            echo -e "\nArchiving '$base'..."
            tar -rf "$archfile" -C "$unix_logdir" "$base" || return 1
        else
            echo -e "\nArchiving '$base'..."
            tar -rf "$archfile" -C "$unix_logdir" "$base" || return 1
        fi
    done
    gzip -c "$archfile" > "$archfile.gz" || return 1
    rm -f "$archfile"
}

function _print_soakutils_help ()
{
    echo "soakutils:"
    echo "    --remote=host - sets the remote host (mandatory option)"
}

function _check_soakutils_args ()
{
    while [ $# -ne 0 ]
    do
        case "$1" in
            -h|--help)
                _print_soakutils_help
                return 1
                ;;
            --remote=*)
                g_remote="$(echo "$1" | sed -e 's|--remote=||')"
                shift
                ;;
            *)
                shift
                ;;
        esac
    done

    if [ -z "$g_remote" ]; then
        _print_start_help # This is the function from osplsettings.shsrc.
        _print_soakutils_help
        return 1
    fi

    # In case g_impl is empty then we don't really run tests.
    if [ -n "$g_impl" ]; then
        g_local="$(plain_hostname)" && test -n "$g_local" || error_trace "ERROR: Parameter \$g_local is empty" || return 1
        g_soak_id="$(soak_test_id "$g_local" "$g_remote" "$g_impl")" || return 1
    fi
}
if [ -z "$g_soakutils_loaded" ]; then
    g_soakutils_loaded='yes'
    # This is the last line in this file. It can set $? which is important for
    # the outside code. Don't do anything after this!!!
    _check_soakutils_args "$@"
fi
