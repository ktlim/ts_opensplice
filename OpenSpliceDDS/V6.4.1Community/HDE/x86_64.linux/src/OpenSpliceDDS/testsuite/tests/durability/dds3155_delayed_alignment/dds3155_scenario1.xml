<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE stax SYSTEM "../../stax/stax.dtd">
<!--
## \defgroup dds3155 DDS3155 - Delayed alignment
#
# \b Test \b ID: dds1615
#
# \b Test \b Objectives: \n
# Verify that persistent data is injected after a node with a persistent set joins an already running system with an empty
# set. In a 'normal' scenario, a node joining a system in which an empty set is identified as the persistent source will
# never inject it's persistent data. However, with the 'delayedAlignment' configuration on the namespace policy this
# behavior can be modified so that a persistent set will always replace an empty set. The definition of an empty set is
# a set in which no data has been written, thus a write-action on any of the nodes in the system will prevent the
# injection of persistent data by late-joining nodes.
# This scenario tests whether persistent data is injected when a late-joining node containing a persistent set joins a
# system where no data has yet been written. The testcase succeeds when samples read from a node in the already running
# system equal the samples in the persistent set.
#
# \b Prerequisites, \b assumptions, \b constraints
#
# \par \e Environment:
# Two nodes are used in this test with an undisturbed method of communication,
# using the default OpenSplice (reliable broadcast channel) networking features.
#
# \par \e Invariant:
# Nodes A and B are running OpenSplice daemon with networking and durability services enabled on the default domain.
# The topic 'TestTopic' (T1) is used for this test, created with default QoS settings with the following exceptions: durability is set to persistent,
# reliability is set to reliable.
#
# \par \e Node \e 1:
# Publisher of a set of instances (S1) of topic T1 in the default partition.
# \par \e Node \e 2:
# Subscriber of data of topic T1 in the default partition.
#
# \b Test \b Procedure
#
# \b Step \b 1
# \par \e Action
# Start OpenSplice on node A, write persistent samples, stop OpenSplice on node A.
# \par \e Result
# OpenSplice daemon and services is stopped on node, a persistent store with set S1 in namespace 'defaultNamespace' is created.
#
# \b Step \b 2
# \par \e Action
# Start OpenSplice on node B, wait for discovery of persistent data source.
# \par \e Result
# Node B has succesfully started, durability on node B has identified itself as master for namespace 'defaultNamespace'.
#
# \b Step \b 3
# \par \e Action
# Start OpenSplice on node A, wait for discovery of persistent data source.
# \par \e Result
# Node A has succesfully started, durability on node A will have become master.
#
# \b Step \b 4
# \par \e Action
# Read samples on node B.
# \par \e Result
# The samples read on node B equal S1.
#
# \b Step \b 5
# \par \e Action
# Stop OpenSplice on all nodes.
# \par \e Result
# OpenSplice is stopped on all nodes.
#
 -->
<stax>
    <defaultcall function="Run"/>
    <function name="Run">
        <function-list-args>
            <function-optional-arg name="host1" default="None">
                STAF machine nickname (hostname) of host 1
            </function-optional-arg>
            <function-optional-arg name="host2" default="None">
                STAF machine nickname (hostname) of host 2
            </function-optional-arg>
        </function-list-args>

        <sequence>
            <import file="'../../common/HostManager.xml'"/>
            <import file="'../common/Publisher.xml'"/>
            <import file="'../common/Subscriber.xml'"/>
            <import file="'../../common/DurabilityService.xml'"/>
            <call function="'Initialize'"/>

            <script>
                hostList = [None, None]
                portList = [None, None, None]
                samples = [None, None]
                expected_samples = [None, None]

                if ((STAXJobName == None) or (len(STAXJobName) == 0)):
                    STAXJobName = 'Job%d_dds3155_scenario1' % STAXJobID

                uri = os.path.dirname(STAXCurrentXMLFile) + file_sep + 'etc' + file_sep + 'config_dds3155-001.xml'

                STAXMessageLog = 1
            </script>

            <try> <!-- Catching Resource.* and Testcase.* exceptions -->
                <sequence>
                    <!-- Request/lock two linux machines by hostname or by requesting two random hosts -->
                    <block name="'RequestHosts'">
                        <if expr="(host1 != None) and (host2 != None)">
                            <sequence>
                                <call-with-map function="'RequestHost'">
                                    <call-map-arg name="'hostname'">host1</call-map-arg>
                                </call-with-map>
                                <script>hostList[0] = STAXResult</script>
                                <call-with-map function="'RequestHost'">
                                    <call-map-arg name="'hostname'">host2</call-map-arg>
                                </call-with-map>
                                <script>hostList[1] = STAXResult</script>
                            </sequence>
                            <else>
                                <loop from="0" to="len(hostList) - 1" var="i">
                                    <sequence>
                                        <call-with-map function="'RequestHost'">
                                            <call-map-arg name="'target'">'.*linux2\.6.*'</call-map-arg>
                                        </call-with-map>
                                        <script>hostList[i] = STAXResult</script>
                                    </sequence>
                                </loop>
                            </else>
                        </if>
                    </block>

                    <!-- Request/lock two UDP ports during the testcase -->
                    <block name="'RequestPorts'">
                        <loop from="0" to="len(portList) - 1" var="i">
                            <sequence>
                                <call function="'RequestPortResource'"/>
                                <script>
                                    [RC, port] = STAXResult
                                    portList[i] = port
                                </script>
                            </sequence>
                        </loop>
                    </block>

                    <!-- Deploy OpenSplice on the machines and set some common properties -->
                    <block name="'DeployHosts'">
                        <sequence>
                            <paralleliterate in="hostList" var="host">
                                <sequence>
                                    <call-with-map function="'DeployHost'">
                                        <call-map-arg name="'host'">host</call-map-arg>
                                    </call-with-map>
                                    <script>
                                        # Set some common parameters
                                        host.set_scenario('tc_dds3155_delayed_alignment_001')
                                        host.set_env('OSPL_BESTEFFORT_PORT', portList[0])
                                        host.set_env('OSPL_RELIABLE_PORT', portList[1])
                                        host.set_env('OSPL_DISCOVERY_PORT', portList[2])

                                        host.set_env('OSPL_DOMAINID', 0)
                                        host.set_env('OSPL_DOMAIN', host.get_scenario())
                                        host.set_env('OSPL_ERRORFILE', host.get_scenario() + '-ospl-error.log')
                                        host.set_env('OSPL_INFOFILE', host.get_scenario() + '-ospl-info.log')
                                        host.set_env('OSPL_DURABILITY_TRACE', host.get_scenario() + '-durability.log')
                                        host.set_env('OSPL_PSTORE', host.get_scenario() + '-pstore')
                                    </script>
                                </sequence>
                            </paralleliterate>
                        </sequence>
                    </block>

                    <block name="'DeployFiles'">
                        <paralleliterate in="hostList" var="host">
                            <sequence>
                                <call function="'DeployPublisher'">host</call>
                                <call function="'DeploySubscriber'">host</call>
                            </sequence>
                        </paralleliterate>
                    </block>

                    <block name="'RunScenario'">
                        <sequence>
                            <!-- Global variables to keep track of durability log index between testcases -->
                            <script>
                                logIndex = STAXGlobal([])
                                nodeIds = STAXGlobal([])
                                proceed = STAXGlobal(1)
                                for host in hostList:
                                    logIndex.append(0)
                                    nodeIds.append(0)
                            </script>

                            <!-- Start OpenSplice node A, write samples, Stop OpenSplice -->
                            <call function="'tc_dds3155_delayed_alignment_001a'"/>

                            <!-- Start OpenSplice node B, wait until master is discovered -->
                            <if expr="proceed">
                                <call function="'tc_dds3155_delayed_alignment_001b'"/>
                            </if>

                            <!-- Start OpenSplice node A, check if node selects itself as master -->
                            <if expr="proceed">
                                <call function="'tc_dds3155_delayed_alignment_001c'"/>
                            </if>

                            <!-- Read samples on node B, validate they are equal to those written in 001a -->
                            <if expr="proceed">
                                <call function="'tc_dds3155_delayed_alignment_001d'"/>
                            </if>

                            <!-- Shutdown test -->
                            <call function="'tc_dds3155_delayed_alignment_001e'"/>
                        </sequence>
                    </block>
                </sequence>

                <catch exception="'Resource'" var="msg">
                    <log message="1">'An exception occurred related to a resource needed to run this test. The test cannot start.\nException: %s' % msg</log>
                </catch>

                <catch exception="'TestCase'" var="msg">
                    <sequence>
                        <log message="1">'An exception occured during a testcase. Succeeding tests are cancelled.\nException: %s' % msg</log>
                        <if expr="STAXCurrentTestcase != None">
                            <tcstatus result="'fail'">'Exception occurred'</tcstatus>
                        </if>
                    </sequence>
                </catch>

                <catch exception="'...'" var="msg">
                    <rethrow/>
                </catch>

                <finally>
                    <!-- Release, cleanup resources -->
                    <sequence>
                        <paralleliterate in="hostList" var="host">
                            <if expr="host != None">
                                <call function="'CleanupHost'">host</call>
                            </if>
                        </paralleliterate>
                        <paralleliterate in="portList" var="port">
                            <if expr="port != None">
                                <call function="'ReleasePortResource'">port</call>
                            </if>
                        </paralleliterate>
                    </sequence>
                </finally>
            </try>
        </sequence>
    </function>

    <!-- Start OpenSplice on node A, write samples, stop OpenSplice -->
    <function name="tc_dds3155_delayed_alignment_001a">
        <function-no-args/>
        <sequence>
          <testcase name="'tc_dds3155_delayed_alignment_001a'">
              <sequence>
                  <script>
            host = hostList[0]
          </script>
          <!-- Start OpenSplice -->
          <if expr="host.isWindows()">
            <throw exception="'TestCase.IncompatibleHost'">'This testcase requires Linux hosts, %s is not usable' % host.get_hostname()</throw>
          </if>

          <call function="'SetURI'">host, os.path.dirname(STAXCurrentXMLFile) + file_sep + 'etc' + file_sep + 'config_dds3155-001.xml'</call>
          <call function="'StartOpenSplice'">host</call>
          <tcstatus result="'info'">'Started OpenSplice on %s' % host.get_hostname()</tcstatus>

          <!-- Wait some time to allow samples to get persisted -->
          <stafcmd name="'DurabilityStatupDelay'">
            <location>host.get_staf_url()</location>
            <service>'DELAY'</service>
            <request>'DELAY 20s'</request>
          </stafcmd>

          <!-- Publish ten distinct instances on node A -->
          <script>sample_file_a = os.path.dirname(STAXCurrentXMLFile) + file_sep + 'etc' + file_sep + 'samples_dds3155-001.txt'</script>
          <call-with-map function="'Publisher'">
            <call-map-arg name="'host'">host</call-map-arg>
            <call-map-arg name="'samples'">sample_file_a</call-map-arg>
            <call-map-arg name="'persistent'">1</call-map-arg>
            <call-map-arg name="'domainId'">host.get_env("OSPL_DOMAINID")</call-map-arg>
          </call-with-map>
          <if expr="STAXResult != STAFRC.Ok">
            <sequence>
              <script>proceed.set(0)</script>
              <log message="STAXMessageLog" level="'info'">'Publisher failed on host A (%s, RC=%s)' % (host.get_hostname(), STAXResult)</log>
              <tcstatus result="'fail'">'Publisher failed on host A (%s)' % host.get_hostname()</tcstatus>
            </sequence>
            <else>
              <log message="STAXMessageLog" level="'info'">'Published 10 samples on host A1 (%s, RC: %s)' % (host.get_hostname(), STAXResult)</log>
            </else>
          </if>

          <!-- Wait some time to allow samples to get persisted -->
          <stafcmd name="'PersistentStoreDelay'">
            <location>host.get_staf_url()</location>
            <service>'DELAY'</service>
            <request>'DELAY 30s'</request>
          </stafcmd>

          <!-- Stop opensplice -->
          <call function="'StopOpenSplice'">host</call>
          <tcstatus result="'info'">'Stopped OpenSplice on %s' % host.get_hostname()</tcstatus>

          <if expr="proceed">
            <tcstatus result="'pass'">'Samples written on host %s' % host.get_hostname()</tcstatus>
          </if>
        </sequence>
      </testcase>
    </sequence>
    </function>

    <!-- Start node B, wait until node selected itself as master -->
    <function name="tc_dds3155_delayed_alignment_001b">
        <function-no-args/>
        <testcase name="'tc_dds3155_delayed_alignment_001b'">
            <sequence>
                <script>
          host = hostList[1]
        </script>

        <!-- Start OpenSplice on node B -->
        <call function="'SetURI'">host, (os.path.dirname(STAXCurrentXMLFile) + file_sep + 'etc' + file_sep + 'config_dds3155-001.xml')</call>
        <call function="'StartOpenSplice'">host</call>
        <tcstatus result="'info'">'Started OpenSplice on %s' % host.get_hostname()</tcstatus>

        <!-- Wait (max. 30 secs) for persistent source discovery/master selection to finish -->
        <script>
          success = 0
          # Get the timestamp of service startup, node id, match the start of persistent source discovery state and get timestamp at end of state
          conditions = []
          conditions.append(re.compile(R"([0-9]+\.[0-9]+) INIT \(mainThread\) -> Configuration:"))
          conditions.append(re.compile(R"[0-9]+\.[0-9]+ DISCOVER_FELLOWS_GROUPS \(mainThread\) -> My address is: '([0-9]+)'"))
          conditions.append(re.compile(R"[0-9]+\.[0-9]+ DISCOVER_PERSISTENT_SOURCE \(mainThread\) -> ----ENTERING STATE----"))
          conditions.append(re.compile(R"([0-9]+\.[0-9]+) DISCOVER_PERSISTENT_SOURCE \(mainThread\) -> ----LEAVING STATE----"))
        </script>
        <timer duration="'30s'">
          <loop while="success == 0">
            <sequence>
              <stafcmd name="'PersistentSourceDiscoveryDelay'">
                <location>host.get_staf_url()</location>
                <service>'DELAY'</service>
                <request>'DELAY 5s'</request>
              </stafcmd>
              <call function="'GetDurabilityLog'">host, 1</call>
              <script>log = STAXResult</script>
              <if expr="log != None">
                <sequence>
                  <call function="'VerifyLog'">log, conditions</call>
                  <script>matchIndex, matches = STAXResult</script>
                  <if expr="len(matches) == len(conditions)">
                    <sequence>
                      <script>
                        tsServiceStart = float(matches[0].group(1))
                        nodeId = matches[1].group(1)
                        tsEnd = float(matches[3].group(1))
                        success = 1
                      </script>
                      <log message="STAXMessageLog" level="'info'">'Host %s acquired persistent source %.2fs after service start' % (host.get_hostname(), tsEnd-tsServiceStart)</log>
                    </sequence>
                    <else>
                      <log level="'debug'" message="0">'Host %s failed persistent source discovery\nFailed condition: %s' % (host.get_hostname(), conditions[len(matches)].pattern)</log>
                    </else>
                  </if>
                </sequence>
              </if>
            </sequence>
          </loop>
        </timer>
        <!-- Timer timeout -->
        <if expr="RC != 0">
          <sequence>
            <script>
              proceed.set(0)
              msg = 'Failed to verify persistent source discovery on host %s (timeout): ' % host.get_hostname()
              if log == None:
                msg += 'Could not get durability tracing log'
              else:
                msg += 'Failed condition (%s)\n' % conditions[len(matches)].pattern
                msg += 'Tracing log:\n'
                msg += '\n'.join(log)
            </script>
            <log message="STAXMessageLog" level="'debug'">msg</log>
            <tcstatus result="'fail'">'Failed to verify persistent source discovery on host %s (timeout)' % host.get_hostname()</tcstatus>
          </sequence>
          <else>
            <tcstatus result="'pass'">'OpenSplice started on host %s' % host.get_hostname()</tcstatus>
          </else>
        </if>
            </sequence>
        </testcase>
    </function>

    <!-- Start node A, wait for master-selection, should select itself as master even though an existing master is available -->
    <function name="tc_dds3155_delayed_alignment_001c">
        <function-no-args/>
        <testcase name="'tc_dds3155_delayed_alignment_001c'">
      <sequence>
        <script>host = hostList[0]</script>

        <!-- Start OpenSplice on node 2 -->
        <if expr="host.isWindows()">
          <throw exception="'TestCase.IncompatibleHost'">'This testcase requires Linux hosts, %s is not usable' % host.get_hostname()</throw>
        </if>
        <call function="'SetURI'">host, os.path.dirname(STAXCurrentXMLFile) + file_sep + 'etc' + file_sep + 'config_dds3155-001.xml'</call>
        <call function="'StartOpenSplice'">host</call>
        <tcstatus result="'info'">'Started OpenSplice on %s' % host.get_hostname()</tcstatus>

        <!-- Wait (max. 30 secs) for persistent source discovery -->
        <script>
          success = 0
          # Get the timestamp of service startup, node id, match the start of persistent source discovery state and get timestamp at end of state
          conditions = []
          conditions.append(re.compile(R"([0-9]+\.[0-9]+) INIT \(mainThread\) -> Configuration:"))
          conditions.append(re.compile(R"[0-9]+\.[0-9]+ DISCOVER_FELLOWS_GROUPS \(mainThread\) -> My address is: '([0-9]+)'"))
          conditions.append(re.compile(R"[0-9]+\.[0-9]+ DISCOVER_PERSISTENT_SOURCE \(mainThread\) -> ----ENTERING STATE----"))
          conditions.append(re.compile(R"([0-9]+\.[0-9]+) DISCOVER_PERSISTENT_SOURCE \(mainThread\) -> ----LEAVING STATE----"))
        </script>
        <timer duration="'30s'">
          <loop while="success == 0">
            <sequence>
              <stafcmd name="'PersistentSourceDiscoveryDelay'">
                <location>host.get_staf_url()</location>
                <service>'DELAY'</service>
                <request>'DELAY 5s'</request>
              </stafcmd>
              <call function="'GetDurabilityLog'">host, 1</call>
              <script>log = STAXResult</script>
              <if expr="log != None">
                <sequence>
                  <call function="'VerifyLog'">log, conditions</call>
                  <script>matchIndex, matches = STAXResult</script>
                  <if expr="len(matches) == len(conditions)">
                    <sequence>
                      <script>
                        tsServiceStart = float(matches[0].group(1))
                        nodeId = matches[1].group(1)
                        tsEnd = float(matches[3].group(1))
                        success = 1
                      </script>
                      <log message="STAXMessageLog" level="'info'">'Host %s acquired persistent source %.2fs after service start' % (host.get_hostname(), tsEnd-tsServiceStart)</log>
                    </sequence>
                    <else>
                      <log level="'debug'" message="0">'Host %s failed persistent source discovery\nFailed condition: %s' % (host.get_hostname(), conditions[len(matches)].pattern)</log>
                    </else>
                  </if>
                </sequence>
              </if>
            </sequence>
          </loop>
        </timer>
        <!-- Timer timeout -->
        <if expr="RC != 0">
          <sequence>
            <script>
              proceed.set(0)
              msg = 'Failed to verify persistent source discovery on host %s (timeout): ' % host.get_hostname()
              if log == None:
                msg += 'Could not get durability tracing log'
              else:
                msg += 'Failed condition (%s)\n' % conditions[len(matches)].pattern
                msg += 'Tracing log:\n'
                msg += '\n'.join(log)
            </script>
            <log message="STAXMessageLog" level="'debug'">msg</log>
            <tcstatus result="'fail'">'Failed to verify persistent source discovery on host %s (timeout)' % host.get_hostname()</tcstatus>
          </sequence>
          <else>
            <tcstatus result="'pass'">'OpenSplice started on host %s' % host.get_hostname()</tcstatus>
          </else>
        </if>
      </sequence>
        </testcase>
    </function>

    <!-- Read data on node B after wait for historical data -->
    <function name="tc_dds3155_delayed_alignment_001d">
        <function-no-args/>
        <testcase name="'tc_dds3155_delayed_alignment_001d'">
      <sequence>
        <!-- Wait some time to allow durability to align. -->
        <stafcmd name="'AlignmentDelay'">
          <location>host.get_staf_url()</location>
          <service>'DELAY'</service>
          <request>'DELAY 15s'</request>
        </stafcmd>
                <script>host = hostList[1]</script>
        <script>samples_expected = os.path.dirname(STAXCurrentXMLFile) + file_sep + 'etc' + file_sep + 'samples_dds3155-001.txt'</script>
        <call-with-map function="'Subscriber'">
          <call-map-arg name="'host'">host</call-map-arg>
          <call-map-arg name="'samples'">samples_expected</call-map-arg>
          <call-map-arg name="'persistent'">1</call-map-arg>
          <call-map-arg name="'take'">1</call-map-arg>
          <call-map-arg name="'wait'">3000</call-map-arg>
          <call-map-arg name="'domainId'">host.get_env("OSPL_DOMAINID")</call-map-arg>
        </call-with-map>
        <if expr="STAXResult != STAFRC.Ok">
          <sequence>
            <script>proceed.set(0)</script>
            <log message="STAXMessageLog" level="'info'">'Subscriber failed on host %s (RC=%s)' % (host.get_hostname(), STAXResult)</log>
            <tcstatus result="'fail'">'Subscriber failed on host %s' % host.get_hostname()</tcstatus>
          </sequence>
          <else>
            <sequence>
              <log message="STAXMessageLog" level="'info'">'Read all expected samples on host %s (RC: %s)' % (host.get_hostname(), STAXResult)</log>
              <tcstatus result="'pass'">'Read all expected samples on host %s' % host.get_hostname()</tcstatus>
            </sequence>
          </else>
        </if>
      </sequence>
        </testcase>
    </function>

    <!-- Stop OpenSplice and retrieve logfiles on all three nodes -->
    <function name="tc_dds3155_delayed_alignment_001e">
        <function-no-args/>
        <testcase name="'tc_dds3155_delayed_alignment_001e'">
            <sequence>
                <script>success = STAXGlobal(1)</script>
                <paralleliterate in="hostList" var="host">
                    <sequence>
                        <call function="'StopOpenSplice'">host</call>
                        <if expr="STAXResult != STAFRC.Ok">
                            <sequence>
                                <tcstatus result="'fail'">'Stopping OpenSplice failed on %s' % host.get_hostname()</tcstatus>
                                <script>success.set(0)</script>
                            </sequence>
                            <else>
                                <tcstatus result="'info'">'Stopped OpenSplice on %s' % host.get_hostname()</tcstatus>
                            </else>
                        </if>
                    </sequence>
                </paralleliterate>
                <if expr="success">
                    <tcstatus result="'pass'">'Stopped OpenSplice on all hosts'</tcstatus>
                </if>
            </sequence>
        </testcase>
    </function>
</stax>
