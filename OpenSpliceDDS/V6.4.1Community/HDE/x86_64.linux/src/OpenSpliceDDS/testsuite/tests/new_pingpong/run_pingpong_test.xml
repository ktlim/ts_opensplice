<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE stax SYSTEM "../stax/stax.dtd">

<!--
    run_pinpong_test.xml - Run the Ping Pong examples test using STAX

    Job Description:
    This job runs the Ping Pong examples using STAX.
    The examples are run within an installed distribution.
-->

<stax>

  <defaultcall function="pingpong_main">
  </defaultcall>

  <function name="pingpong_main" scope="local" >
    <function-prolog>
      Test runs OSPL on one or two nodes. Ping pong is then run between them.

      If both ping and pong return 0 the  test succeeds.
      Fails otherwise.
    </function-prolog>

    <function-list-args>
      <function-required-arg name="run_type">
        The type of run - sp (Single Process) or shm (Shared memory), use the following format: "runtype"
      </function-required-arg>
      <function-required-arg name="host_name1">
        The host name of the first machine you wish test on in double quotes, use the following format: "name"
      </function-required-arg>
      <function-required-arg name="test_root1">
        Location of test case build on machine 1 in double quotes and double backslash, use the following format: "dir1\\dir2"
      </function-required-arg>
      <function-required-arg name="ospl_home1">
        Location of OSPL root on machine 1 in double quotes and double backslash, use the following format: "dir1\\dir2"
      </function-required-arg>
      <function-required-arg name="operation_key1">
        Operation key in double quotes, use the following format: "operation_key1"
      </function-required-arg>
      <function-required-arg name="host_name2">
        The host name of the second machine you wish to test on in double quotes, use the following format: "name"
      </function-required-arg>
      <function-required-arg name="test_root2">
        Location of test case build on machine 2 in double quotes and double backslash, use the following format: "dir1\\dir2"
      </function-required-arg>
      <function-required-arg name="ospl_home2">
        Location of OSPL root on machine 2 in double quotes and double backslash, use the following format: "dir1\\dir2"
      </function-required-arg>
      <function-optional-arg name="operation_key2" default="">
        Operation key in double quotes, use the following format: "operation_key2"
      </function-optional-arg>
      <function-optional-arg name="staf_port1" default="'6500'">
        The STAF port number on the first machine you wish test on in double quotes, use the following format: "port"
      </function-optional-arg>
      <function-optional-arg name="staf_port2" default="'6500'">
        The STAF port number on the the second machine you wish to test on in double quotes, use the following format: "port"
      </function-optional-arg>
    </function-list-args>

    <sequence>
        <!-- Always call initialise first -->
        <import file="'../stax/test_ospl.xml'"/>
        <import file="'pingpong_test_functions.xml'"/>
        <try>
            <sequence>
                <call function="'Initialise'" />
                <script>
                    from process import Process
                    import time
                    test_scenario = BaseTestScenario("PingPong","Test OpenSplice PingPong examples")


                    host1 = test_scenario.define_host(test_root = test_root1, ospl_home = ospl_home1, host_name = host_name1, staf_port = staf_port1)
                    host2 = test_scenario.define_host(test_root = test_root2, ospl_home = ospl_home2, host_name = host_name2, staf_port = staf_port2)
                    # Set test case result log file:
                    this_xml_dir = STAXCurrentXMLFile[:STAXCurrentXMLFile.rfind(os.sep)]
                    host1.set_log_dir(this_xml_dir)
                    test_scenario.set_result_file(host1.get_log_dir() + host1.get_file_sep() + test_scenario.get_name() + "_result.log")
                </script>

                <iterate var="host" in="test_scenario.get_all_hosts()">
                    <call function="'InitHost'">host</call>
                </iterate>

                <script>
                    test_scenario.set_test_scenario_initialized(1)
                </script>
            </sequence>
            <!-- Catch all possible exceptions -->
            <catch exception="'...'" typevar="type" var="info">
                <sequence>
                    <script>
                        test_scenario.fail()
                        test_scenario.errors.append("Initializing process error: %s (%s)!"% (type, info))
                    </script>
                </sequence>
            </catch>
        </try>
        <if expr="test_scenario.is_test_scenario_initialized() == 1">
            <sequence>
                <call function="'GetEnv'">[host1, 'JACORB_HOME']</call>
                <script> jacorb_home1 = STAXResult </script>
                <call function="'GetEnv'">[host2, 'JACORB_HOME']</call>
                <script> jacorb_home2 = STAXResult </script>
                <script>
                    host1.set_ospl_log_dir(ospl_home1)
                    host2.set_ospl_log_dir(ospl_home2)

                    file_path_separator1 = host1.get_file_sep()
                    file_path_separator2 = host2.get_file_sep()
                    path_separator1 = host1.get_path_sep()
                    path_separator2 = host2.get_path_sep()

                    main_class_path1 = host1.get_env_value("CLASSPATH")
                    main_class_path2 = host2.get_env_value("CLASSPATH")                    

                    #init of params array for ping test (for detail read README file for ping pong test)
                    array_of_ping_params = ["m","q","s","f","a","t"]
                    #init of quantity of blocks for ping test (for detail read README file for ping pong test)
                    blocks = " 100 "
                    #init of quantity of cycles for ping test (for detail read README file for ping pong test)
                    nof_cycles = " 100 "
                    #init of partition for ping test (for detail read README file for ping pong test)
                    ping_partition = " PongRead "
                    #init of partition for ping test (for detail read README file for ping pong test)
                    pong_partition = " PongWrite"
                    #init of  array of results of tests
                    array_of_test_results = STAXGlobal([])
                    #init of  operationn keys names
                    java_key = "java"
                    c_key = "c"
                    cpp_key = "cpp"
                    cs_key = "cs"
                    corba_cpp_key = "corba_cpp"
                    corba_java_key = "corba_java"
                    rto_java_key = "RTO_Java"
                    sa_key = "standalone"
                    crb_key = "corba"
                    all_key = "ALL"
                    all_ext_key = "ALL_EXT"
                    shm_type = "shm"

                    #init of test directories names
                    standalone_dir_name = "standalone"
                    corba_dir_name = "corba"
                    examples_dir_name = "examples"
                    dcps_dir_name = "dcps"
                    rt_orb_dir_name = "RTORB"
                    java_dir_name = "java"
                    c_dir_name = "c"
                    cpp_dir_name = "cpp"
                    cs_dir_name = "cs"
                    testsuite_dir_name = "testsuite"
                    tests_dir_name = "tests"
                    log_dir_name = "Log"

                    # The test scenario name should be the test directory name. So you should edit this.
                    test_name = test_scenario.get_name()

                    #init of path to tests
                    path_to_examples1 = examples_dir_name + file_path_separator1 + dcps_dir_name + file_path_separator1
                    path_to_examples2 = examples_dir_name + file_path_separator2 + dcps_dir_name + file_path_separator2

                    path_to_standalone1 = standalone_dir_name + file_path_separator1
                    path_to_standalone2 = standalone_dir_name + file_path_separator2

                    path_to_corba1 = corba_dir_name + file_path_separator1
                    path_to_corba2 = corba_dir_name + file_path_separator2

                    path_to_java_ping_test1 = test_name + file_path_separator1 + java_dir_name + file_path_separator1 + path_to_standalone1
                    path_to_java_ping_test2 = test_name + file_path_separator2 + java_dir_name + file_path_separator2 + path_to_standalone2

                    path_to_java_pong_test1 = test_name + file_path_separator1 + java_dir_name + file_path_separator1 + path_to_standalone1
                    path_to_java_pong_test2 = test_name + file_path_separator2 + java_dir_name + file_path_separator2 + path_to_standalone2

                    path_to_c_ping_test1 = test_name + file_path_separator1 + c_dir_name + file_path_separator1 + path_to_standalone1
                    path_to_c_ping_test2 = test_name + file_path_separator2 + c_dir_name + file_path_separator2 + path_to_standalone2

                    path_to_c_pong_test1 = test_name + file_path_separator1 + c_dir_name + file_path_separator1 + path_to_standalone1
                    path_to_c_pong_test2 = test_name + file_path_separator2 + c_dir_name + file_path_separator2 + path_to_standalone2

                    path_to_cpp_ping_test1 = test_name + file_path_separator1 + cpp_dir_name + file_path_separator1 + path_to_standalone1
                    path_to_cpp_ping_test2 = test_name + file_path_separator2 + cpp_dir_name + file_path_separator2 + path_to_standalone2

                    path_to_cpp_pong_test1 = test_name + file_path_separator1 + cpp_dir_name + file_path_separator1 + path_to_standalone1
                    path_to_cpp_pong_test2 = test_name + file_path_separator2 + cpp_dir_name + file_path_separator2 + path_to_standalone2

                    path_to_corba_cpp_ping_test1 = test_name + file_path_separator1 + cpp_dir_name + file_path_separator1 + path_to_corba1
                    path_to_corba_cpp_ping_test2 = test_name + file_path_separator2 + cpp_dir_name + file_path_separator2 + path_to_corba2

                    path_to_corba_cpp_pong_test1 = test_name + file_path_separator1 + cpp_dir_name + file_path_separator1 + path_to_corba1
                    path_to_corba_cpp_pong_test2 = test_name + file_path_separator2 + cpp_dir_name + file_path_separator2 + path_to_corba2

                    path_to_corba_java_ping_test1 = test_name + file_path_separator1 + java_dir_name + file_path_separator1 + path_to_corba1
                    path_to_corba_java_ping_test2 = test_name + file_path_separator2 + java_dir_name + file_path_separator2 + path_to_corba2

                    path_to_corba_java_pong_test1 = test_name + file_path_separator1 + java_dir_name + file_path_separator1 + path_to_corba1
                    path_to_corba_java_pong_test2 = test_name + file_path_separator2 + java_dir_name + file_path_separator2 + path_to_corba2

                    #path_to_rto_java_ping_test1 = java_dir_name + file_path_separator1 + rt_orb_dir_name + test_name + file_path_separator1
                    #path_to_rto_java_ping_test2 = java_dir_name + file_path_separator2 + rt_orb_dir_name + test_name + file_path_separator2

                    #path_to_rto_java_pong_test1 = java_dir_name + file_path_separator1 + rt_orb_dir_name + test_name + file_path_separator1
                    #path_to_rto_java_pong_test2 = java_dir_name + file_path_separator2 + rt_orb_dir_name + test_name + file_path_separator2

                    #This class is implementation of entity of results of test
                    class LogResult:
                        """
                        This class is implementation of entity of results of test
                        """
                        def __init__(self, name, log_name, log_dir_name, op_key, param_name):
                            self.name_ = name
                            self.op_key_ = op_key
                            self.log_name_ = log_name
                            self.log_dir_name_ = log_dir_name
                            self.param_name_ = param_name
                        #getting  name of test
                        def get_name(self):
                            """
                            getting  name of test
                            """
                            return self.name_
                        #getting  log file name of test
                        def get_log_name(self):
                            """
                            getting  log file name of test
                            """
                            return self.log_name_
                        #getting  of directory of log file name of test
                        def get_log_dir_name(self):
                            """
                            getting  of directory of log file name of test
                            """
                            return self.log_dir_name_
                        #getting  of operation key
                        def get_op_key(self):
                            """
                            getting  of operation key
                            """
                            return self.op_key_
                        #getting  of parametr name
                        def get_param_name(self):
                            """
                            getting  of parametr name
                            """
                            return self.param_name_
                    #This class extens from Process class, operation key field was added
                    class ExtProcess(Process):
                        """
                        This class extens from Process class, operation key field was added
                        """
                        def __init__(self, process_for_init, op_key):
                            Process.__init__(self, process_for_init.get_command())
                            # The arguments for a process:
                            self.args        = process_for_init.get_args()
                            # The working directory for a process:
                            self.working_dir = process_for_init.get_working_dir()
                            # The log file for a process:
                            self.log_file    = process_for_init.get_log_file()
                            # The process STAF ID:
                            self.id          = process_for_init.get_id()
                            # The process STAF handle:
                            self.handle      = process_for_init.get_handle()
                            # The process port:
                            self.port        = process_for_init.get_port()
                            # Use test sync lib:
                            self.use_test_syn_lib = process_for_init.is_test_sync_lib_used()
                            # The process operation key
                            self.self_op_key = op_key
                        #gettin operation key for process
                        def get_op_key(self):
                            """
                            gettin operation key for process
                            """
                            return self.self_op_key
                    #for normalize of length of operation key
                    def normalize_length_of_key(in_key, pong_keys, ping_keys):
                        """
                        for normalize of length of operation key
                        """
                        max_length = 0
                        #search key with max length in pongs keys
                        for key1 in pong_keys:
                            if len(key1) > max_length:
                                max_length = len(key1)
                        #search key with max length in pings keys
                        for key2 in ping_keys:
                            if len(key2) > max_length:
                                max_length = len(key2)
                        #getting current length
                        current_length = len(in_key)
                        #normalize length
                        if max_length > current_length:
                            for i in range(max_length - current_length + 1):
                                in_key = in_key + "_"
                        return in_key


                    # set up keys list  for the processes
                    pong_keys = []
                    ping_keys = []
                    #setting arrays of operation keys by key
                    if ((operation_key1 == sa_key) or (operation_key1 == crb_key) or (operation_key1 == all_key) or (operation_key1 == all_ext_key)):
                        if operation_key1 == sa_key:
                            pong_keys.append(java_key)
                            pong_keys.append(c_key)
                            pong_keys.append(cpp_key)
                            #pong_keys.append(cs_key)
                            ping_keys.append(java_key)
                            ping_keys.append(c_key)
                            ping_keys.append(cpp_key)
                            #ping_keys.append(cs_key)

                        if operation_key1 == crb_key:
                            pong_keys.append(corba_java_key)
                            pong_keys.append(rto_java_key)
                            pong_keys.append(corba_cpp_key)

                            ping_keys.append(java_java_key)
                            ping_keys.append(rto_java_key)
                            ping_keys.append(corba_cpp_key)

                        if ((operation_key1 == all_key) or (operation_key1 == all_ext_key)):
                            pong_keys.append(java_key)
                            pong_keys.append(c_key)
                            pong_keys.append(cpp_key)
                            pong_keys.append(corba_java_key)
                            pong_keys.append(rto_java_key)
                            pong_keys.append(corba_cpp_key)

                            ping_keys.append(java_key)
                            ping_keys.append(c_key)
                            ping_keys.append(cpp_key)
                            ping_keys.append(corba_java_key)
                            ping_keys.append(rto_java_key)
                            ping_keys.append(corba_cpp_key)
                        operation_key2 = ""
                    else:
                        pong_keys.append(operation_key1)
                        ping_keys.append(operation_key2)
                    #init arrays of pingpong processes tests
                    pongs = []
                    pings = []


                    if operation_key2 == "":
                        operation_key2 = "no_key"

                    #setting path for commands for tests
                    full_path1 = ospl_home1 + file_path_separator1 + path_to_examples1
                    full_path2 = ospl_home2 + file_path_separator2 + path_to_examples2

                    path_to_sa_classes1 = path_to_java_ping_test1 + "classes"
                    path_to_sa_classes2 = path_to_java_ping_test2 + "classes"

                    path_to_corba_classes1 = path_to_corba_java_ping_test1 + "classes"
                    path_to_corba_classes2 = path_to_corba_java_ping_test2 + "classes"

                    path_to_java_lib1 = "jar" + file_path_separator1 + "dcpssaj.jar"
                    path_to_java_lib2 = "jar" + file_path_separator2 + "dcpssaj.jar"

                    path_to_corba_java_lib1 = "jar" + file_path_separator1 + "dcpscj.jar"
                    path_to_corba_java_lib2 = "jar" + file_path_separator2 + "dcpscj.jar"

                    jacorb_endorsed_dirs1 = jacorb_home1 + file_path_separator1 + "lib" + file_path_separator1 + "endorsed"
                    jacorb_endorsed_dirs2 = jacorb_home2 + file_path_separator2 + "lib" + file_path_separator2 + "endorsed"  

                    jacorb_jars1 = jacorb_endorsed_dirs1 + file_path_separator1 + "jacorb.jar"
                    jacorb_jars2 = jacorb_endorsed_dirs2 + file_path_separator2 + "jacorb.jar"

                    start_java_sa1 = ospl_home1 + file_path_separator1 + path_to_java_lib1 + path_separator1 + full_path1 + path_to_sa_classes1
                    start_java_sa2 = ospl_home2 + file_path_separator2 + path_to_java_lib2 + path_separator2 + full_path2 + path_to_sa_classes2

                    start_java_corba1 = full_path1 + path_to_corba_classes1 + path_separator1 + ospl_home1 + file_path_separator1 + path_to_corba_java_lib1 
                    start_java_corba2 = full_path2 + path_to_corba_classes2 + path_separator2 + ospl_home2 + file_path_separator2 + path_to_corba_java_lib2

                </script>
                <call function="'CreateTestLogDirectory'">[host1, test_name]</call>
                <script>
                    current_log_dir_name1 = STAXResult
                    time.sleep(1)
                </script>
                <call function="'CreateTestLogDirectory'">[host2, test_name]</call>
                <script>
                    current_log_dir_name2 = STAXResult
                    #setting commands for tests by keys
                    for pong_key in pong_keys:

                        next_pong = host1.define_process("no_command")

                        if pong_key == java_key:
                            #setting command
                            cp1 = main_class_path1 + path_separator1 + start_java_sa1 
                            host1.set_env_value("CLASSPATH", cp1)
                            next_pong.set_command("java")
                            next_pong.set_args("-classpath " + start_java_sa1 + " pong")

                        if pong_key == c_key:
                            #setting command
                            next_pong.set_command(full_path1 + path_to_c_pong_test1 + file_path_separator1 + "pong")
                            #setting working dir
                            next_pong.set_working_dir(full_path1 + path_to_c_pong_test1)

                        if pong_key == cpp_key:
                            #setting command
                            next_pong.set_command(full_path1 + path_to_cpp_pong_test1 + file_path_separator1 + "pong")
                            #setting working dir
                            next_pong.set_working_dir(full_path1 + path_to_cpp_pong_test1)

                        if pong_key == corba_cpp_key:
                            #setting command
                            next_pong.set_command(ospl_home1 + file_path_separator1 + path_to_examples1 + path_to_corba_cpp_pong_test1 + file_path_separator1 + "pong")
                            #setting working dir
                            next_pong.set_working_dir(ospl_home1 + file_path_separator1 + path_to_examples1 + path_to_corba_cpp_pong_test1)

                        if pong_key == corba_java_key:
                            #setting command
                            cp1 = main_class_path1 + path_separator1 + start_java_corba1 + path_separator1 + jacorb_jars1
                            host1.set_env_value("CLASSPATH", cp1)
                            next_pong.set_command("java")
                            next_pong.set_args(" -Djava.endorsed.dirs=" + jacorb_endorsed_dirs1 + " -classpath " + start_java_corba1 + " pong")

                        if pong_key == rto_java_key:
                            #setting command
                            cp1 = main_class_path1 + path_separator1 + start_java_rto_1
                            host1.set_env_value("CLASSPATH", cp1)
                            next_pong.set_command("java")
                            next_pong.set_args("pong")

                        next_pong_ext = ExtProcess(next_pong, pong_key)
                        pongs.append(next_pong_ext)
                    #setting commands for tests by keys
                    for ping_key in ping_keys:

                        next_ping = host2.define_process("no_command")

                        if ping_key == java_key:
                            #setting command
                            cp2 = main_class_path2 + path_separator2 + start_java_sa2
                            host2.set_env_value("CLASSPATH", cp2)
                            next_ping.set_command("java")
                            next_ping.set_args("-classpath " + start_java_sa2 + " ping")

                        if ping_key == c_key:
                            #setting command
                            next_ping.set_command(full_path2 + path_to_c_ping_test2 + file_path_separator2 + "ping")
                            #setting working dir
                            next_ping.set_working_dir(full_path2 + path_to_c_ping_test2)

                        if ping_key == cpp_key:
                            #setting command
                            next_ping.set_command(full_path2 + path_to_cpp_ping_test2 + file_path_separator2 + "ping")
                            #setting working dir
                            next_ping.set_working_dir(full_path2 + path_to_cpp_ping_test2)

                        if ping_key == corba_cpp_key:
                            #setting command
                            next_ping.set_command(ospl_home2 + file_path_separator2 + path_to_examples2 + path_to_corba_cpp_ping_test2 + file_path_separator2 +"ping")
                            #setting working dir
                            next_ping.set_working_dir(ospl_home2 + file_path_separator2 + path_to_examples2 + path_to_corba_cpp_ping_test2)

                        if ping_key == corba_java_key:
                            #setting command
                            cp2 = main_class_path2 + path_separator2 + start_java_corba2 + path_separator2 + jacorb_jars2
                            host2.set_env_value("CLASSPATH", cp2)
                            next_ping.set_command("java")
                            next_ping.set_args("-Djava.endorsed.dirs=" + jacorb_endorsed_dirs2 + " -classpath " + start_java_corba2 + " ping")

                        if ping_key == rto_java_key:
                            #setting command
                            cp2 = main_class_path2 + path_separator2 + start_java_rto_2
                            host2.set_env_value("CLASSPATH", cp2)
                            next_ping.set_command("java")
                            next_ping.set_args("ping")

                        next_ping_ext = ExtProcess(next_ping, ping_key)
                        pings.append(next_ping_ext)


                starttime = time.time() # record starting time
                </script>
                <testcase name = "test_scenario.get_name()">
                    <sequence>
                        <script>
                            full_log_dir_path1 = test_root1 + file_path_separator1 + test_name + file_path_separator1 + current_log_dir_name1
                            full_log_dir_path2 = test_root2 + file_path_separator2 + test_name + file_path_separator2 + current_log_dir_name2

                            index = 0
                        </script>


                        <try>
                            <sequence>
                                <if expr="run_type == shm_type">
                                   <sequence>
                                      <call function="'StartOSPL'">host1</call>
                                      <call function="'StartOSPL'">host2</call>
                                   </sequence>
                                </if>
                                <if expr="operation_key1 != all_ext_key">
                                    <iterate var="a_pong" in="pongs">
                                    <sequence>
                                        <script>
                                            start_pong_args = a_pong.get_args()
                                        </script>

                                        <iterate var="a_ping" in="pings">
                                            <sequence>
                                                <script>
                                                    #normalize keys length
                                                    pong_name_key = normalize_length_of_key(a_pong.get_op_key(), pong_keys, ping_keys)
                                                    ping_name_key = normalize_length_of_key(a_ping.get_op_key(), pong_keys, ping_keys)
                                                    #setting common part of log file name
                                                    start_log_name = "%s_%s_to_%s_%s" % (host1.get_host_name(), pong_name_key, host2.get_host_name(), ping_name_key)
                                                    pong_log_name = start_log_name + "___pong.log"
                                                    a_pong.set_args(start_pong_args + ping_partition + pong_partition)
                                                    #setting pong log filename
                                                    a_pong.set_log_file(full_log_dir_path1+ file_path_separator1 + pong_log_name)
                                                    #addition in array of names

                                                    log_result = LogResult("pong", full_log_dir_path1 + file_path_separator1 + pong_log_name, full_log_dir_path1, a_pong.get_op_key(),"")
                                                    if array_of_test_results.count(log_result) == 0:
                                                        array_of_test_results.append(log_result)
                                                    start_ping_args = a_ping.get_args()
                                                </script>
                                                <parallel>
                                                    <sequence>
                                                        <call function="'RunProcess'">[host1, a_pong, '300s']</call>
                                                        <call function="'PASS-if-0'">STAXResult</call>
                                                    </sequence>
                                                    <sequence>
                                                        <loop var="index" from="0" to="len(array_of_ping_params) - 1 ">
                                                            <sequence>
                                                                <script>
                                                                    first_key = a_pong.get_op_key()
                                                                    if (((first_key == java_key ) or (first_key == rto_java_key) or (first_key == corba_java_key)) and (index == 0)):
                                                                        #wait  (in some case pong process not start at once)
                                                                        time.sleep(5)
                                                                    #addition of args for ping tests
                                                                    a_ping.set_args(start_ping_args + blocks + nof_cycles  + str(array_of_ping_params[index]) + ping_partition + pong_partition)

                                                                    ping_log_name = start_log_name + "_" + array_of_ping_params[index] +  "_ping.log"
                                                                    #setting ping log filename
                                                                    a_ping.set_log_file(full_log_dir_path2 + file_path_separator2 + ping_log_name)
                                                                    #in case 't' params we dont add log file in array cause this last process  - terminated ping process
                                                                    if (array_of_ping_params[index] != 't'):
                                                                        log_result = LogResult("ping", full_log_dir_path1 + file_path_separator1 + ping_log_name, full_log_dir_path1, a_ping.get_op_key(),str(array_of_ping_params[index]))
                                                                        array_of_test_results.append(log_result)
                                                                    else:
                                                                        a_ping.set_log_file("")

                                                                </script>
                                                                <if expr="array_of_ping_params[index] != 't'">
                                                                    <sequence>
                                                                        <call function="'RunProcess'">[host2, a_ping]</call>
                                                                        <call function="'PASS-if-0'">STAXResult</call>
                                                                    </sequence>
                                                                <else>
                                                                    <sequence>
                                                                        <call function="'RunProcess'">[host2, a_ping, '10s']</call>
                                                                        <call function="'PASS-if-0'">STAXResult</call>
                                                                    </sequence>
                                                                </else>
                                                                </if>

                                                                <if expr="array_of_ping_params[index] != 't'">
                                                                    <call function="'CopyProcessLogToHost'">[host2, host1, a_ping, full_log_dir_path1]</call>
                                                                </if>
                                                            </sequence>
                                                        </loop>
                                                    </sequence>
                                                </parallel>
                                            </sequence>
                                        </iterate>
                                    </sequence>
                                </iterate>
                                <else>
                                    <iterate var="a_pong" in="pongs">
                                        <sequence>
                                            <script>
                                                start_pong_args = a_pong.get_args()
                                                a_ping = pings[index]

                                                #normalize keys length
                                                pong_name_key = normalize_length_of_key(a_pong.get_op_key(), pong_keys, ping_keys)
                                                ping_name_key = normalize_length_of_key(a_ping.get_op_key(), pong_keys, ping_keys)
                                                #setting common part of log file name
                                                start_log_name = "%s_%s_to_%s_%s" % (host1.get_host_name(), pong_name_key, host2.get_host_name(), ping_name_key)
                                                pong_log_name = start_log_name + "___pong.log"
                                                a_pong.set_args(start_pong_args + ping_partition + pong_partition)
                                                #setting pong log filename
                                                a_pong.set_log_file(full_log_dir_path1+ file_path_separator1 + pong_log_name)
                                                #addition in array of names

                                                log_result = LogResult("pong", full_log_dir_path1 + file_path_separator1 + pong_log_name, full_log_dir_path1, a_pong.get_op_key(),"")
                                                if array_of_test_results.count(log_result) == 0:
                                                    array_of_test_results.append(log_result)
                                                start_ping_args = a_ping.get_args()
                                            </script>
                                            <parallel>
                                                <sequence>
                                                    <call function="'RunProcess'">[host1, a_pong, '300s']</call>
                                                    <call function="'PASS-if-0'">STAXResult</call>
                                                </sequence>
                                                <sequence>
                                                    <loop var="index" from="0" to="len(array_of_ping_params) - 1 ">
                                                        <sequence>
                                                            <script>
                                                                first_key = a_pong.get_op_key()
                                                                if (((first_key == java_key ) or (first_key == rto_java_key) or (first_key == corba_java_key)) and (index == 0)):
                                                                    #wait  (in some case pong process not start at once)
                                                                    time.sleep(5)
                                                                #addition of args for ping tests
                                                                a_ping.set_args(start_ping_args + blocks + nof_cycles  + str(array_of_ping_params[index]) + ping_partition + pong_partition)

                                                                ping_log_name = start_log_name + "_" + array_of_ping_params[index] +  "_ping.log"
                                                                #setting ping log filename
                                                                a_ping.set_log_file(full_log_dir_path2 + file_path_separator2 + ping_log_name)
                                                                #in case 't' params we dont add log file in array cause this last process  - terminated ping process
                                                                if (array_of_ping_params[index] != 't'):
                                                                    log_result = LogResult("ping", full_log_dir_path1 + file_path_separator1 + ping_log_name, full_log_dir_path1, a_ping.get_op_key(),str(array_of_ping_params[index]))
                                                                    array_of_test_results.append(log_result)
                                                                else:
                                                                    a_ping.set_log_file("")

                                                            </script>
                                                            <if expr="array_of_ping_params[index] != 't'">
                                                                <sequence>
                                                                    <call function="'RunProcess'">[host2, a_ping]</call>
                                                                    <call function="'PASS-if-0'">STAXResult</call>
                                                                </sequence>
                                                            <else>
                                                                <sequence>
                                                                    <call function="'RunProcess'">[host2, a_ping, '10s']</call>
                                                                    <call function="'PASS-if-0'">STAXResult</call>
                                                                </sequence>
                                                            </else>
                                                            </if>

                                                            <if expr="array_of_ping_params[index] != 't'">
                                                                <call function="'CopyProcessLogToHost'">[host2, host1, a_ping, full_log_dir_path1]</call>
                                                            </if>
                                                        </sequence>
                                                    </loop>
                                                </sequence>
                                            </parallel>
                                    <script>
                                        index += 1
                                    </script>
                                    </sequence>
                                </iterate>
                                </else>
                                </if>
                            </sequence>
                        <finally>
                            <sequence>
                                <if expr="run_type == shm_type">
                                   <sequence>
                                       <call function="'StopOSPL'">host1</call>
                                       <call function="'StopOSPL'">host2</call>
                                   </sequence>
                                </if>

                                <call function="'MoveSysLogToHost'">[host1, host1, full_log_dir_path1]</call>
                                <call function="'MoveSysLogToHost'">[host2, host1, full_log_dir_path1]</call>
                            </sequence>
                        </finally>
                        </try>
                    </sequence>
                </testcase>
                 <script>
                    stoptime = time.time()
                    elapsedSecs = stoptime - starttime
                </script>
                <message>'Test complete ran for %d seconds' % elapsedSecs</message>
                <call function="'AnalyzeTestLog'">[full_log_dir_path1, array_of_test_results, blocks]</call>
            </sequence>
        <else>
            <script>
                test_scenario.analyze()
            </script>
        </else>
        </if>

        </sequence>
  </function>
</stax>
