<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE stax SYSTEM "../../stax/stax.dtd">

<stax>
    <function name="ValidatePersistentSource" scope="local">
        <function-prolog>
        <![CDATA[
            <p>This function validates a durability trace log to verify if the 'DISCOVER_PERSISTENT_SOURCE' state of a node is completed.</p>
        ]]>
        </function-prolog>
        <function-epilog>
        <![CDATA[
            <p>After calling this function, the durability node ID is stored in the TestHost object and can be retrieved by calling the get_env('D_NODEID') function.
            Also the line number of the end of the DISCOVER_PERSISTEN_SOURCE state is saved and can be used when a different aspect of the logfile needs to be verified (to prevent complete reparsing of the file)</p>
        ]]>
        </function-epilog>
        <function-list-args>
            <function-required-arg name="hosts">List of TestHosts</function-required-arg>
            <function-optional-arg name="timeout" default="'30s'">Timeout, defaults to 30 seconds. If all hosts can't be verified within this time the current testcase fails</function-optional-arg>
        </function-list-args>
        <sequence>
            <script>retcode = STAXGlobal(1)</script>
            <paralleliterate in="hosts" var="host" indexvar="i">
                <sequence>
                    <script>
                        success = 0
                        # Get the timestamp of service startup, node id, match the start of persistent source discovery state and get timestamp at end of state
                        conditions = []
                        conditions.append(re.compile(R"([0-9]+\.[0-9]+) INIT \(mainThread\) -&gt; Configuration:"))
                        conditions.append(re.compile(R"[0-9]+\.[0-9]+ DISCOVER_FELLOWS_GROUPS \(mainThread\) -&gt; My address is: '([0-9]+)'"))
                        conditions.append(re.compile(R"[0-9]+\.[0-9]+ DISCOVER_PERSISTENT_SOURCE \(mainThread\) -&gt; ----ENTERING STATE----"))
                        conditions.append(re.compile(R"([0-9]+\.[0-9]+) DISCOVER_PERSISTENT_SOURCE \(mainThread\) -&gt; ----LEAVING STATE----")) 
                    </script>
                    <timer duration="timeout">
                        <loop while="success == 0">
                            <sequence>
                                <stafcmd name="'PersistentSourceDiscoveryDelay'">
                                    <location>host.get_staf_url()</location>
                                    <service>'DELAY'</service>
                                    <request>'DELAY 5s'</request>
                                </stafcmd>
                                <call function="'GetDurabilityLog'">host, 1</call>
                                <script>log = STAXResult</script>
                                <if expr="log != None">
                                    <sequence>
                                        <call function="'VerifyLog'">log, conditions</call>
                                        <script>matchIndex, matches = STAXResult</script>
                                        <if expr="len(matches) == len(conditions)">
                                            <sequence>
                                                <script>
                                                    startTimestamp = float(matches[0].group(1))
                                                    nodeId = matches[1].group(1)
                                                    host.set_env('D_NODEID', nodeId)
                                                    host.set_env('D_LOGIDX', matchIndex)
                                                    endTimestamp = float(matches[3].group(1))
                                                    success = 1
                                                </script>
                                                <log message="STAXMessageLog" level="'info'">'Host %s acquired persistent source %.2fs after service start' % (host.get_hostname(), endTimestamp - startTimestamp)</log>
                                            </sequence>
                                            <else>
                                                <log level="'debug'" message="0">'Host %s failed persistent source discovery\nFailed condition: %s' % (host.get_hostname(), conditions[len(matches)].pattern)</log>
                                            </else>
                                        </if>
                                    </sequence>
                                </if>
                            </sequence>
                        </loop>
                    </timer>
                    <!-- Timer timeout -->
                    <if expr="RC != 0">
                        <sequence>
                            <script>
                                retcode.set(0)
                                msg = 'Failed to verify persistent source discovery on host %s (timeout): ' % host.get_hostname()
                                if log == None:
                                    msg += 'Could not get durability tracing log'
                                else:
                                    msg += 'Failed condition (%s)\n' % conditions[len(matches)].pattern
                                    msg += 'Tracing log:\n'
                                    msg += '\n'.join(log)
                            </script>
                            <log message="STAXMessageLog" level="'debug'">msg</log>
                            <tcstatus result="'fail'">'Failed to verify persistent source discovery on host %s (timeout)' % host.get_hostname()</tcstatus>
                        </sequence>
                    </if>
                </sequence>
            </paralleliterate>
            <return>retcode</return>
        </sequence>
    </function>

    <function name="GetNodeId" scope="local">
        <function-prolog>
        </function-prolog>
        <function-list-args>
            <function-required-arg name="host">TestHost</function-required-arg>
            <function-optional-arg name="log" default="None">Durability tracing log</function-optional-arg>
        </function-list-args>
        <sequence>
            <if expr="log == None">
                <sequence>
                    <call function="'GetDurabilityLog'">host</call>
                    <script>log = STAXResult</script>
                </sequence>
            </if>
            
            <if expr="log != None">
                <sequence>
                    <script>
                        conditions = []
                        pattern = re.compile(R".*My address is:.*'([0-9]+)'.*")
                        conditions.append(pattern)
                    </script>
                    <call function="'VerifyDurabilityLog'">log, conditions</call>
                    <if expr="len(STAXResult) > 0">
                        <sequence>
                            <script>nodeId = STAXResult[0].group(1)</script>
                            <log message="STAXMessageLog" level="'debug'">'Durability NodeID on %s: %s' % (host.get_hostname(), nodeId)</log>
                        </sequence>
                        <else>
                            <sequence>
                                <script>nodeId = 0</script>
                                <tcstatus result="'fail'">'Failed to get durability NodeID on %s' % host.get_hostname()</tcstatus>
                            </sequence>
                        </else>
                    </if>
                </sequence>
                <else>
                    <script>nodeId = 0</script>
                </else>
            </if>
            <return>nodeId</return>
        </sequence>
    </function>
    
    <function name="GetMasterNode" scope="local">
        <function-list-args>
            <function-required-arg name="hosts">TestHost list</function-required-arg>
            <function-optional-arg name="namespace" default="'defaultNamespace'">Namespace, usually 'defaultNamespace'</function-optional-arg>
        </function-list-args>
        <sequence>
            <script>
                logData = STAXGlobal({})
            </script>
            <paralleliterate in="hosts" var="host">
                <sequence>
                    <call function="'GetDurabilityLog'">host</call>
                    <script>log = STAXResult</script>
                    <if expr="log != None">
                        <sequence>
                            <script>
                                conditions = []
                                # Match the node id (index 0, group 1)
                                conditions.append(re.compile(R".*My address is:.*'([0-9]+)'.*"))
                                # Match the preferred aligner confirmation (index 1, group 1)
                                conditions.append(re.compile(R".*Confirming master: (.*) for nameSpace 'defaultNamespace'."))
                            </script>
                            <call function="'VerifyLog'">log, conditions</call>
                            <script>lineIndex, matches = STAXResult</script>
                            <if expr="len(conditions) == len(matches)">
                                <sequence>
                                    <script>
                                        msg = 'Matched lines on %s:\n' % host.get_hostname()
                                        for match in matches:
                                            msg += '%s' % match.group(0)
                                            if (match != matches[-1]):
                                                msg += '\n'
                                    </script>
                                    <log message="0" level="'debug'">msg</log>
                                    <script>
                                        nodeId = matches[0].group(1)
                                        masterConfirmation = matches[1].group(1)
                                        
                                        if (masterConfirmation == 'I am the master'):
                                            masterId = nodeId
                                        else:
                                            idMatch = re.match(R"Fellow '([0-9]+)' is the master", masterConfirmation)
                                            if (idMatch):
                                                masterId = idMatch.group(1)
                                            else:
                                                masterId = 0
                                                
                                        logData[host.get_hostname()] = {'nodeId': nodeId, 'masterId': masterId}
                                    </script>
                                </sequence>
                                <else>
                                    <sequence>
                                        <log message="0" level="'debug'">'Failed to verify durability log on %s\nFailed condition: %s' % (host.get_hostname(), conditions[len(matches)].pattern)</log>
                                        <tcstatus result="'fail'">'Failed to verify durability log on %s\nFailed condition: %s' % (host.get_hostname(), conditions[len(matches)].pattern)</tcstatus>
                                    </sequence>
                                </else>                    
                            </if>
                        </sequence>
                    </if>
                </sequence>
            </paralleliterate>
            <script>
                def id2hostname(id):
                    try:
                        return [k for k, v in logData.items() if v['nodeId'] == id][0]
                    except IndexError:
                        return '(unknown host with NodeID: %s)' % id
            
                masterId = 0
                consistent = 1
                msg = ''
                for hostName, props in logData.items():
                    if(props['nodeId'] == props['masterId']):
                        if ((masterId == 0) or (masterId == props['nodeId'])):
                            msg += 'Host %s chose itself as master\n' % hostName
                            masterId = props['nodeId']
                        else:
                            msg += 'Host %s chose itself as master, while another host selected %s as master\n' % (hostName, id2hostname(masterId))
                            consistent = 0
                    else:
                        if (masterId == 0):
                            masterId = props['masterId']
                        if (props['masterId'] == masterId):
                            msg += 'Host %s chose host %s as master\n' % (hostName, id2hostname(props['masterId']))
                        else:
                            msg += 'Host %s chose host %s as master, but host %s was selected by another host\n' % (hostName, id2hostname(props['masterId']), id2hostname(masterId))
                            consistent = 0
                msg = msg.strip()
            </script>
            <return>consistent, msg</return>
        </sequence>
    </function>

    <function name="GetDurabilityLog">
        <function-list-args>
            <function-required-arg name="host">TestHost</function-required-arg>
            <function-optional-arg name="silent" default="0">Fail if log is unavailable</function-optional-arg>
        </function-list-args>
        <sequence>
            <script>
                durability_log = host.get_env('OSPL_DURABILITY_TRACE') or 'durability.log'
                logpath = host.get_logdir() + durability_log
                request = 'GET FILE %s' % logpath
            </script>
            <stafcmd name="'GetDurabilityLog'">
                <location>host.get_staf_url()</location>
                <service>'FS'</service>
                <request>request</request>
            </stafcmd>
            <if expr="RC == STAFRC.Ok">
                <sequence>
                    <script>
                        import os
                        list = [line for line in STAFResult.split(os.linesep)]
                    </script>
                    <return>list</return>
                </sequence>            
                <else>
                    <sequence>
                        <if expr="silent == 0">
                            <tcstatus result="'fail'">'Failed to retrieve durability tracing from %s\nFile: %s\n:Result: %s' % (host.get_hostname(), logpath, STAFResult) </tcstatus>
                        </if>
                        <return>None</return>
                    </sequence>
                </else>
            </if>
        </sequence>
    </function>
    
    <function name="VerifyLog">
        <function-prolog>
            <![CDATA[
            <p>Match a durability trace log against an ordered list of conditions, expressed as python RegexObjects.
            The tracing log checked line by line starting, with the first condition, and is verified only if all of the conditions are matched when the last line of the log is reached.
            The matches are stored in an ordered list of python MatchObjects.
            The function returns a tuple with the number of matched conditions and the list of matches (or None if no conditions are matched)
            TODO: Would be nice to start at a certain index in the logfile and return the index of the line that matched the last condition</p> 
            ]]>
        </function-prolog>
        <function-list-args>
            <function-required-arg name="log">Tracing log contents</function-required-arg>
            <function-required-arg name="conditions">List of one or more (python) regex objects. Conditions are matched in order, one at a time. The matches, if any, are returned</function-required-arg>
            <function-optional-arg name="startIdx" default="0">Start at this line instead of the first line</function-optional-arg>
        </function-list-args>
        <sequence>
            <script>
                import re
                result = []
            </script>
            <if expr="(log != None) and (conditions != None)">
                <script>
                    cIdx = 0
                    lIdx = startIdx
                    pattern = conditions[cIdx]
                    cLen = len(conditions)
                    for line in log[startIdx:]:
                        lIdx += 1
                        match = pattern.match(line)
                        if (match):
                            #print 'MATCH:\n\tLine: %s\n\tCondition:%s' % (line, pattern.pattern)
                            result.append(match)
                            # If more than one condition, skip to the next condition
                            if (cIdx &lt; cLen-1):
                                cIdx += 1
                                pattern = conditions[cIdx]
                            else:
                               # Break when all conditions are matched
                                break;
               </script>
            </if>
            <return>lIdx, result</return>
        </sequence>
    </function>
</stax>