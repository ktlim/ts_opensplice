<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE stax SYSTEM "../../stax/stax.dtd">

<stax>
    <function name="Subscriber">
        <function-map-args>
            <function-required-arg name="host">Publisher TestNode</function-required-arg>
            <function-required-arg name="samples">Path to samples file (for verification)</function-required-arg>
            <function-optional-arg name="wait" default="None">Wait for historical data in ms</function-optional-arg>
            <function-optional-arg name="partition" default="'partition1'">List of partition expressions (comma-seperated) to subscribe to</function-optional-arg>
            <function-optional-arg name="retries" default="None">Number of retries if no data available</function-optional-arg>
            <function-optional-arg name="delay" default="1000">Delay between retries in ms</function-optional-arg>
            <function-optional-arg name="take" default="None">If true, take instead of read samples</function-optional-arg>
            <function-optional-arg name="topic" default="None">Topic name</function-optional-arg>
            <function-optional-arg name="output" default="None">Outputfile (default: stdout)</function-optional-arg> 
            <function-optional-arg name="persistent" default="None">If true read persistent samples, else read transient samples</function-optional-arg>
            <function-optional-arg name="timeout" default="'30s'">Timeout after which the subscriber fails if it's not finished</function-optional-arg>
            <function-optional-arg name="domainId" default="0">DomainId for subscriber.</function-optional-arg>         
        </function-map-args>
        
        <sequence>
            <!-- Copy samples verification file to host -->
            <sequence>
                <script>samples_dest = host.get_basedir() + host.get_filesep() + 'etc'</script>
                <call function="'FileCopy'">
                    { 'src_path': samples,
                      'dest_host': host,
                      'dest_path': samples_dest,
                      'overwrite': 2 }
                </call>
                <script>args = "-i '" + samples_dest + host.get_filesep() + os.path.basename(samples) + "' "</script>
            </sequence>
            <script>
                host.set_process('reader')
                args += "-p %s -u %s " % (partition, domainId)
                if (wait):
                    args += "-h %s " % wait
                if (topic):
                    args += "-t %s " % topic
                if (persistent):
                    args += "-P "
                if (retries):
                    args += "-n %s -d %s " % (retries, delay)
                if (take):
                    args += "-x "
                if (output):
                    args += "-o %s " % output
            </script>
            <log message="STAXMessageLog" level="'debug'">'Subscriber process: %s %s Env: %s' % (host.get_process(), args, host.get_process_envs())</log>
            <timer duration="timeout">
                <sequence>
                    <process name="'Subscriber'">
                        <location>host.get_staf_url()</location>
                        <command mode="'shell'">host.get_process_prearg() + host.get_process()</command>
                        <parms>args</parms>
                        <envs>host.get_process_envs()</envs>
                        <stopusing>'SIGKILLALL'</stopusing>
                        <stderr mode="'stdout'"/>
                        <returnstdout/>
                    </process>
                    <script>procRC = RC</script>
                </sequence>
            </timer>
            <script>timerRC = RC</script>
            <if expr="timerRC != STAFRC.Ok">
                <sequence>
                    <log message="STAXMessageLog" level="'info'">'Subscriber timeout on %s (%s)' % (host.get_hostname(), timeout)</log>
                    <script>result = timerRC</script>
                </sequence>
                <else>
                    <sequence>
                        <if expr="STAXResult">
                            <if expr="STAXResult[0][0] == 0">
                                <sequence>
                                    <script>
                                        output = ''.join(STAXResult[0][1]).strip()
                                        msg = 'Subscriber output on %s (RC=%s):\n%s' % (host.get_hostname(), procRC, output)
                                    </script>
                                    <log message="0" level="'debug'">msg</log>                 
                                </sequence>
                            </if>
                        </if>
                        <script>result = procRC</script>
                    </sequence>
                </else>
            </if>
            <return>result</return>
        </sequence>
    </function>

    <function name="DeploySubscriber">
        <function-list-args>
            <function-required-arg name="host">TestHost</function-required-arg>
            <function-optional-arg name="purge" default="0">Overwrite existing files</function-optional-arg>
            <function-optional-arg name="keep" default="0">Remove files after tests</function-optional-arg>
        </function-list-args>
        <sequence>
            <script>
                base_path = os.path.dirname(STAXCurrentXMLFile) + file_sep + '..' + file_sep + 'common'
                src_path = base_path + file_sep + 'reader' + file_sep + 'bld' + file_sep + host.get_target()
                dest_path = host.get_basedir() + host.get_filesep() + 'subscriber'
            </script>
            <try>
                <sequence>
                <call-with-map function="'FileCopy'">
                    <call-map-arg name="'src_path'">src_path</call-map-arg>
                    <call-map-arg name="'dest_host'">host</call-map-arg>
                    <call-map-arg name="'dest_path'">dest_path</call-map-arg>
                    <call-map-arg name="'overwrite'">2</call-map-arg>
                </call-with-map>
                <if expr="STAXResult == STAFRC.Ok">
                    <sequence>
                        <script>
                            path = '%s%c%s' % (host.get_env('PATH'), host.get_pathsep(), dest_path)
                            host.set_env('PATH', path);
                        </script>
                        <log message="STAXMessageLog" level="'debug'">'DeploySubscriber: Deployed on %s' % host.get_hostname()</log>
                    </sequence>
                </if>
                </sequence>
                <catch exception="'FileCopy'" var="eInfo">
                    <log message="STAXMessageLog">'DeploySubscriber: Failed to deploy on %s (%s)' % (host.get_hostname(), eInfo)</log>
                </catch>
            </try>
        </sequence>
    </function>
</stax>