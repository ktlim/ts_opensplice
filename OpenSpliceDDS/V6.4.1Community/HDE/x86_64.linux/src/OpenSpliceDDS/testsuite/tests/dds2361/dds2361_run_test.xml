<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE stax SYSTEM "stax.dtd">
<!--
##
# \defgroup dds2361 - inter-language communication
# \b Test \b ID: dds2361
#
# \b Test \b Objectives: \n
# Verify the communication between different languages through the network.
# The test application for every language on different hosts binding that sends
# a sample to every other language and waits for a response.
#
# \b Test \b Procedure
# \b Step \b 1
# Run ospl start
# \b Step \b 2
# Start all language apps on different hosts in 'inactive' mode except for one
# \b Step \b 3
# Start one language app in active mode.
# \b Step \b 4
# Run ospl stop
# \b Step \b 5
# Repeat steps 1 and 5 to have every language binding ran as active once
#
-->
<stax>
    <defaultcall function="dds2361_main">
    </defaultcall>

    <function name="dds2361_main" scope="local" >
        <function-list-args>
            <function-required-arg name="host1_name">
                The name for the first host you wish test on in double quotes, use the following format: "name"
            </function-required-arg>
            <function-required-arg name="host2_name">
                The name for the second host you wish test on in double quotes, use the following format: "name"
            </function-required-arg>
            <function-required-arg name="host3_name">
                The name for the third host you wish test on in double quotes, use the following format: "name"
            </function-required-arg>
            <function-required-arg name="host4_name">
                The name for the fourth host you wish test on in double quotes, use the following format: "name"
            </function-required-arg>

            <function-required-arg name="host1_lang">
                Language on the host1 ('c', 'cpp', 'cs', 'java')
            </function-required-arg>
            <function-required-arg name="host2_lang">
                Language on the host2 ('c', 'cpp', 'cs', 'java')
            </function-required-arg>
            <function-required-arg name="host3_lang">
                Language on the host3 ('c', 'cpp', 'cs', 'java')
            </function-required-arg>
            <function-required-arg name="host4_lang">
                Language on the host4 ('c', 'cpp', 'cs', 'java')
            </function-required-arg>

            <function-required-arg name="host1_ospl_home">
                OSPL_HOME of an installed OpenSplice on the host1
            </function-required-arg>
            <function-required-arg name="host2_ospl_home">
                OSPL_HOME of an installed OpenSplice on the host2
            </function-required-arg>
            <function-required-arg name="host3_ospl_home">
                OSPL_HOME of an installed OpenSplice on the host3
            </function-required-arg>
            <function-required-arg name="host4_ospl_home">
                OSPL_HOME of an installed OpenSplice on the host4
            </function-required-arg>

            <function-required-arg name="host1_ospl_src_home">
                The path where osplo and ospli could be found on the host1.
            </function-required-arg>
            <function-required-arg name="host2_ospl_src_home">
                The path where osplo and ospli could be found on the host2.
            </function-required-arg>
            <function-required-arg name="host3_ospl_src_home">
                The path where osplo and ospli could be found on the host3.
            </function-required-arg>
            <function-required-arg name="host4_ospl_src_home">
                The path where osplo and ospli could be found on the host4.
            </function-required-arg>

            <function-optional-arg name="test_framework_root" default="'../common'">
                Absolute path of stax framework root on the local host in double quotes and double backslash.
                By default it is this_xml_folder/../common.
                Use the format "/home/username/ospli/testsuite/tests/common")
            </function-optional-arg>
            <function-optional-arg name="log_dir" default="'.'">
                Location of log dir on local host
            </function-optional-arg>
        </function-list-args>

        <sequence>
            <script>
                import os

                for lang in [host1_lang, host2_lang, host3_lang, host4_lang]:
                    if lang.lower() not in ['c', 'cpp', 'cs', 'java']:
                        print "Lang parameter is invalid. Host lang must be one of the 'c', 'cpp', 'cs', 'java'"
                        raise Exception('Host lang parameter is invalid')

                if test_framework_root == '../common':
                    host_manager_file = os.path.join(os.path.dirname(STAXCurrentXMLFile), test_framework_root, "HostManager.xml")
                else:
                    host_manager_file = os.path.join(test_framework_root, "HostManager.xml")
            </script>
            <import file="host_manager_file"/>
            <call function="'Initialize'" />
            <script>
                sys.path.append(STAXCurrentXMLFile[:STAXCurrentXMLFile.rfind(os.sep)])
                from dds2361_test_scenario import DDS2361TestScenario

                time_stamp = time.strftime("%d-%m-%Y-%H-%M-%S", time.localtime())
                if log_dir == ".":
                    log_dir = os.path.join(os.path.dirname(STAXCurrentXMLFile), "dds2361_log", time_stamp)
                else:
                    log_dir = os.path.join(log_dir, "dds2361_log", time_stamp)

                if not os.path.exists(log_dir): os.makedirs(log_dir)
                main_test_scenario = DDS2361TestScenario("dds2361",
                                                 "Multilanguage",
                                                 log_dir,
                                                 os.path.join(log_dir, "result.txt"))

                host_params_list = [[host1_name, host1_ospl_home, host1_lang, host1_ospl_src_home],
                                    [host2_name, host2_ospl_home, host2_lang, host2_ospl_src_home],
                                    [host3_name, host3_ospl_home, host3_lang, host3_ospl_src_home],
                                    [host4_name, host4_ospl_home, host4_lang, host4_ospl_src_home]]
                host_params_dict = [{'name': x[0], 'ospl_home': x[1], 'lang': x[2].lower(), 'ospl_src': x[3]} for x in host_params_list]
            </script>

            <sequence>
                <try>
                    <sequence>
                        <!-- Create the local host instance-->
                        <call function="'CreateLocalhost'"/>
                        <script>localhost = STAXResult</script>

                        <iterate in="host_params_dict" var="host_param">
                            <sequence>
                                <!-- Request all needed machines by hostname -->
                                <call function="'RequestHost'">{'hostname': host_param.get('name'), 'reused_host': 1}</call>
                                <script>
                                    host = STAXResult
                                    main_test_scenario.add_host(host)
                                    main_test_scenario.set_role_for_host(host, host_param.get('lang'))
                                    host.set_ospl_home(host_param.get('ospl_home'))
                                    host.set_env('OSPL_OUTER_HOME',
                                                 host.pathjoin(host_param['ospl_src'], 'osplo'))
                                </script>
                            </sequence>
                        </iterate>
                        <iterate in="main_test_scenario.get_all_hosts()" var="host">
                            <sequence>
                                <!-- Deploy OpenSplice on the machines -->
                                <call function="'DeployHost'">{'host': host}</call>
                                <!--Add to PATH/LD_LIBRARY_PATH path to osplo test libs that are needed for test application-->
                                <script>
                                    path_var = host.isWindows() and 'PATH' or 'LD_LIBRARY_PATH'
                                </script>
                                <call function="'GetEnv'">[host, path_var]</call>
                                <script>
                                    lib_path = host.pathjoin(host.get_env('OSPL_OUTER_HOME'), 'testsuite', 'lib', host.get_target() + '-release')
                                    host.set_env(path_var, lib_path + host.get_pathsep() + STAXResult)
                                </script>
                            </sequence>
                        </iterate>

                        <script>
                            for host in main_test_scenario.get_all_hosts():
                                test_dir = host.pathjoin(host.get_env('OSPL_OUTER_HOME'), 'testsuite', 'dbt', 'api', 'shared')
                                ospl_config = host.pathjoin(test_dir, 'ospl.xml')
                                host.set_env("OSPL_URI", "file://" + ospl_config)
                                host.set_logdir(host.pathjoin(test_dir, "log"))
                                host.set_scenario("dds2361")
                        </script>

                        <!-- Run four scenarious: c_as_active, cpp_as_active, cs_as_active, java_as_active  -->
                        <iterate in="['c', 'cpp', 'cs', 'java']" var="active_lang">
                            <testcase name="'dds2631 ' + active_lang + ' as active'">
                                <sequence>
                                    <script>
                                        test_scenario = STAXGlobal(copy.deepcopy(main_test_scenario))
                                        test_scenario.set_test_scenario_initialized(1)
                                        test_scenario.set_log_root(os.path.join(log_dir, active_lang + '_as_active'))
                                        test_scenario.set_result_file(os.path.join(test_scenario.get_log_root(), "result.txt"))
                                        test_scenario.set_name(active_lang + '_as_active')
                                    </script>
                                    <!-- Start OpenSplice and create logdir on all hosts-->
                                    <paralleliterate in="test_scenario.get_all_hosts()" var="host">
                                        <sequence>
                                            <call function="'CreateDirectory'">[host, host.get_logdir()]</call>
                                            <call function="'StartOpenSplice'">[host, host.get_env("OSPL_URI"), 0]</call>
                                            <script>time.sleep(3)</script>
                                        </sequence>
                                    </paralleliterate>

                                    <!-- Parallel start of test applications on all hosts, active app should be started a little bit later-->
                                    <paralleliterate in="test_scenario.get_all_hosts()" var="host">
                                        <sequence>
                                            <script>
                                                lang = test_scenario.get_role_by_host(host)
                                                test_dir = host.pathjoin(host.get_env('OSPL_OUTER_HOME'), 'testsuite', 'dbt', 'api', 'shared')
                                                log_file_name = lang + ".log"
                                                arg = lang == active_lang and 'a' or 's'

                                                if lang == 'java':
                                                    working_dir = host.pathjoin(test_dir, 'java', 'bld', host.get_target() + '-release')
                                                    if host.isWindows():
                                                        prearg = '.;' + host.get_ospl_home()
                                                    else:
                                                        prearg = '.:' + host.get_ospl_home()
                                                    dcpssaj = host.pathjoin(prearg, 'jar', 'dcpssaj.jar')
                                                    command = 'java -classpath ' + dcpssaj + ' sharedj'
                                                elif lang == 'cs':
                                                    working_dir = host.pathjoin(test_dir, lang, 'exec', host.get_target() + '-release')
                                                    if host.isWindows():
                                                        command = 'sharedcs.exe'
                                                    else:
                                                        command = 'mono sharedcs.exe'
                                                else:
                                                    working_dir = '.'
                                                    command = host.pathjoin(test_dir, lang, 'exec', host.get_target() + '-release', 'shared_' + lang)

                                                process = Process(command = command,
                                                                  log_file = host.pathjoin(host.get_logdir(), log_file_name),
                                                                  args = arg,
                                                                  working_dir = working_dir)
                                                test_scenario.set_host_app_log_file(host, log_file_name)
                                                if lang == active_lang:
                                                    time.sleep(0.5)
                                            </script>
                                            <call function="'RunProcess'">[host, process, '10s']</call>
                                            <script>
                                                if STAXResult['timed_out']:
                                                    test_scenario.fail()
                                                    test_scenario.errors.append("%s process was timed out" %(process.get_name()))
                                                elif STAXResult['RC'] != 0:
                                                    test_scenario.fail()
                                                    test_scenario.errors.append("%s process was failed with RC: %s" %(process.get_name(), STAXResult['RC']))
                                            </script>
                                            <call function="'StopOpenSplice'">host</call>
                                            <!-- Copying logs from all hosts to local host-->
                                            <call function="'CopyPathFromTo'">
                                                {'src_host': host,
                                                 'src_path': host.get_logdir(),
                                                 'dest_host': localhost,
                                                 'dest_path': os.path.join(test_scenario.get_log_root(), host.get_hostname()),
                                                 'overwrite': 1,
                                                 'remove': 1}
                                            </call>
                                        </sequence>
                                    </paralleliterate>
                                    <script>
                                        test_scenario.check_results()
                                        test_scenario.analyze()
                                    </script>
                                    <message>"Test is completed        " </message>
                                    <message>"Job log is saved to %s" % log_dir </message>
                                </sequence>
                            </testcase>
                        </iterate>
                    </sequence>
                    <catch exception="'Resource'" var="msg">
                        <log message="1">'An exception occurred related to a resource needed to run this test. The test cannot start.\nException: %s' % msg</log>
                    </catch>
                    <finally>
                        <iterate in="main_test_scenario.get_all_hosts()" var="host">
                            <sequence>
                                <!-- Release host resources -->
                                <call function="'ReleaseHost'">host</call>
                            </sequence>
                        </iterate>
                    </finally>
                </try>
            </sequence>
        </sequence>
    </function>
</stax>
