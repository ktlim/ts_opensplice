<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE stax SYSTEM "stax.dtd">

<!--
    run_dds2117_test.xml - Run the dds 2117 test using STAX.
    This test is for Coflight test requirement eFDPfi_MW_DDS_5 of OpenSplice 
    network messages (enhancement dds2117).
    It consists of a publisher which sends a series of strings to a subscriber.
    
    CoFlight requirement eFDPfi_MW_DDS_5 requires that the loss of a data update diffused 
    with a nonsecured protocol (udp, ipm, MAC, LLC1?) is not considered as a fault and 
    shall be gracefully and transparently handled and overcome by the DDS within 1 second on a LAN
    and within 5 seconds on a WAN.
    
    This test is performed using a development environment. 
    The test code is built from the osplo/testsuite/rbt/services/networking/dds2117 directory using make.
    
    Running the test:
        Start OpenSplice on two nodes.
        On one node, start the subscriber.
        On the other, run the publisher.

    Expected results:
        Both process should terminate normally.
        Sample publisher output :

        Sent all strings
        Sent 1000 messages
        Number of messages recoverd not in time: 0.
        dds2117 recovery time PASS.
        dds2117 publisher PASS

        Sample subscriber output :

        Received 1000 messages
        dds2117 subscriber PASS

-->

<stax>

  <defaultcall function="dds2117_main">
  </defaultcall>

  <function name="dds2117_main" scope="local" >
    <function-prolog>
        This test is for Coflight test requirement eFDPfi_MW_DDS_5 of OpenSplice network messages. 
        It consists of a publisher which sends a series of strings to a subscriber.

        Start OpenSplice on two nodes.
        On one node, start the subscriber.
        On the other, run the publisher.
    </function-prolog>

    <function-list-args>
      <function-required-arg name="master_host_name">
        The name for the "master" host you wish test on in double quotes, use the following format: "name"
      </function-required-arg>
      <function-required-arg name="slave_host_name">
        The name for the "slave" host you wish to test on in double quotes, use the following format: "name"
      </function-required-arg>
      
      <function-required-arg name="master_ospl_root">
        Location on the master host where /osplo and /ospli can be found, in double quotes and double backslash, use the following format: "dir1\\dir2"
      </function-required-arg>
      <function-required-arg name="slave_ospl_root">
        Location on the slave host where /osplo and /ospli can be found, in double quotes and double backslash, use the following format: "dir1\\dir2"
      </function-required-arg>

      <function-required-arg name="master_log_dir">
        The location where the logs will be stored on the master host in double quotes and double backslash, use the following format: "dir1\\dir2"
      </function-required-arg>
      <function-required-arg name="slave_log_dir">
        The location where the logs will be stored on the slave host in double quotes and double backslash, use the following format: "dir1\\dir2"
      </function-required-arg>

      <function-required-arg name="master_ospl_release_name">
        Name of ospl release script (for example, x86_64.linux-dev or x86_64.linux-release ) on the master host
      </function-required-arg>
      <function-required-arg name="slave_ospl_release_name">
        Name of ospl release script (for example, x86_64.linux-dev or x86_64.linux-release ) on the slave host
      </function-required-arg>
      
      <function-required-arg name="stax_test_root">
        Location of stax framework root on the master host in double quotes and double backslash, 
        use the following format: "dir1\\dir2" with following file separator
      </function-required-arg>
      
      <function-optional-arg name="master_staf_port" default="'6500'">
        The STAF port number on the master host you wish test on in double quotes, use the following format: "port"
      </function-optional-arg>
      <function-optional-arg name="slave_staf_port" default="'6500'">
        The STAF port number on the slave host you wish test on in double quotes, use the following format: "port"
      </function-optional-arg>
      
      <function-optional-arg name="network_type" default="'L'">
        Indicate the type of network we are running on.
        It is L for LAN and W for WAN.
      </function-optional-arg>
    </function-list-args>
    
    <sequence>
        <script>
            stax_test_ospl_name = stax_test_root + "/test_ospl.xml"
        </script>
        
        <import file="stax_test_ospl_name"/>
        <call function="'Initialise'" />

        <script>
            from process import Process
            from time import *
            
            test_name = "DDS2117"
            ospli_name  = "ospli"
            osplo_name  = "osplo"
            start_script_name  =  "envs-"
            ext_script_name  =  "sh"
            testsuite_name = "testsuite"
            rbt_name = "rbt"
            services_name = "services"
            networking_name = "networking"
            test_dir_name = "dds2117"
            ospl_config_file_name ="dds2117.xml"
            
            ospl_uri_name = "OSPL_URI"
            
            test_scenario = BaseTestScenario(test_name, "Co-Flight requirements test DDS2117")

            #master host
            master_host = test_scenario.define_host(test_root = master_log_dir, 
                                    ospl_home = "default", 
                                    host_name = master_host_name, 
                                    staf_port = master_staf_port)
            mfs = master_host.get_file_sep()
            master_test_dir_path = osplo_name + mfs + testsuite_name + mfs + rbt_name + mfs + services_name + mfs + networking_name + mfs + test_dir_name
            master_ospl_home = master_ospl_root + mfs + ospli_name
            master_outer_ospl_home = master_ospl_root + mfs + osplo_name
            master_host.set_ospl_home(master_outer_ospl_home)
            master_release_script_name = start_script_name + master_ospl_release_name
            master_host.set_release_script_name(master_release_script_name)
            master_host.set_release_script_ext(ext_script_name)

            #slave host
            slave_host = test_scenario.define_host(test_root = slave_log_dir, 
                                    ospl_home = "default", 
                                    host_name = slave_host_name, 
                                    staf_port = slave_staf_port)
            sfs = slave_host.get_file_sep()
            slave_test_dir_path = osplo_name + sfs + testsuite_name + sfs + rbt_name + sfs + services_name + sfs + networking_name + sfs + test_dir_name
            slave_ospl_home = slave_ospl_root + sfs + ospli_name
            slave_outer_ospl_home = slave_ospl_root + sfs + osplo_name
            slave_host.set_ospl_home(slave_outer_ospl_home)
            slave_release_script_name = start_script_name + slave_ospl_release_name
            slave_host.set_release_script_name(slave_release_script_name)
            slave_host.set_release_script_ext(ext_script_name)

            master_ospl_config = master_ospl_root + mfs + master_test_dir_path + mfs + ospl_config_file_name
            
        
        </script>
        <!-- Copy OSPL config to the "slave" host from the "master" -->
        <call function="'CopyFileFromTo'">[master_host, slave_host, master_ospl_config, slave_host.get_ospl_home()]</call>
        <script>slave_ospl_config = STAXResult</script>
        
        <iterate var="host" in="test_scenario.get_all_hosts()">
            <call function="'InitHost'">host</call>
        </iterate>
        
        <script>
            time_stamp = strftime("%d-%m-%Y-%H-%M-%S", localtime())
            # Set log sub-directories for the hosts:
            master_log_subdir = test_name + mfs + time_stamp + mfs +\
                                    master_host.get_host_name() + '_publisher'
            slave_log_subdir = test_name + mfs + time_stamp + sfs +\
                                   slave_host.get_host_name() + '_subsrciber'
            slave_log_subdir_for_master_host = test_name + mfs + time_stamp + mfs +\
                                   slave_host.get_host_name() + '_subsrciber'
            
            master_host.set_ospl_home(master_ospl_home)
            slave_host.set_ospl_home(slave_ospl_home)
            
            # Set OSPL URI for the hosts:
            master_host.set_ospl_uri("file://" + master_ospl_config)
            master_host.set_env_value(ospl_uri_name, master_host.get_ospl_uri())
            slave_host.set_ospl_uri("file://"  + slave_ospl_config)
            slave_host.set_env_value(ospl_uri_name, slave_host.get_ospl_uri())

            # Set OSPL bin for the hosts:
            master_host.set_ospl_bin(master_host.get_ospl_home() + '/exec/' + master_ospl_release_name + mfs)
            slave_host.set_ospl_bin(slave_host.get_ospl_home() + '/exec/' + slave_ospl_release_name + sfs)

            # Set log directory for the hosts:
            master_host.set_log_dir(master_host.get_test_root() + mfs + master_log_subdir)
            slave_host.set_log_dir(slave_host.get_test_root() + sfs + slave_log_subdir)

            # Set log directory for the ospl daemon on the hosts:
            master_host.set_ospl_log_dir(master_host.get_log_dir())
            slave_host.set_ospl_log_dir(slave_host.get_log_dir())
            
            # Define processes for the hosts:
            publisher_bin = master_ospl_root + mfs + master_test_dir_path + mfs + 'pub' + mfs + 'bld' + mfs + master_ospl_release_name
            subscriber_bin = slave_ospl_root + sfs + slave_test_dir_path + sfs + 'sub' + sfs + 'bld' + sfs + slave_ospl_release_name
            
            master_publisher = STAXGlobal(master_host.define_process(command  = publisher_bin + mfs + 'publisher', args = network_type, 
                                                                     log_file = master_host.get_log_dir() + mfs + "publisher_.log"))
            
            slave_subscriber =  STAXGlobal(slave_host.define_process(command  = subscriber_bin + sfs + 'subscriber',
                                                                     log_file = slave_host.get_log_dir() + sfs + "subscriber_.log"))
            
        </script>
        
        <testcase name = "test_scenario.get_name()">
            <sequence>
                <script>
                    start_time = time()
                </script>
                
                
                <try>
                    <sequence>
                        <!-- For all defined hosts -->
                        <iterate var="host" in="test_scenario.get_all_hosts()">
                            <!-- Create log directory on the host -->
                            <call function="'CreateLogDirOnHost'">host</call>
                        </iterate>
                
                        <!-- For all hosts start OSPL daemon in parellel -->
                        <iterate var="host" in="test_scenario.get_all_hosts()">
                            <sequence>
                                <script>sleep(5)</script>
                                <call function="'StartOSPL'">host</call>
                            </sequence>    
                        </iterate>

                        <!-- Wait 5 sec to allow OSPL daemon start -->
                        <script>sleep(5)</script>
                        
                        <call function="'SpawnProcess'">[slave_host, slave_subscriber]</call>
                        <call function="'RunProcess'">[master_host, master_publisher, '60m']</call>
                        
                        <script>sleep(300)</script>
                        <call function="'TerminateProcess'">[slave_host, slave_subscriber]</call>
                        <!-- Wait 15 sec to allow subscriber stop -->
                        <script>sleep(15)</script>
                        
                    </sequence>
                    <finally>
                        <sequence>
                            <!-- For all hosts stop OSPL daemon in parellel -->
                            <paralleliterate var="host" in="test_scenario.get_all_hosts()">
                                <call function="'StopOSPL'">host</call>
                            </paralleliterate>
                            
                            <!-- Wait 15 sec to allow OSPL daemon stop -->
                            <script>sleep(15)</script>
                            
                            <!-- Get logs from the hosts -->
                            <parallel>
                                <call function="'CopyDirFromTo'">[slave_host,
                                                                  master_host,
                                                                  slave_host.get_log_dir(),
                                                                  master_host.get_test_root() + mfs + slave_log_subdir_for_master_host]</call>
                            </parallel>
                        </sequence>
                    </finally>
                </try>
                
            </sequence>
        </testcase>
        
        <!-- Delete OSPL config from the "slave" host -->
        <call function="'DeleteFileFrom'">[slave_host, slave_host.get_ospl_uri().replace("file://", "")]</call>
        
        <script>
                # Get stopping test time:
                stop_time    = time()
                # Calc the difference:
                elapsed_secs = stop_time - start_time
                
        </script>

        <message>'Test complete - ran for [%d] seconds.'% elapsed_secs</message>
    </sequence>
  </function>
</stax>
