#!/bin/bash

# This file must only be sourced.
if [ -z "$BASH_SOURCE" -o "$0" = "$BASH_SOURCE" ]; then
    echo "ERROR: Only source '$0' file"
    exit 1
fi

# Source current settings.
. "$(dirname "$BASH_SOURCE")/osplsettings.shsrc" "$@"
. "$(dirname "$BASH_SOURCE")/ospldevutils.shsrc" "$@"

function source_ospldev_env_for_windows ()
{
    local vs_home="$(cygpath -u "$VS90COMNTOOLS")"
    test -z "$vs_home" && vs_home="$(cygpath -u "$VS80COMNTOOLS")"
    test -z "$vs_home" && return 1

    # Remove the 'Common7\Tools\' part.
    vs_home="$(dirname "$vs_home")"
    vs_home="$(dirname "$vs_home")"

    export VS_HOME="$vs_home"

    # These steps are necessary because OSPL scripts are Linux oriented. They
    # update PATH and LD_LIBRARY_PATH but on Windows we need libraries in PATH.
    source_tao_runtime || return  1
    source_mico_runtime || return  1
    source_jacorb_runtime || return 1
}

function source_osplsrc_env ()
{
    local local_root="$(to_unix_path "$SRC_ROOT")"
    if [ -z "$local_root" -o ! -d "$local_root/ospli" -o ! -d "$local_root/osplo" ]; then
        error_help "ERROR: SRC_ROOT is not correctly set to '$SRC_ROOT'"
        return 1
    fi

    cd "$local_root/osplo"

    # Setup OSPL_HOME before running any scripts.
    export OSPL_HOME="$local_root/ospli"

    local sel i=1
    local -a scripts
    echo "Choose the environment:"
    echo " 0: reconfigure the build"
    for s in $(find "$local_root/osplo" -maxdepth 1 -regex '.*/envs-.*\.sh$')
    do
        scripts[$i]=$s
        echo " $i: osplo/$(basename "$s")"
        let "++i"
    done

    while true
    do
        read sel
        if [ "$sel" -eq 0 ]; then
            echo "Reconfiguring..."
            . "$local_root/osplo/configure" || return 1
            break
        elif [ "$sel" -ge 1 -a "$sel" -le "$i" ]; then
            echo "Sourcing ${scripts[$sel]}..."
            . "${scripts[$sel]}" || return 1
            break
        else
            echo "Wrong selection (take a value in range [0;$i])"
        fi
    done
}

function source_ospldist_env ()
{
    local local_distpath="$(to_unix_path "$LOCAL_OSPL_DISTPATH")"
    if [ -z "$local_distpath" -o ! -d "$local_distpath" ]; then
        error_help "ERROR: LOCAL_OSPL_DISTPATH is not correctly set to '$LOCAL_OSPL_DISTPATH'"
        return 1
    fi

    if [ "$(uname)" != 'SunOS' ]; then
        if [ "$(uname -o)" = 'Cygwin' ]; then
            if [ -z "$(to_unix_path "$OSPL_HOME")" ] || [ ! -d "$(to_unix_path "$OSPL_HOME")" ]; then
               error_help "ERROR: OSPL distribution environment is not setup correctly. Try starting Cygwin.bat"
               return 1
            fi

            return 0
        fi
    fi

    if [ ! -f "$local_distpath/release.com" ]; then
        error_help "ERROR: release.com file not found in  '$LOCAL_OSPL_DISTPATH'"
        return 1
    fi
    . "$local_distpath/release.com"
}

function source_ospl_classpath ()
{
    local local_root="$(to_unix_path "$OSPL_HOME")"

    if [ "$(uname)" != 'SunOS' ]; then
        if [ "$(uname -o)" = 'Cygwin' ]; then
            CLASSPATH="$OSPL_HOME/jar/dcpssaj.jar;$CLASSPATH"
        else
            CLASSPATH="$local_root/jar/dcpssaj.jar:$CLASSPATH"
        fi
    else
        CLASSPATH="$local_root/jar/dcpssaj.jar:$CLASSPATH"
    fi
    export CLASSPATH
}

function update_distvar_env ()
{
    if [ $# -ne 1 ]; then
        error_trace "ERROR: Wrong number of arguments to ${FUNCNAME[0]}"
        return 1
    fi

    local distdir="$1" && test -n "$distdir" || error_trace "ERROR: Parameter \$1 is empty" || return 1
    if [ ! -d "$distdir" ]; then
        error_help "ERROR: '$distdir' doesn't exist"
        return 1
    fi

    # Don't try to use complicated regex here. Older versions of find
    # didn't support -regextype. And find on solaris doesn't take regex
    if [ "$(uname)" != 'SunOS' ]; then
        local release_script="$(find "$distdir" -type f -regex '.*/release\.com$' -o -regex '.*/release\.bat$')"
    else
        local release_script="$(find "$distdir" -type f -name 'release.com')"
    fi

    test -n "$release_script" || error_help "ERROR: Release script is not found" || return 1

    local newdistpath="$(dirname "$release_script")"
    local newdistver="$(grep 'echo \"<<< OpenSplice' "$release_script" | sed -e 's/.*Release \(V[^ ]*\) For.*/\1/')"

    if [ "$(to_unix_path "$LOCAL_OSPL_DISTPATH")" != "$newdistpath" -o "$LOCAL_OSPL_DISTVER" != "$newdistver" ]; then
        echo "WARNING: You have to manually update LOCAL_OSPL_DISTPATH '$(to_unix_path "$LOCAL_OSPL_DISTPATH")' to '$(to_native_path "$newdistpath")'"
        echo "         and LOCAL_OSPL_DISTVER '$LOCAL_OSPL_DISTVER' to '$newdistver' in $g_user_conf"
    fi
}

function _check_ospldist_args ()
{
    while [ $# -ne 0 ]
    do
        case "$1" in
            -h|--help)
                # Nothing to print as help here.
                return 1
                ;;
            *)
                shift
                ;;
        esac
    done
}
if [ -z "$g_ospldistutils_loaded" ]; then
    g_ospldistutils_loaded='yes'
    # This is the last line in this file. It can set $? which is important for
    # the outside code. Don't do anything after this!!!
    _check_ospldist_args "$@"
fi
