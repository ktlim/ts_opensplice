<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE stax SYSTEM "../../stax/stax.dtd">

<stax>
    <function name="FileExists" scope="local">
        <function-prolog>
        <![CDATA[
            <p>Simple function to check if a file (or directory) exists on a particular host.
            Note: most STAF services return a corresponding RC code (i.e. FileOpenError), if this is handled correctly it is not neccesary
            to call this function to explicitely check if a file exists.</p> 
        ]]>
        </function-prolog>
        <function-epilog>
        <![CDATA[
            <p>The return code of the STAF FS service call is returned, or STAFRC.InvalidParm if host or path arguments are invalid.</p>
        ]]>
        </function-epilog>
        <function-list-args>
            <function-required-arg name="host">TestHost</function-required-arg>
            <function-required-arg name="file">Full (absolute) path to file, may include STAF vars</function-required-arg>
        </function-list-args>
        <sequence>
            <if expr="(host == None) or (file == None)">
                <return>STAFRC.InvalidParm</return>
            </if>
            <stafcmd>
                <location>host.get_staf_url()</location>
                <service>'FS'</service>
                <request>'QUERY ENTRY %s' % STAFResult</request>
            </stafcmd>
            <return>RC</return>
        </sequence>
    </function>
    
    <function name="FileCopy" scope="local">
        <function-prolog>
        <![CDATA[
            <p>This function copies a file or directory to a remote machine. Unfortunately file attributes are not preserved when using the STAF filesystem
            service to copy files. This is especially inconvenient when copying executable files to a *nix host (the executable bit is lost). This
            function uses a workaround by putting the file in a temporary zip archive (using the STAF ZIP service). The zipfile is then copied to the remote 
            machine and extracted, keeping the file attributes intact.</p>
        ]]>
        </function-prolog>
        <function-epilog>
        <![CDATA[
            <p>The function returns the result code of the STAF service call</p>            
        ]]>
        </function-epilog>
        <function-map-args>
            <function-required-arg name="src_path">Path to source file or directory (may contain STAF vars). If src_path is a directory, the contents of that directory are copied to dest_path.</function-required-arg>
            <function-required-arg name="dest_host">Target machine (TestHost)</function-required-arg>
            <function-optional-arg name="dest_path" default="dest_host.get_basedir()">Target directory, defaults to basedir property of target host</function-optional-arg>
            <function-optional-arg name="src_machine" default="STAXCurrentXMLMachine">STAF URL of source machine, defaults to current machine</function-optional-arg>
            <function-optional-arg name="overwrite" default="1">Overwrite destination. 0: Never overwrite, 1: Always overwrite, 2: Overwrite if newer</function-optional-arg>
        </function-map-args>
        <sequence>
            <try>
                <sequence>
                    <!-- Check if src_path is a file or directory -->
                    <stafcmd name="'FileCopy::CheckSrc'">
                        <location>src_machine</location>
                        <service>'FS'</service>
                        <request>'GET ENTRY %s TYPE' % src_path</request>
                    </stafcmd>
                    <if expr="RC != STAFRC.Ok">
                        <throw exception="'FileCopy.CheckException'">STAFResult</throw>
                        <else>
                            <script>
                                from time import localtime, strftime
                                zip_name = strftime('%Y%m%d-%H%M%S', localtime()) + '_' + dest_host.get_hostname() + '.zip'
                                zip_path = "{STAF/DataDir}" + file_sep + 'tmp'
                                zipfile = zip_path + file_sep + zip_name
                                
                                dest_file = '{STAF/DataDir}' + dest_host.get_filesep() + 'tmp' + dest_host.get_filesep() + 'filecopy.zip'
                            
                                if STAFResult == 'F':
                                    dest_entry = dest_path + dest_host.get_filesep() + os.path.basename(src_path)
                                    add_target = 'FILE %s' % src_path
                                    src_relpath = os.path.dirname(src_path)
                                elif STAFResult == 'D':
                                    dest_entry = dest_path
                                    add_target = 'DIRECTORY %s' % src_path
                                    src_relpath = src_path
                            </script>
                        </else>
                    </if>
                    
                    <!-- Check destination -->
                    <script>abort = 0</script>
                    <if expr="overwrite == 0">
                        <!-- Don't overwrite -->
                        <sequence>
                            <stafcmd name="'FileCopy::CheckDest'">
                                <location>dest_host.get_staf_url()</location>
                                <service>'FS'</service>
                                <request>'QUERY ENTRY %s' % dest_entry</request>
                            </stafcmd>
                            <!-- Target exists, abort copy -->
                            <if expr="STAFResult != STAFRC.DoesNotExist">
                                <script>abort = 1</script>
                            </if>
                        </sequence>
                        <!-- Always overwrite -->
                        <elseif expr="overwrite == 1">
                            <stafcmd name="'FileCopy::PurgeDest'">
                                <location>dest_host.get_staf_url()</location>
                                <service>'FS'</service>
                                <request>'DELETE ENTRY %s CONFIRM RECURSE' % dest_entry</request>
                            </stafcmd>
                        </elseif>
                        <!-- Overwrite if source modification time > target modification time -->
                        <elseif expr="overwrite == 2">
                            <sequence>
                                <stafcmd name="'FileCopy::GetSrcModTime'">
                                    <location>src_machine</location>
                                    <service>'FS'</service>
                                    <request>'GET ENTRY %s MODTIME' % src_path</request>
                                </stafcmd>
                                <script>src_modtime = STAFResult</script>
                                <stafcmd name="'FileCopy::GetDestModTime'">
                                    <location>dest_host.get_staf_url()</location>
                                    <service>'FS'</service>
                                    <request>'GET ENTRY %s MODTIME' % dest_entry </request>
                                </stafcmd>
                                <if expr="RC == STAFRC.Ok">
                                    <sequence>
                                        <script>
                                            dest_modtime = STAFResult
                                            # Need to parse date with java, Jython2.1 lacks strptime()
                                            from java.text import SimpleDateFormat
                                            from java.util import Date
                                            fmt = SimpleDateFormat("yyyyMMdd-hh:mm:ss")
                                            d_src = fmt.parse(src_modtime)
                                            d_dest = fmt.parse(dest_modtime)
                                            if (d_src.before(d_dest)):
                                                abort = 1
                                        </script>
                                        <if expr="abort == 0">
                                            <sequence>
                                                <stafcmd name="'FileCopy::PurgeDest'">
                                                    <location>dest_host.get_staf_url()</location>
                                                    <service>'FS'</service>
                                                    <request>'DELETE ENTRY %s CONFIRM RECURSE' % dest_entry</request>
                                                </stafcmd>
                                            </sequence>
                                        </if>
                                    </sequence>
                                </if>
                            </sequence>
                        </elseif>
                    </if>
                    
                    <if expr="abort == 0">
                        <sequence>
                            <log message="0" level="'debug'">'Copy %s to %s' % (src_path, dest_host.get_hostname())</log>
                            <!-- Create zipfile -->
                            <stafcmd name="'FileCopy::AddZip'">
                                <location>src_machine</location>
                                <service>'ZIP'</service>
                                <request>'ADD ZIPFILE %s %s RELATIVETO %s' % (zipfile, add_target, src_relpath)</request>
                            </stafcmd>
                            <if expr="RC != STAFRC.Ok">
                                <throw exception="'FileCopy.CreateZipException'">STAFResult</throw>
                            </if>
                            
                            <!-- Copy zipfile -->
                            <stafcmd name="'FileCopy::CopyZip'">
                                <location>src_machine</location>
                                <service>'FS'</service>
                                <request>'COPY FILE %s TOFILE %s TOMACHINE %s' % (zipfile, dest_file, dest_host.get_staf_url())</request>
                            </stafcmd>
                            <if expr="RC != STAFRC.Ok">
                                <throw exception="'FileCopy.CopyZipException'">STAFResult</throw>
                                <else>
                                    <stafcmd name="'FileCopy::DelZip'">
                                        <location>src_machine</location>
                                        <service>'FS'</service>
                                        <request>'DELETE ENTRY %s CONFIRM' % zipfile</request>
                                    </stafcmd>
                                </else>
                            </if>
                    
                            <!-- Unzip zipfile -->
                            <stafcmd name="'FileCopy::UnZip'">
                                <location>dest_host.get_staf_url()</location>
                                <service>'ZIP'</service>
                                <request>'UNZIP ZIPFILE %s TODIRECTORY %s RESTOREPERMISSION REPLACE' % (dest_file, dest_path)</request>
                            </stafcmd>
                            <if expr="RC != STAFRC.Ok">
                                <throw exception="'FileCopy.UnZipException'">STAFResult</throw>
                                <else>
                                    <stafcmd name="'FileCopy::DelZip'">
                                        <location>dest_host.get_staf_url()</location>
                                        <service>'FS'</service>
                                        <request>'DELETE ENTRY %s CONFIRM' % dest_file</request>
                                    </stafcmd>
                                </else>
                            </if>
                        </sequence>
                        <else>
                            <sequence>
                                <log message="0" level="'debug'">'Copy %s to %s skipped: would overwrite target' % (src_path, dest_host.get_hostname())</log>
                                <script>RC = STAFRC.Ok</script>
                            </sequence>
                        </else>
                    </if>
                </sequence>
                <catch exception="'...'" var="eInfo" typevar="eType">
                    <sequence>
                        <log message="STAXMessageLog" level="'error'">'%s: %s' % (eType, eInfo)</log>
                        <rethrow/>
                    </sequence>
                </catch>
                <finally>
                    <return>RC</return>
                </finally>
            </try>
        </sequence>
    </function>
    
    <function name="CreateDirectory" scope="local">
        <function-prolog>
        <![CDATA[
           <p>Utility function to create a directory on a remote host</p> 
        ]]>
        </function-prolog>
        <function-list-args>
            <function-required-arg name="host">TestHost</function-required-arg>
            <function-required-arg name="path">Directory path</function-required-arg>
        </function-list-args>
        <sequence>
            <try>
                <sequence>
                    <stafcmd>
                        <location>host.get_staf_url()</location>
                        <service>'FS'</service>
                        <request>'CREATE DIRECTORY %s FULLPATH' % path</request>
                    </stafcmd>
                    <if expr="RC != STAFRC.Ok">
                        <throw exception="'CreateDirectoryException'">STAFResult</throw>
                    </if>
                </sequence>
                <catch exception="'...'" var="eInfo" typevar="eType">
                    <log message="STAXMessageLog" level="'error'">'%s while creating %s:\n%s' % (eType, path, eInfo)</log>
                </catch>
                <finally>
                    <return>RC</return>
                </finally>
            </try>
        </sequence>
    </function> 
    
    <function name="FetchLog" scope="local">
        <function-prolog>
        <![CDATA[
            <p>Retrieve a logfile(s) from remote STAF machines and store it on the current (local) machine</p>
        ]]>
        </function-prolog>
        <function-list-args>
            <function-required-arg name="sourceHost">TestHost object for the machine that contains the logfile(s)</function-required-arg>
            <function-required-arg name="targetDir">Local target directory. Default to {STAF/DataDir}</function-required-arg>
            <function-optional-arg name="file" default="None">Absolute path + filename of the file on the source machine. If omitted, all files in the directory pointed to by the log_dir property of the source host are retrieved</function-optional-arg>
        </function-list-args>
        <sequence>
            <nop/>
        </sequence>
    </function>
    
    <function name="CopyPathFromTo" scope="local">
        <function-prolog>
        <![CDATA[
            <p>This function copies a file or directory to a remote host without zipping. The executable bit of copied file is lost.
            Optionally source path can be removed and dest path can be overwritten</p>
        ]]>
        </function-prolog>
        <function-epilog>
        <![CDATA[
            <p>The function returns the result code of the STAF service call</p>            
        ]]>
        </function-epilog>
        <function-map-args>
            <function-required-arg name="src_host">STAF URL of source machine</function-required-arg>
            <function-required-arg name="src_path">Path to source file or directory (may contain STAF vars). If src_path is a directory, the contents of that directory are copied to dest_path.</function-required-arg>
            <function-required-arg name="dest_host">Target machine URL</function-required-arg>
            <function-optional-arg name="dest_path">Path to target file or directory</function-optional-arg>
            <function-optional-arg name="overwrite" default="1">Overwrite destination. 0: Never overwrite, 1: Always overwrite, 2: Overwrite if newer</function-optional-arg>
            <function-optional-arg name="remove" default="0">Remove source path: 0: Never remove, 1: Always remove</function-optional-arg>
        </function-map-args>
        <sequence>
            <try>
                <sequence>
                    <!-- Check if src_path is a file or directory -->
                    <stafcmd name="'CopyPathFromTo::CheckSrc'">
                        <location>src_host.get_staf_url()</location>
                        <service>'FS'</service>
                        <request>'GET ENTRY %s TYPE' % src_path</request>
                    </stafcmd>
                    <if expr="RC != STAFRC.Ok">
                        <throw exception="'CopyPathFromTo.CheckException'">STAFResult</throw>
                        <else>
                            <script>
                                if STAFResult == 'F':
                                    type = 'F'
                                elif STAFResult == 'D':
                                    type = 'D'
                            </script>
                        </else>
                    </if>
                    
                    <!-- Check destination -->
                    <script>abort = 0</script>
                    <if expr="overwrite == 0">
                        <!-- Don't overwrite -->
                        <sequence>
                            <stafcmd name="'CopyPathFromTo::CheckDest'">
                                <location>dest_host.get_staf_url()</location>
                                <service>'FS'</service>
                                <request>'QUERY ENTRY %s' % dest_path</request>
                            </stafcmd>
                            <!-- Target exists, abort copy -->
                            <if expr="STAFResult != STAFRC.DoesNotExist">
                                <script>abort = 1</script>
                            </if>
                        </sequence>
                        <!-- Always overwrite -->
                        <elseif expr="overwrite == 1">
                            <stafcmd name="'CopyPathFromTo::PurgeDest'">
                                <location>dest_host.get_staf_url()</location>
                                <service>'FS'</service>
                                <request>'DELETE ENTRY %s CONFIRM RECURSE' % dest_path</request>
                            </stafcmd>
                        </elseif>
                    </if>
                    
                    <if expr="abort == 0">
                        <sequence>
                            <script>
                                import os
                                request = "CREATE DIRECTORY %s FULLPATH"% dest_path
                            </script>
                            <call function="'STAF'">[dest_host.get_staf_url(), "FS", request]</call>
                            <log message="0" level="'debug'">'Copy %s from %s to %s %s' % (src_path, src_host.get_staf_url(), dest_host.get_staf_url(), dest_path)</log>
                            <if expr="type == 'F'">
                                <sequence>
                                    <stafcmd name="'CopyPathFromTo::Copying file'">
                                        <location>src_host.get_staf_url()</location>
                                        <service>'FS'</service>
                                        <request>'COPY FILE %s TOFILE %s TOMACHINE %s' % (src_path, dest_path, dest_host.get_staf_url())</request>
                                    </stafcmd>
                                </sequence>
                                <else>
                                    <sequence>
                                        <stafcmd name="'CopyPathFromTo::Copying directory'">
                                            <location>src_host.get_staf_url()</location>
                                            <service>'FS'</service>
                                            <request>'COPY DIRECTORY %s TODIRECTORY %s TOMACHINE %s' % (src_path, dest_path, dest_host.get_staf_url())</request>
                                        </stafcmd>
                                    </sequence>
                                </else>
                            </if>
                        </sequence>
                    </if>    
                    
                    <if expr="remove == 1">
                    <!-- deleting source path-->
                        <stafcmd name="'CopyPathFromTo::PurgeSrc'">
                            <location>src_host.get_staf_url()</location>
                            <service>'FS'</service>
                            <request>'DELETE ENTRY %s CONFIRM RECURSE' % src_path</request>
                        </stafcmd>
                    </if>
                </sequence>
                <catch exception="'...'" var="eInfo" typevar="eType">
                    <sequence>
                        <log message="STAXMessageLog" level="'error'">'%s: %s' % (eType, eInfo)</log>
                        <rethrow/>
                    </sequence>
                </catch>
                <finally>
                    <return>RC</return>
                </finally>
            </try>
        </sequence>
    </function>
    
        
    <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
    <function name="DeleteFileFrom" scope="local">
        <function-prolog>
            <![CDATA[
            Delete defined file or folder from the host.
            ]]>
        </function-prolog>
        <function-epilog>
            <![CDATA[
            Deletes the file or folder from the defined host.
            ]]>
        </function-epilog>

        <function-list-args>
            <function-required-arg name="host">
                The host instance to copy from.
            </function-required-arg>
            <function-required-arg name="file_name">
                The file or folder name to delete.
            </function-required-arg>
        </function-list-args>

        <sequence>
            <message>
                "Deleting [%s] from [%s]"% (file_name, host.get_hostname())
            </message>
    
            <!-- Delete the file from the host -->
            <script>
                request = "DELETE ENTRY %s CONFIRM"% file_name
            </script>
            <call function="'STAF'">[host.get_staf_url(), "FS", request]</call>
            <script>
                [RC, result] = STAXResult
            </script>
            <return>(RC == 0)</return>
        </sequence>
    </function>

</stax>
