<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE stax SYSTEM "../../stax/stax.dtd">
<!--
## \defgroup dds2341 DDS2342 - Single-source data persistency
#
# \b Test \b ID: dds2341
# 
# \b Test \b Objectives: \n
# Verify persistent data for a specific namespace, is injected from a single source only and not re-published when a node joins 
# an already running domain and that persistency files can be tuneable and predictable via the configuration file.
#
# \b Prerequisites, \b assumptions, \b constraints
#
# \par \e Environment:
# Two hosts are needed for this test, with an undisturbed method of communication using the default OpenSplice
# (reliable broadcast channel) networking features. Durability service is configured to use initial alignment,
# persistency is enabled and will use '/tmp/pstore_dds2342' as store location.
#
# \par \e Invariant:
# Both participating hosts are running OpenSplice daemon with networking and durability services enabled on the default domain.
# The topic 'TestTopic_dds2342' (T1) is used for this test, created with default QoS settings with the following exceptions:
# durability is set to persistent, reliability is set to reliable and autodispose unregistered instances is disabled on the publisher.
#
# \par \e Node \e 1:
# Subscriber of T1, on the default (built-in) partition.
#
# \par \e Node \e 2:
# Publisher of two sets of instances of T1, numbered 0..9 and 10..19, on the default (built-in) partition.
# Subscriber of T1, on the default (built-in) partition.
#
# \b Test \b Procedure
#
# \b Step \b 1
# \par \e Action
# Create a DataWriter on Node2, write the first set of instances (0..9).
# \par \e Result
# The datawriter completes the write operation without errors.
# After all instances are published, the datawriter is removed, causing the instances to be unregistered.
#
# \b Step \b 2
# \par \e Action
# Stop the OpenSplice daemon and services on Node1.
# \par \e Result
# OpenSplice is stopped on Node1, ospl-error.log is empty.
#
# \b Step \b 3
# \par \e Action
# Create a DataWriter on Node2, write the second set of instances (10..19).
# \par \e Result
# The datawriter completes the write operation without errors.\
# After all instances are published, the datawriter is removed, causing the instances to be unregistered.
#
# \b Step \b 4
# \par \e Action
# Stop the OpenSplice daemon and services on Node2.
# \par \e Result
# OpenSplice is stopped on Node2, ospl-error.log is empty.
#
# \b Step \b 5
# \par \e Action
# Start OpenSplice daemon and services on Node1.
# \par \e Result
# OpenSplice is started on Node1, ospl-error.log is empty.
#
# \b Step \b 6
# \par \e Action
# Create a DataReader on Node1, subscribing to T1 on the built-in partition.
# Wait 3 seconds for historical data and then take as many samples as possible.
# \par \e Result
# Only instances 0..9, the samples written during Step2, are read.
#
# \b Step \b 7
# \par \e Action
# Start OpenSplice daemon and services on Node2.
# \par \e Result
# OpenSplice is started on Node2, ospl-error.log is empty.
#
# \b Step \b 8
# \par \e Action
# Create a DataReader on Node2, subscribing to T1 on the built-in partition.
# Wait 3 seconds for historical data and then take as many samples as possible.
# \par \e Result
# Only instances 0..9, the samples written during Step2, are read.
#
-->
<stax>
    <defaultcall function="Run"/>
    <function name="Run">
        <function-list-args>
            <function-optional-arg name="host1" default="None">
                STAF machine nickname (hostname) of host 1
            </function-optional-arg>
            <function-optional-arg name="host2" default="None">
                STAF machine nickname (hostname) of host 2
            </function-optional-arg>
        </function-list-args>
        
        <sequence>
            <import file="'../../common/HostManager.xml'"/>
            <import file="'../common/Publisher.xml'"/>
            <import file="'../common/Subscriber.xml'"/>
            <import file="'../../common/DurabilityService.xml'"/>
            <import file="'../../common/LogWriter.xml'"/>
            <call function="'Initialize'"/>
            
            <script>
                hostList = [None, None] 
                portList = [None, None, None]
            
                if ((STAXJobName == None) or (len(STAXJobName) == 0)):
                    STAXJobName = 'Job%d_dds2342_scenario1' % STAXJobID
                
                uri = os.path.dirname(STAXCurrentXMLFile) + file_sep + 'etc' + file_sep + 'config_dds2342.xml'
                
                STAXMessageLog = 1              
            </script>
            
            <try>
                <sequence>
                    <!-- Request/lock machines by hostname or by requesting random hosts -->
                    <block name="'RequestHosts'">
                        <if expr="(host1 != None) and (host2 != None)">
                            <sequence>
                                <call-with-map function="'RequestHost'">
                                    <call-map-arg name="'hostname'">host1</call-map-arg>
                                </call-with-map>
                                <script>hostList[0] = STAXResult</script>
                                <call-with-map function="'RequestHost'">
                                    <call-map-arg name="'hostname'">host2</call-map-arg>
                                </call-with-map>
                                <script>hostList[1] = STAXResult</script>
                            </sequence>
                            <else>
                                <loop from="0" to="len(hostList) - 1" var="i">
                                    <sequence>
                                        <call-with-map function="'RequestHost'">
                                            <call-map-arg name="'target'">'.*linux2\.6.*'</call-map-arg>
                                        </call-with-map>
                                        <script>hostList[i] = STAXResult</script>
                                    </sequence>
                                </loop>
                            </else>
                        </if>
                    </block>
                    
                    <!-- Request/lock three UDP ports during the testcase -->
                    <block name="'RequestPorts'">
                        <loop from="0" to="len(portList) - 1" var="i">
                            <sequence>
                                <call function="'RequestPortResource'"/>
                                <script>
                                    [RC, port] = STAXResult
                                    portList[i] = port
                                </script>
                            </sequence>
                        </loop>
                    </block>
                    
                    <!-- Deploy OpenSplice on the machines and set some common properties -->
                    <block name="'DeployHosts'">
                        <sequence>
                            <paralleliterate in="hostList" var="host">
                                <sequence>
                                    <script>host.set_ospl_home(None)</script>
                                    <call-with-map function="'DeployHost'">
                                        <call-map-arg name="'host'">host</call-map-arg>
                                    </call-with-map>
                                    <script>
                                        # Set some common parameters
                                        host.set_scenario('tc_dds2342_001')
                                        host.set_env('OSPL_BESTEFFORT_PORT', portList[0])
                                        host.set_env('OSPL_RELIABLE_PORT', portList[1])
                                        host.set_env('OSPL_DISCOVERY_PORT', portList[2])
                                        host.set_env('OSPL_ERRORFILE', host.get_scenario() + '-ospl-error.log')
                                        host.set_env('OSPL_INFOFILE', host.get_scenario() + '-ospl-info.log')
                                        host.set_env('OSPL_DURABILITY_TRACE', host.get_scenario() + '-durability.log')
                                        host.set_env('OSPL_PSTORE', host.get_basedir() + host.get_filesep() + 'pstore_dds2342' )
                                    </script>
                                </sequence>
                            </paralleliterate>
                        </sequence>
                    </block>
                    
                    <block name="'DeployFiles'">
                        <paralleliterate in="hostList" var="host">
                            <sequence>
                                <call function="'DeployPublisher'">host</call>
                                <call function="'DeploySubscriber'">host</call>
                            </sequence>
                        </paralleliterate>
                    </block>
                    
                    <block name="'RunScenario'">
                        <sequence>
                            <script>proceed = STAXGlobal([1])</script>
                            <!-- Start OpenSplice on both hosts and publish instances 0..9 on host 2 (Step1) -->
                            <call function="'tc_dds2342_singlesource_persistency_001a'"/>
                            
                            <!-- Stop OpenSplice on host 1, publish instances 10..19 on host 2, stop OpenSplice on host 2 (Step 2, 3, 4) -->
                            <call function="'tc_dds2342_singlesource_persistency_001b'"/>
                            
                            <!-- Start OpenSplice on host 1 and run subscriber, verify availability of instances 0..9 and NOT 10..19 (Step 5, 6) -->
                            <call function="'tc_dds2342_singlesource_persistency_001c'"/>

                            <!-- Start OpenSplice on host 2 and run subscriber, verify availability of instances 0..9 and NOT 10..19 (Step 7, 8) -->
                            <call function="'tc_dds2342_singlesource_persistency_001d'"/>
                            
                            <!-- Stop OpenSplice on both hosts -->
                            <call function="'tc_dds2342_singlesource_persistency_001e'"/>
                        </sequence>
                    </block>
                </sequence>
                
                <catch exception="'Resource'" var="msg">
                    <log message="1">'An exception occurred related to a resource needed to run this test. The test cannot start.\nException: %s' % msg</log>
                </catch>
                <catch exception="'TestCase'" var="msg">
                    <sequence>
                        <log message="1">'An exception occured during a testcase. Succeeding tests are cancelled.\nException: %s' % msg</log>
                        <if expr="STAXCurrentTestcase != None">
                            <tcstatus result="'fail'">'Exception occurred'</tcstatus>
                        </if>
                    </sequence>
                </catch>
                
                <finally>
                    <!-- Release, cleanup resources -->
                    <sequence>
                        <paralleliterate in="hostList" var="host">
                            <if expr="host != None">
                                <call function="'CleanupHost'">host</call>
                            </if>
                        </paralleliterate>
                        <paralleliterate in="portList" var="port">
                            <if expr="port != None">
                                <call function="'ReleasePortResource'">port</call>
                            </if>
                        </paralleliterate>
                    </sequence>
                </finally>
            </try>
		</sequence>
    </function>
    
    <!--  Start OpenSplice on both hosts and publish instances 0..9 on host 2 -->
    <function name="tc_dds2342_singlesource_persistency_001a">
        <function-no-args/>
        <testcase name="'tc_dds2342_singlesource_persistency_001a'">
            <sequence>
                <!-- Start OpenSplice on both hosts -->
                <paralleliterate in="hostList" var="host">
                    <sequence>
                        <call function="'SetURI'">host, uri</call>
                        <call function="'StartOpenSplice'">host</call>
                        <tcstatus result="'info'">'Started OpenSplice on %s' % host.get_hostname()</tcstatus>
                    </sequence>
                </paralleliterate>
                
                <!--  Run (persistent) publisher on host 2 -->
                <script>samples = os.path.dirname(STAXCurrentXMLFile) + file_sep + 'etc' + file_sep + 'samples_dds2342_host2a.txt'</script>
                <call-with-map function="'Publisher'">
                    <call-map-arg name="'host'">hostList[1]</call-map-arg>
                    <call-map-arg name="'samples'">samples</call-map-arg>
                    <call-map-arg name="'persistent'">1</call-map-arg>
                </call-with-map>
                <if expr="STAXResult != STAFRC.Ok">
                    <sequence>
                        <script>proceed.set(0)</script>
                        <log message="STAXMessageLog" level="'info'">'Publisher failed on %s (RC=%s)' % (hostsList[1].get_hostname(), STAXResult)</log>
                        <tcstatus result="'fail'">'Failed to write samples on %s' % hostList[1].get_hostname()</tcstatus>
                    </sequence>
                    <else>
                        <sequence>
                            <log message="STAXMessageLog" level="'info'">'Publisher successful on %s (RC=%s)' % (hostList[1].get_hostname(), STAXResult)</log>
                            <tcstatus result="'pass'">'Publisher successful on %s (RC=%s)' % (hostList[1].get_hostname(), STAXResult)</tcstatus>
                            <script>
                                import time
                                time.sleep(5)
                            </script>
                        </sequence>
                    </else>
                </if>
            </sequence>
        </testcase>
    </function>
    
    <!--  Stop OpenSplice on host 1, publish instances 10..19 on host 2, stop OpenSplice on host 2 -->
    <function name="tc_dds2342_singlesource_persistency_001b">
        <function-no-args/>
        <testcase name="'tc_dds2342_singlesource_persistency_001b'">
            <sequence>
                <!-- Stop OpenSplice on host 1 -->
                <if expr="proceed">
                    <sequence>
                        <call function="'StopOpenSplice'">hostList[0]</call>
                        <if expr="STAXResult != STAFRC.Ok">
                            <sequence>
                                <tcstatus result="'fail'">'Failure stopping OpenSplice on %s' % hostList[0].get_hostname()</tcstatus>
                                <script>proceed.set(0)</script>
                            </sequence>
                            <else>
                                <tcstatus result="'info'">'Stopped OpenSplice on %s' % hostList[0].get_hostname()</tcstatus>
                            </else>
                        </if>
                    </sequence>
                    <else>
                        <tcstatus result="'fail'">'Previous failure, skipping test'</tcstatus>
                    </else>
                </if>
                        
                <!-- Run (persistent) publisher on host 2 -->
                <if expr="proceed">
                    <sequence>
                        <script>samples = os.path.dirname(STAXCurrentXMLFile) + file_sep + 'etc' + file_sep + 'samples_dds2342_host2b.txt'</script>
                        <call-with-map function="'Publisher'">
                            <call-map-arg name="'host'">hostList[1]</call-map-arg>
                            <call-map-arg name="'samples'">samples</call-map-arg>
                            <call-map-arg name="'persistent'">1</call-map-arg>
                        </call-with-map>
                        <if expr="STAXResult != STAFRC.Ok">
                            <sequence>
                                <script>proceed.set(0)</script>
                                <log message="STAXMessageLog" level="'info'">'Publisher failed on %s (RC=%s)' % (hostList[1].get_hostname(), STAXResult)</log>
                                <tcstatus result="'fail'">'Failed to write samples on %s' % hostList[1].get_hostname()</tcstatus>
                            </sequence>
                            <else>
                                <sequence>
                                    <log message="STAXMessageLog" level="'info'">'Publisher successful on %s (RC=%s)' % (hostList[1].get_hostname(), STAXResult)</log>
                                    <tcstatus result="'info'">'Publisher successful on %s (RC=%s)' % (hostList[1].get_hostname(), STAXResult)</tcstatus>
                                    <script>
                                        import time
                                        time.sleep(5)
                                    </script>
                                </sequence>
                            </else>
                        </if>
                    </sequence>
                </if>
                        
                <!-- Stop OpenSplice on host 2 -->
                <if expr="proceed">
                    <sequence>
                        <call function="'StopOpenSplice'">hostList[1]</call>
                        <if expr="STAXResult != STAFRC.Ok">
                            <sequence>
                                <tcstatus result="'fail'">'Failure stopping OpenSplice on %s' % hostList[1].get_hostname()</tcstatus>
                                <script>proceed.set(0)</script>
                            </sequence>
                            <else>
                                <tcstatus result="'pass'">'Stopped OpenSplice on %s' % hostList[1].get_hostname()</tcstatus>
                            </else>
                        </if>
                    </sequence>
                </if>
                
            </sequence>
        </testcase>
    </function>
    
    <!-- Start OpenSplice on host 1 and run subscriber, verify availability of instances 0..9 and NOT 10..19 -->
    <function name="tc_dds2342_singlesource_persistency_001c">
        <function-no-args/>
        <testcase name="'tc_dds2342_singlesource_persistency_001c'">
            <sequence>
                <!-- Start OpenSplice on host 1 -->
                <if expr="proceed">
                    <sequence>
                        <call function="'StartOpenSplice'">hostList[0]</call>
                        <tcstatus result="'info'">'Started OpenSplice on %s' % hostList[0].get_hostname()</tcstatus>
                    </sequence>
                    <else>
                        <tcstatus result="'fail'">'Previous failure, skipping test'</tcstatus>
                    </else>
                </if>
                
                <!-- Run Subscriber -->
                <if expr="proceed">
                    <sequence>
                        <script>
                            sample_file = os.path.dirname(STAXCurrentXMLFile) + file_sep + 'etc' + file_sep + 'samples_dds2342_host2a.txt'
                        </script>
                        <call-with-map function="'Subscriber'">
                            <call-map-arg name="'host'">hostList[0]</call-map-arg>
                            <call-map-arg name="'samples'">sample_file</call-map-arg>
                            <call-map-arg name="'take'">1</call-map-arg>
                            <call-map-arg name="'wait'">3000</call-map-arg>
                            <call-map-arg name="'persistent'">1</call-map-arg>
                        </call-with-map>
                        <if expr="STAXResult != STAFRC.Ok">
                            <sequence>
                                <script>proceed.set(0)</script>
                                <log message="STAXMessageLog" level="'info'">'Subscriber failed on %s (RC=%s)' % (hostList[0].get_hostname(), STAXResult)</log>
                                <tcstatus result="'fail'">'Failed to read samples on %s' % hostList[0].get_hostname()</tcstatus>
                            </sequence>
                            <else>
                                <sequence>
                                    <script>
                                        sample_file = os.path.dirname(STAXCurrentXMLFile) + file_sep + 'etc' + file_sep + 'samples_dds2342_host2b.txt'
                                    </script>
                                    <call-with-map function="'Subscriber'">
                                        <call-map-arg name="'host'">hostList[0]</call-map-arg>
                                        <call-map-arg name="'samples'">sample_file</call-map-arg>
                                        <call-map-arg name="'take'">1</call-map-arg>
                                        <call-map-arg name="'wait'">3000</call-map-arg>
                                        <call-map-arg name="'persistent'">1</call-map-arg>
                                    </call-with-map>
                                    <if expr="STAXResult == STAFRC.Ok">
                                        <sequence>
                                            <log message="STAXMessageLog" level="'info'">'Subscriber read unexpected samples on %s (RC=%s)' % (hostList[0].get_hostname(), STAXResult)</log>
                                            <tcstatus result="'fail'">'Subscriber read unexpected samples on %s (RC=%s)' % (hostList[0].get_hostname(), STAXResult)</tcstatus>
                                        </sequence>
                                        <!-- Expect the subscriber to fail, we're checking that instances 10..19 are NOT available -->
                                        <else>
                                            <sequence>
                                                <tcstatus result="'pass'">'Subscriber read all expected samples on %s' % (hostList[0].get_hostname())</tcstatus>
                                                <log message="STAXMessageLog" level="'info'">'Subscriber successful on %s (RC=%s)' % (hostList[0].get_hostname(), STAXResult)</log>
                                            </sequence>
                                        </else>
                                    </if>
                                </sequence>
                            </else>
                        </if>
                    </sequence>
                </if>
            </sequence>
        </testcase>
    </function>
    
    <!-- Start OpenSplice on host 2 and run subscriber, verify availability of instances 0..9 and NOT 10..19 -->
    <function name="tc_dds2342_singlesource_persistency_001d">
        <function-no-args/>
        <testcase name="'tc_dds2342_singlesource_persistency_001d'">
            <sequence>
                <!-- Start OpenSplice on host 1 -->
                <if expr="proceed">
                    <sequence>
                        <call function="'StartOpenSplice'">hostList[1]</call>
                        <tcstatus result="'info'">'Started OpenSplice on %s' % hostList[1].get_hostname()</tcstatus>
                    </sequence>
                    <else>
                        <tcstatus result="'fail'">'Previous failure, skipping test'</tcstatus>
                    </else>
                </if>
                
                <!-- Run Subscriber -->
                <if expr="proceed">
                    <sequence>
                        <script>
                            sample_file = os.path.dirname(STAXCurrentXMLFile) + file_sep + 'etc' + file_sep + 'samples_dds2342_host2a.txt'
                        </script>
                        <call-with-map function="'Subscriber'">
                            <call-map-arg name="'host'">hostList[1]</call-map-arg>
                            <call-map-arg name="'samples'">sample_file</call-map-arg>
                            <call-map-arg name="'take'">1</call-map-arg>
                            <call-map-arg name="'wait'">3000</call-map-arg>
                            <call-map-arg name="'persistent'">1</call-map-arg>
                        </call-with-map>
                        <if expr="STAXResult != STAFRC.Ok">
                            <sequence>
                                <script>proceed.set(0)</script>
                                <log message="STAXMessageLog" level="'info'">'Subscriber failed on %s (RC=%s)' % (hostList[1].get_hostname(), STAXResult)</log>
                                <tcstatus result="'fail'">'Failed to read samples on %s' % hostList[1].get_hostname()</tcstatus>
                            </sequence>
                            <else>
                                <sequence>
                                    <script>
                                        sample_file = os.path.dirname(STAXCurrentXMLFile) + file_sep + 'etc' + file_sep + 'samples_dds2342_host2b.txt'
                                    </script>
                                    <call-with-map function="'Subscriber'">
                                        <call-map-arg name="'host'">hostList[1]</call-map-arg>
                                        <call-map-arg name="'samples'">sample_file</call-map-arg>
                                        <call-map-arg name="'take'">1</call-map-arg>
                                        <call-map-arg name="'wait'">3000</call-map-arg>
                                        <call-map-arg name="'persistent'">1</call-map-arg>
                                    </call-with-map>
                                    <if expr="STAXResult == STAFRC.Ok">
                                        <sequence>
                                            <log message="STAXMessageLog" level="'info'">'Subscriber read unexpected samples on %s (RC=%s)' % (hostList[1].get_hostname(), STAXResult)</log>
                                            <tcstatus result="'fail'">'Subscriber read unexpected samples on %s (RC=%s)' % (hostList[1].get_hostname(), STAXResult)</tcstatus>
                                        </sequence>
                                        <!-- Expect the subscriber to fail, we're checking that instances 10..19 are NOT available -->
                                        <else>
                                            <sequence>
                                                <tcstatus result="'pass'">'Subscriber read all expected samples on %s' % (hostList[1].get_hostname())</tcstatus>
                                                <log message="STAXMessageLog" level="'info'">'Subscriber successful on %s (RC=%s)' % (hostList[1].get_hostname(), STAXResult)</log>
                                            </sequence>
                                        </else>
                                    </if>
                                </sequence>
                            </else>
                        </if>
                    </sequence>
                </if>
            </sequence>
        </testcase>
    </function>
    
    <!-- Stop OpenSplice on both hosts -->
    <function name="tc_dds2342_singlesource_persistency_001e">
        <function-no-args/>
        <testcase name="'tc_dds2342_singlesource_persistency_001e'">
            <sequence>
                <script>success = STAXGlobal(1)</script>
                <paralleliterate in="hostList" var="host">
                    <sequence>
                        <call function="'StopOpenSplice'">host</call>
                        <if expr="STAXResult != STAFRC.Ok">
                            <sequence>
                                <tcstatus result="'fail'">'Failure stopping OpenSplice on %s' % host.get_hostname()</tcstatus>
                                <script>success.set(0)</script>
                            </sequence>
                            <else>
                                <tcstatus result="'info'">'Stopped OpenSplice on %s' % host.get_hostname()</tcstatus>
                            </else>
                        </if>
                    </sequence>
                </paralleliterate>
                <if expr="success">
                    <tcstatus result="'pass'">'Stopped OpenSplice on all hosts'</tcstatus>                
                </if>
            </sequence>
        </testcase>
    </function>
            
</stax>
