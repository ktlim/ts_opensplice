<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE stax SYSTEM "../../stax/stax.dtd">
<stax>
    <!-- Define default function to execute -->
    <defaultcall function="dds2466_main"/>
<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
    <!-- Function runs the dds2466 test -->
    <function name="dds2466_main" scope="local">
    
        <!-- Function description -->
        <function-epilog>
            <![CDATA[
            ]]>
        </function-epilog>
        <!-- Function dependencies -->
        <function-import file="../../stax/test_ospl.xml"/>
        <!-- Function arguments -->
        <function-list-args>
            <function-required-arg name="host_name1">
                The name of the 1st host for the test:
            </function-required-arg>
            <function-required-arg name="host_name2">
                The name of the 2nd host for the test:
            </function-required-arg>
            <function-required-arg name="ospl_home1">
                The OSPL HOME - distribution location on the 1st host
            </function-required-arg>
            <function-required-arg name="ospl_home2">
                The OSPL HOME - distribution location on the 2nd host
            </function-required-arg>
            <function-required-arg name="ospl_src1">
                The OSPL source code location on the 1st host (where ospli/osplo stored)
            </function-required-arg>
            <function-required-arg name="ospl_src2">
                The OSPL source code location on the 2nd host (where ospli/osplo stored)
            </function-required-arg>
            <function-required-arg name="tao_root1">
                The TAO_ROOT for the 1st host
            </function-required-arg>
            <function-required-arg name="tao_root2">
                The TAO_ROOT for the 2nd host
            </function-required-arg>
            <function-optional-arg name="staf_port1" default="6500">
                Staf port for the 1st host
            </function-optional-arg>
            <function-optional-arg name="staf_port2" default="6500">
                Staf port for the 2nd host
            </function-optional-arg>
        </function-list-args>
        <!-- Function body begin -->
        <sequence>
            <script>
                import os
                import sys
                from time import *

                # Get starting test time:
                start_time = time()

                # Get time stamp to compose the folder name:
                time_stamp = strftime("%d-%m-%Y-%H-%M-%S", localtime())

                this_xml_dir = STAXCurrentXMLFile[:STAXCurrentXMLFile.rfind(os.sep)]

                sys.path.append(this_xml_dir)
                sys.path.append(this_xml_dir + os.sep + ".." + os.sep + ".." +\
                                os.sep + "stax" + os.sep + "python")

                from host                  import Host
                from dds2466_test_scenario import DDS2466TestScenario

                # Define the scenario:
                test_scenario = DDS2466TestScenario()

                localhost = Host()
                local_fs = localhost.get_file_sep()
                localhost.set_log_dir(this_xml_dir + local_fs + "log" + local_fs + time_stamp)

                # Create local directory:
                os.makedirs(localhost.get_log_dir())

                # Set test case result log file:
                test_scenario.set_result_file(localhost.get_log_dir()  + local_fs +\
                                              test_scenario.get_name() + "_result.log")

                # Is test scenario initialized property:
                test_scenario_initialized = 0
            </script>

            <try>
                <sequence>
                    <!-- Initialize the framework -->
                    <call function="'Initialise'"/>

                    <script>
                        # Publisher process executable:
                        publisher_exe = "dds2466_pub"
                        # Subscriber process executable:
                        subscriber_exe = "dds2466_sub"

                        # Define the host for the scanario:
                        host1 = test_scenario.define_host(
                            ospl_home = ospl_home1,
                            host_name = host_name1,
                            staf_port = staf_port1)
                        host2 = test_scenario.define_host(
                            ospl_home = ospl_home2,
                            host_name = host_name2,
                            staf_port = staf_port2)

                        # Set role for the hosts:
                        host1.set_role("WAITER")
                        host2.set_role("SYNCHRONIZER")
                    </script>

                    <!-- For all defined hosts -->
                    <iterate var="host" in="test_scenario.get_all_hosts()">
                        <!-- Init the host -->
                        <call function="'InitHost'">host</call>
                    </iterate>

                    <script>
                        from time import *

                        # File separators on the hosts:
                        fs1      = host1.get_file_sep()
                        fs2      = host2.get_file_sep()

                        # Set log sub-directories for the hosts (log/timestamp/hostname):
                        host1_log_subdir = "log" + fs1 + time_stamp + fs1 + host1.get_host_name()
                        host2_log_subdir = "log" + fs2 + time_stamp + fs2 + host2.get_host_name()

                        test_scenario.set_log_root(localhost.get_log_dir())

                        # Path to the test on the hosts (ospli/testsuite/tests/dds2466):
                        test_path1 = ospl_src1 + "%(x)sospli%(x)stestsuite%(x)stests%(x)sdds2466"% {"x": fs1}
                        test_path2 = ospl_src2 + "%(x)sospli%(x)stestsuite%(x)stests%(x)sdds2466"% {"x": fs2}

                        # Set log locations on the nodes:
                        host1.set_log_dir(test_path1 + fs1 + host1_log_subdir)
                        host2.set_log_dir(test_path2 + fs2 + host2_log_subdir)
                        host1.set_ospl_log_dir(host1.get_log_dir())
                        host2.set_ospl_log_dir(host2.get_log_dir())

                        # Path to the TESTLIB library on the hosts (ospli/testsuite/tests/testlibs):
                        testlib_home1 = ospl_src1 + "%(x)sospli%(x)stestsuite%(x)stests%(x)stestlibs"% {"x": fs1}
                        testlib_home2 = ospl_src1 + "%(x)sospli%(x)stestsuite%(x)stests%(x)stestlibs"% {"x": fs1}

                        # Set LD_LIBRARY_PATH on hosts:
                        host1.set_env_value(
                            "LD_LIBRARY_PATH",
                            host1.get_env_value("LD_LIBRARY_PATH") +\
                            host1.get_path_sep()                   +\
                            testlib_home1                          +\
                            host1.get_path_sep()                   +\
                            tao_root1 + host1.get_file_sep() + "lib")
                        host2.set_env_value(
                            "LD_LIBRARY_PATH",
                            host2.get_env_value("LD_LIBRARY_PATH") +\
                            host2.get_path_sep()                   +\
                            testlib_home2                          +\
                            host2.get_path_sep()                   +\
                            tao_root2 + host2.get_file_sep() + "lib")

                        # IDs for the publishers/subscribers:
                        publisher_id1  = "1"
                        publisher_id2  = "2"
                        subscriber_id1 = "1"
                        subscriber_id2 = "2"

                        # Set ID environment variables on each host:
                        host1.set_env_value("PUB_EXEC",       publisher_exe)
                        host1.set_env_value("SUB_ID",         subscriber_id1)
                        host1.set_env_value("PUB_ID",         publisher_id1)
                        host1.set_env_value("ANOTHER_PUB_ID", publisher_id2)
                        host2.set_env_value("PUB_EXEC",       publisher_exe)
                        host2.set_env_value("SUB_ID",         subscriber_id2)
                        host2.set_env_value("PUB_ID",         publisher_id2)
                        host2.set_env_value("ANOTHER_PUB_ID", publisher_id1)

                        # Publisher ports for its synchronization:
                        publisher_port1 = "8000"
                        publisher_port2 = "9000"

                        # Publisher on host1 will wait synchroniztion:
                        host1.set_env_value("PUB_WAITER", "TRUE")

                        # Set executables:
                        publisher_process1  = host1.define_process("%s%s%s"% (test_path1, fs1, publisher_exe))
                        publisher_process2  = host2.define_process("%s%s%s"% (test_path2, fs2, publisher_exe))
                        subscriber_process1 = host1.define_process("%s%s%s"% (test_path1, fs1, subscriber_exe))
                        subscriber_process2 = host2.define_process("%s%s%s"% (test_path2, fs2, subscriber_exe))

                        # Set names:
                        publisher_process1.set_name ("publisher1")
                        publisher_process2.set_name ("publisher2")
                        subscriber_process1.set_name("subscriber1")
                        subscriber_process2.set_name("subscriber2")

                        # Set process log files:
                        publisher_process1.set_log_file (host1.get_log_dir() + fs1 + "publisher%d.log"%  publisher_id1)
                        publisher_process2.set_log_file (host2.get_log_dir() + fs2 + "publisher%d.log"%  publisher_id2)
                        subscriber_process1.set_log_file(host1.get_log_dir() + fs1 + "subscriber%d.log"% subscriber_id1)
                        subscriber_process2.set_log_file(host2.get_log_dir() + fs2 + "subscriber%d.log"% subscriber_id2)

                        # Set parameters:
                        publisher_process1.set_args("-ORBListenEndpoints iiop://%s:%s -ORBInitRef %s%s=corbaloc:iiop:%s:%s/%s%s"%\
                                                    (host1.get_host_name(),
                                                     publisher_port1,
                                                     publisher_exe,
                                                     publisher_id2,
                                                     host2.get_host_name(),
                                                     publisher_port2,
                                                     publisher_exe,
                                                     publisher_id2))

                        # Set parameters:
                        publisher_process2.set_args("-ORBListenEndpoints iiop://%s:%s -ORBInitRef %s%s=corbaloc:iiop:%s:%s/%s%s"%\
                                                    (host2.get_host_name(),
                                                     publisher_port2,
                                                     publisher_exe,
                                                     publisher_id1,
                                                     host1.get_host_name(),
                                                     publisher_port1,
                                                     publisher_exe,
                                                     publisher_id1))
                    </script>

                    <!-- For all defined hosts -->
                    <iterate var="host" in="test_scenario.get_all_hosts()">
                        <!-- Create log directory on the host -->
                        <call function="'CreateLogDirOnHost'">host</call>
                    </iterate>

                    <script>test_scenario_initialized = 1</script>
                </sequence>

                <!-- Catch all possible exceptions -->
                <catch exception="'...'" typevar="type" var="info">
                    <sequence>
                        <script>
                            test_scenario.fail()
                            test_scenario.errors.append("Initializing process error: %s (%s)!"% (type, info))
                        </script>
                    </sequence>
                </catch>
            </try>

            <if expr="test_scenario_initialized == 1">
                <!-- Test case begin -->
                <testcase name = "test_scenario.get_name()">
                    <sequence>
                        <try>
                            <sequence>
                                <!-- Step 1: -->
                                <!-- For all hosts start OSPL daemon -->
                                <iterate var="host" in="test_scenario.get_all_hosts()">
                                    <call function="'StartOSPL'">host</call>
                                </iterate>
                                <!-- Wait 1 sec to allow OSPL daemon and services start -->
                                <script>sleep(1)</script>

                                <!-- Step 2: -->
                                <!-- Create subscribers on nodes -->
                                <parallel>
                                    <call function="'SpawnProcess'">[host1, subscriber_process1]</call>
                                    <call function="'SpawnProcess'">[host2, subscriber_process2]</call>
                                </parallel>

                                <!-- Step 3: -->
                                <!-- Create publishers on nodes -->
                                <parallel>
                                    <call function="'RunProcess'">[host1, publisher_process1]</call>
                                    <sequence>
                                        <!-- Sleep to allow 1st publisher to reach sync.-point -->
                                        <script>sleep(3)</script>
                                        <call function="'RunProcess'">[host2, publisher_process2]</call>
                                    </sequence>
                                </parallel>

                                <!-- Get logs from the hosts -->
                                <parallel>
                                    <call function="'CopyDirFromTo'">
                                        [host1,
                                        localhost,
                                        host1.get_log_dir(),
                                        localhost.get_log_dir() + local_fs + host1.get_host_name()]
                                    </call>
                                    <call function="'CopyDirFromTo'">
                                        [host2,
                                        localhost,
                                        host2.get_log_dir(),
                                        localhost.get_log_dir() + local_fs + host2.get_host_name()]
                                    </call>
                                </parallel>
                            </sequence>

                            <!-- Catch "OSPL did not start" exception (may be raised by the "StartOSPL" function) -->
                            <catch exception="'OSPLDidNotStarted'" var="msg">
                                <script>
                                    test_scenario.fail()
                                    test_scenario.errors.append("Cann't start OSPL: " + msg)
                                </script>
                            </catch>
                            <!-- Catch "Running process error" exception (may be raised by the "RunProcess" function) -->
                            <catch exception="'RunningProcessError'" var="msg">
                                <script>
                                    test_scenario.fail()
                                    test_scenario.errors.append("Running process error: " + msg)
                                </script>
                            </catch>

                            <!-- At the end in any case -->
                            <finally>
                                <sequence>
                                    <!-- Terminate subscribers on nodes -->
                                    <parallel>
                                        <call function="'TerminateProcess'">[host1, subscriber_process1]</call>
                                        <call function="'TerminateProcess'">[host2, subscriber_process2]</call>
                                    </parallel>

                                    <!-- For all hosts stop OSPL daemon -->
                                    <iterate var="host" in="test_scenario.get_all_hosts()">
                                        <call function="'StopOSPL'">host</call>
                                    </iterate>
                                </sequence>
                            </finally>
                        </try>
                    </sequence>
                </testcase>
            </if>

            <!-- Test case end -->
            <script>
                # Get stopping test time:
                stop_time    = time()
                # Calc the difference:
                elapsed_secs = stop_time - start_time

                test_scenario.analyze()
            </script>
            <message>"Test complete - ran for [%d] seconds."% elapsed_secs</message>
            <if expr="test_scenario.is_passed()">
                <message>"Test PASSED."</message>
            </if>
            <if expr="test_scenario.is_failed()">
                <message>"Test FAILED see [%s] log for details."% test_scenario.get_result_file()</message>
            </if>
            <if expr="test_scenario.is_not_tested()">
                <message>"Test NOT TESTED see [%s] log for details."% test_scenario.get_result_file()</message>
            </if>
        </sequence>
        <!-- Function body end -->
    </function>
    <!-- function: dds2466_main -->
<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
</stax>
