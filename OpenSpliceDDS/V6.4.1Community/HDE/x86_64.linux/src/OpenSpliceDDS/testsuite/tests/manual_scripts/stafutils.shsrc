#!/bin/bash

# This file must only be sourced.
if [ -z "$BASH_SOURCE" -o "$0" = "$BASH_SOURCE" ]; then
    echo "ERROR: Only source '$0' file"
    exit 1
fi

# Source current settings.
. "$(dirname "$BASH_SOURCE")/osplsettings.shsrc" "$@"
. "$(dirname "$BASH_SOURCE")/osplconfig.shsrc" "$@"

function source_staf_env ()
{
    local local_root="$(to_unix_path "$STAF_ROOT")"

    if [ -z "$local_root" -o ! -d "$local_root" ]; then
        error_help "ERROR: STAF_ROOT is not correctly set to '$STAF_ROOT'"
        return 1
    fi
    if [ -z "$MY_STAF_PORT" -o "$MY_STAF_PORT" = 'NaN' ]; then
        error_help "ERROR: MY_STAF_PORT is not correctly set to '$MY_STAF_PORT'"
        return 1
    fi

    local port="$(fgrep -e 'interface tcp library STAFTCP' "$local_root/bin/STAF.cfg" | sed -e 's/.*Port=//')"
    if [ -z "$port" -o "$port" != "$MY_STAF_PORT" ]; then
        error_help "ERROR: MY_STAF_PORT ($MY_STAF_PORT) and the port in STAF.cfg ($port) are not the same"
        return 1
    fi

    if [ "$(uname)" != 'SunOS' ]; then
        if [ "$(uname -o)" = 'Cygwin' ]; then
            if [ -z "$STAF_INSTANCE_NAME" ]; then
                echo "ERROR: STAF is not setup correctly; try restarting Cygwin.bat"
                return 1
            fi

            return 0
        fi
    fi

    if [ ! -f "$local_root/STAFEnv.sh" ]; then
        error_help "ERROR: '$local_root/STAFEnv.sh' is not found"
        return 1
    fi
    . "$local_root/STAFEnv.sh" $USER
}

function stop_staf ()
{
    source_staf_env || return 1
    STAF local SHUTDOWN SHUTDOWN &>/dev/null
    if [ $? -eq 0 ]; then
        sleep 5
        return 0
    fi

    #SunOS does not have x as an arg to ps
    if [ "$(uname)" = 'SunOS' ]; then
       local killflags psflags='-a'
    else
       local killflags psflags='xa'

        if [ "$(uname -o)" = 'Cygwin' ]; then
            psflags='-W'
            killflags='-f'
        fi
    fi

    local res="$(ps "$psflags" | fgrep -v fgrep | fgrep -e STAFProc)"
    if [ -z "$res" ]; then
        sleep 5
        return 0
    fi

    # Really kill it.
    echo "$res" | gawk '{print $1}' | xargs --replace=_ kill "$killflags" -9 _
    sleep 5
    return 0
}

function start_staf ()
{
    source_staf_env || return 1

    if [ "$(uname)" != 'SunOS' ]; then
        if [ "$(uname -o)" = 'Cygwin' ]; then
            cmd /C "call $STAF_ROOT/startSTAFProc.bat $USER"
        else
            "$STAF_ROOT/startSTAFProc.sh" $USER
        fi
    else
        "$STAF_ROOT/startSTAFProc.sh" $USER
    fi

}

function change_remote_configs ()
{
    if [ $# -ne 3 ]; then
        error_trace "ERROR: Wrong number of arguments to ${FUNCNAME[0]}"
        return 1
    fi
    if [ -z "$MY_BASE_PORT" -o "$MY_BASE_PORT" = 'NaN' ]; then
        error_help "ERROR: MY_BASE_PORT is not correctly set to '$MY_BASE_PORT'"
        return 1
    fi

    local machine="$1" && test -n "$machine" || error_trace "ERROR: Parameter \$1 is empty" || return 1
    local runtype="$2" && test -n "$runtype" || error_trace "ERROR: Parameter \$2 is empty" || return 1
    local transport="$3" && test -n "$transport" || error_trace "ERROR: Parameter \$3 is empty" || return 1

    local ospl_home orig_ospl my_ospl native_cur_path
    ospl_home="$(remote_var_value "$machine" OSPL_DISTPATH)" || return 1
    orig_ospl="$(orig_ospl_config "$runtype" "$transport")" || return 1
    my_ospl="$(my_ospl_config "$machine" "$runtype" "$transport")" || return 1
    native_cur_path="$(osplconfig_current_path)"
    native_cur_path="$(to_native_path "$native_cur_path")"

    # Copy the original file to local directory.
    echo -e "\nGetting original '$orig_ospl' from '$machine'..."
    STAF "$machine" FS COPY FILE "$ospl_home/etc/config/$orig_ospl" TOFILE "$native_cur_path/$my_ospl" || return 1

    # patch doesn't like the files copied over from a windows machine so convert to unix format before attempting
    # to patch them.
    dos2unix "$native_cur_path/$my_ospl"

    echo -e "\nPatching ospl.xml..."
    create_ospl_config "$machine" "$runtype" "$transport" "$MY_BASE_PORT" "domain" || return 1

    # Copy a changed file to the remote host.
    echo -e "\nCopying changed '$my_ospl' to '$machine'..."
    STAF local FS COPY FILE "$native_cur_path/$my_ospl" TOFILE "$ospl_home/etc/config/ospl.xml" TOMACHINE "$machine" || return 1
}

function _check_stafutils_args ()
{
    while [ $# -ne 0 ]
    do
        case "$1" in
            -h|--help)
                # Nothing to print as help here.
                return 1
                ;;
            *)
                shift
                ;;
        esac
    done
}
if [ -z "$g_stafutils_loaded" ]; then
    g_stafutils_loaded='yes'
    # This is the last line in this file. It can set $? which is important for
    # the outside code. Don't do anything after this!!!
    _check_stafutils_args "$@"
fi
