<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE stax SYSTEM "../../stax/stax.dtd">

<!--
    run_dds1581_test.xml - Run the dds 1581 test using STAX

-->

<stax>

  <defaultcall function="dds1581_main">
  </defaultcall>

  <function name="dds1581_main" scope="local" >
    <function-prolog>
      Test runs OSPL on seven nodes.
    </function-prolog>

    <function-list-args>
      <function-required-arg name="host_name1">
        The host name of the machine 1 you wish test on in double quotes, use the following format: "name"
      </function-required-arg>
      <function-optional-arg name="test_root1" default="'/home/user/log'">
        Location of test case build on machine 1 in double quotes and double backslash, use the following format: "dir1\\dir2"
      </function-optional-arg>
      <function-optional-arg name="ospl_root1" default="'/home/user'">
        Location of OSPL root on machine 1 in double quotes and double backslash, use the following format: "dir1\\dir2"
      </function-optional-arg>
      <function-optional-arg name="ospl_release_name1" default="'x86.linux-release'">
        TODO: create description
      </function-optional-arg>
      
      <function-optional-arg name="host_name2" default="'vm-dds-rhel53x64'">
        The host name of the machine 2 you wish to test on in double quotes, use the following format: "name"
      </function-optional-arg>
      <function-optional-arg name="test_root2" default="'/home/user/log'">
        Location of test case build on machine 2 in double quotes and double backslash, use the following format: "dir1\\dir2"
      </function-optional-arg>
      <function-optional-arg name="ospl_root2" default="'/home/user'">
        Location of OSPL root on machine 2 in double quotes and double backslash, use the following format: "dir1\\dir2"
      </function-optional-arg>
      <function-optional-arg name="ospl_release_name2" default="'x86_64.linux-release'">
        TODO: create description
      </function-optional-arg>
      
      <function-optional-arg name="host_name3" default="'vm-dds-rhel53x86'">
        The host name of the machine 3 you wish to test on in double quotes, use the following format: "name"
      </function-optional-arg>
      <function-optional-arg name="test_root3" default="'/home/user/log'">
        Location of test case build on machine 3 in double quotes and double backslash, use the following format: "dir1\\dir2"
      </function-optional-arg>
      <function-optional-arg name="ospl_root3" default="'/home/user'">
        Location of OSPL root on machine 3 in double quotes and double backslash, use the following format: "dir1\\dir2"
      </function-optional-arg>
      <function-optional-arg name="ospl_release_name3" default="'x86.linux-release'">
        TODO: create description
      </function-optional-arg>

      <function-optional-arg name="host_name4" default="'empty'">
        The host name of the machine 4 you wish to test on in double quotes, use the following format: "name"
      </function-optional-arg>
      <function-optional-arg name="test_root4" default="'empty'">
        Location of test case build on machine 4 in double quotes and double backslash, use the following format: "dir1\\dir2"
      </function-optional-arg>
      <function-optional-arg name="ospl_root4" default="'empty'">
        Location of OSPL root on machine 4 in double quotes and double backslash, use the following format: "dir1\\dir2"
      </function-optional-arg>
      <function-optional-arg name="ospl_release_name4" default="'x86.linux-release'">
        TODO: create description
      </function-optional-arg>

      <function-optional-arg name="host_name5" default="'empty'">
        The host name of the machine 5 you wish to test on in double quotes, use the following format: "name"
      </function-optional-arg>
      <function-optional-arg name="test_root5" default="'empty'">
        Location of test case build on machine 5 in double quotes and double backslash, use the following format: "dir1\\dir2"
      </function-optional-arg>
      <function-optional-arg name="ospl_root5" default="'empty'">
        Location of OSPL root on machine 5 in double quotes and double backslash, use the following format: "dir1\\dir2"
      </function-optional-arg>
      <function-optional-arg name="ospl_release_name5" default="'x86.linux-release'">
        TODO: create description
      </function-optional-arg>

      <function-optional-arg name="host_name6" default="'empty'">
        The host name of the machine 6 you wish to test on in double quotes, use the following format: "name"
      </function-optional-arg>
      <function-optional-arg name="test_root6" default="'empty'">
        Location of test case build on machine 6 in double quotes and double backslash, use the following format: "dir1\\dir2"
      </function-optional-arg>
      <function-optional-arg name="ospl_root6" default="'empty'">
        Location of OSPL root on machine 6 in double quotes and double backslash, use the following format: "dir1\\dir2"
      </function-optional-arg>
      <function-optional-arg name="ospl_release_name6" default="'x86.linux-release'">
        TODO: create description
      </function-optional-arg>

      <function-optional-arg name="host_name7" default="'empty'">
        The host name of the machine 7 you wish to test on in double quotes, use the following format: "name"
      </function-optional-arg>
      <function-optional-arg name="test_root7" default="'empty'">
        Location of test case build on machine 7 in double quotes and double backslash, use the following format: "dir1\\dir2"
      </function-optional-arg>
      <function-optional-arg name="ospl_root7" default="'empty'">
        Location of OSPL root on machine 7 in double quotes and double backslash, use the following format: "dir1\\dir2"
      </function-optional-arg>
      <function-optional-arg name="ospl_release_name7" default="'x86.linux-release'">
        TODO: create description
      </function-optional-arg>

      <function-optional-arg name="host_name8" default="'empty'">
        The host name of the machine 8 you wish to test on in double quotes, use the following format: "name"
      </function-optional-arg>
      <function-optional-arg name="test_root8" default="'empty'">
        Location of test case build on machine 8 in double quotes and double backslash, use the following format: "dir1\\dir2"
      </function-optional-arg>
      <function-optional-arg name="ospl_root8" default="'empty'">
        Location of OSPL root on machine 8 in double quotes and double backslash, use the following format: "dir1\\dir2"
      </function-optional-arg>
      <function-optional-arg name="ospl_release_name8" default="'x86.linux-release'">
        TODO: create description
      </function-optional-arg>
      
      <function-optional-arg name="staf_port_1" default="'6505'">
        TODO: create description
      </function-optional-arg>
      <function-optional-arg name="staf_port_2" default="'6503'">
        TODO: create description
      </function-optional-arg>
      <function-optional-arg name="staf_port_3" default="'6504'">
        TODO: create description
      </function-optional-arg>
      <function-optional-arg name="staf_port_4" default="'6500'">
        TODO: create description
      </function-optional-arg>
      <function-optional-arg name="staf_port_5" default="'6501'">
        TODO: create description
      </function-optional-arg>
      <function-optional-arg name="staf_port_6" default="'6502'">
        TODO: create description
      </function-optional-arg>
      <function-optional-arg name="staf_port_7" default="'6506'">
        TODO: create description
      </function-optional-arg>
      <function-optional-arg name="staf_port_8" default="'6507'">
        TODO: create description
      </function-optional-arg>
    </function-list-args>
    
    <sequence>
        <import file="'../../stax/test_ospl.xml'"/>
        <import file="'dds1581_test_functions.xml'"/>
   
        <try>
            <sequence>
                <call function="'Initialise'" />
                <script>
                    from process import Process
                    import time
                    test_name = "DDS1581"
                    empty_field = "empty"
                    ospli_name  = "ospli"
                    osplo_name  = "osplo"
                    start_script_name  =  "envs-"
                    ext_script_name  =  "sh"
                    testsuite_name = "testsuite"
                    rbt_name = "rbt"
                    services_name = "services"
                    durability_name = "durability"
                    test_dir_name = "dds1581"

                    test_scenario = BaseTestScenario(test_name, "CO-Flight requirements test DDS1581")
                    
                    release_script_names = []
                    ospl_release_names = []
                    ospl_roots = []
                    #2 host always should  be : master and slave
                    #master host
                    host1 = test_scenario.define_host(test_root = test_root1, ospl_home = "default", host_name = host_name1, staf_port = staf_port_1)
                    file_path_separator1 = host1.get_file_sep()
                    ospl_home1 = ospl_root1 + file_path_separator1 + ospli_name
                    host1.set_ospl_home(ospl_home1)
                    release_script_name1 = start_script_name + ospl_release_name1
                    release_script_names.insert(0, release_script_name1)
                    ospl_release_names.insert(0, ospl_release_name1)
                    ospl_roots.insert(0, ospl_root1)
                    # Set test case result log file:
                    this_xml_dir = STAXCurrentXMLFile[:STAXCurrentXMLFile.rfind(os.sep)]
                    host1.set_log_dir(this_xml_dir)
                    test_scenario.set_result_file(host1.get_log_dir() + host1.get_file_sep() + test_scenario.get_name() + "_result.log")
                    #slave host
                    host2 = test_scenario.define_host(test_root = test_root2, ospl_home = "default", host_name = host_name2, staf_port = staf_port_2)
                    file_path_separator2 = host2.get_file_sep()
                    ospl_home2 = ospl_root2 + file_path_separator2 + ospli_name
                    host2.set_ospl_home(ospl_home2)
                    release_script_name2 = start_script_name + ospl_release_name2
                    release_script_names.insert(1, release_script_name2)
                    ospl_release_names.insert(1, ospl_release_name2)
                    ospl_roots.insert(1, ospl_root2)
                    #check if not name - host not initialized
                    
                    if (host_name3 != empty_field):
                        host3 = test_scenario.define_host(test_root = test_root3, ospl_home = "default", host_name = host_name3, staf_port = staf_port_3)
                        file_path_separator3 = host3.get_file_sep()
                        ospl_home3 = ospl_root3 + file_path_separator3 + ospli_name
                        host3.set_ospl_home(ospl_home3)
                        release_script_name3 = start_script_name + ospl_release_name3
                        release_script_names.insert(2, release_script_name3)
                        ospl_release_names.insert(2, ospl_release_name3)
                        ospl_roots.insert(2, ospl_root3)

                    if (host_name4 != empty_field):
                        host4 = test_scenario.define_host(test_root = test_root4, ospl_home = "default", host_name = host_name4, staf_port = staf_port_4)
                        file_path_separator4 = host4.get_file_sep()
                        ospl_home4 = ospl_root4 + file_path_separator4 + ospli_name
                        host4.set_ospl_home(ospl_home4)
                        release_script_name4 = start_script_name + ospl_release_name4
                        release_script_names.insert(3, release_script_name4)
                        ospl_release_names.insert(3, ospl_release_name4)
                        ospl_roots.insert(3, ospl_root4)

                    if (host_name5 != empty_field):
                        host5 = test_scenario.define_host(test_root = test_root5, ospl_home = "default", host_name = host_name5, staf_port = staf_port_5)
                        file_path_separator5 = host5.get_file_sep()
                        ospl_home5 = ospl_root5 + file_path_separator5 + ospli_name
                        host5.set_ospl_home(ospl_home5)
                        release_script_name5 = start_script_name + ospl_release_name5
                        release_script_names.insert(4, release_script_name5)
                        ospl_release_names.insert(4, ospl_release_name5)
                        ospl_roots.insert(4, ospl_root5)

                    if (host_name6 != empty_field):
                        host6 = test_scenario.define_host(test_root = test_root6, ospl_home = "default", host_name = host_name6, staf_port = staf_port_6)
                        file_path_separator6 = host6.get_file_sep()
                        ospl_home6 = ospl_root6 + file_path_separator6 + ospli_name
                        host6.set_ospl_home(ospl_home6)
                        release_script_name6 = start_script_name + ospl_release_name6
                        release_script_names.insert(5, release_script_name6)
                        ospl_release_names.insert(5, ospl_release_name6)
                        ospl_roots.insert(5, ospl_root6)

                    if (host_name7 != empty_field):
                        host7 = test_scenario.define_host(test_root = test_root7, ospl_home = "default", host_name = host_name7, staf_port = staf_port_7)
                        file_path_separator7 = host7.get_file_sep()
                        ospl_home7 = ospl_root7 + file_path_separator7 + ospli_name
                        host7.set_ospl_home(ospl_home7)
                        release_script_name7 = start_script_name + ospl_release_name7
                        release_script_names.insert(6, release_script_name7)
                        ospl_release_names.insert(6, ospl_release_name7)
                        ospl_roots.insert(6, ospl_root7)

                    if (host_name8 != empty_field):
                        host8 = test_scenario.define_host(test_root = test_root8, ospl_home = "default", host_name = host_name8, staf_port = staf_port_8)
                        file_path_separator3 = host3.get_file_sep()
                        ospl_home8 = ospl_root8 + file_path_separator8 + ospli_name
                        host8.set_ospl_home(ospl_home8)
                        release_script_name8 = start_script_name + ospl_release_name8
                        release_script_names.insert(7, release_script_name8)
                        ospl_release_names.insert(7, ospl_release_name8)
                        ospl_roots.insert(7, ospl_root8)
                    

                    count_of_host = 0
                    for current_host in test_scenario.get_all_hosts():
                        if(current_host.is_windows()):
                            #not implemented
                            current_host.set_release_script_name(release_script_names[count_of_host])
                            current_host.set_release_script_ext(ext_script_name)
                        else:
                            current_host.set_release_script_name(release_script_names[count_of_host])
                            current_host.set_release_script_ext(ext_script_name)
                        count_of_host +=1
                    

                </script>

                <iterate var="host" in="test_scenario.get_all_hosts()">
                    <call function="'InitHost'">host</call>
                </iterate>
                <script>
                    test_scenario.set_test_scenario_initialized(1)
                </script>
            </sequence>
            <!-- Catch all possible exceptions -->
            <catch exception="'...'" typevar="type" var="info">
                <sequence>
                    <script>
                        test_scenario.fail()
                        test_scenario.errors.append("Initializing process error: %s (%s)!"% (type, info))
                    </script>
                </sequence>
            </catch>
        </try>
        <if expr="test_scenario.is_test_scenario_initialized() == 1">
            <sequence>
                <script>
                    ospl_uri_name = "OSPL_URI"
                    ospl_uri_folder_name = "conf"
                    ospl_uri_file_name ="dds1581.xml"
                    java_key = "java"
                    path_to_classes  = "bin" 
                    path_to_libs     = "lib"
                    lib1_name        = "helperxml.jar"
                    lib2_name        = "xmlstream.jar"
                    lib3_name        = "avenue_jacorb.jar"
                    lib4_name        = "avenue_ospl.jar"
                    lib5_name        = "dcpscj.jar"
                    path_to_data     = "data"
                    data_file_name   = "OptInternalFlight_expected.xml"

                    path_separators = []
                    file_separators = []
                    test_homes = []
                    main_class_paths = []
                    javaHomeDirPaths = []
                    start_java_cps = []
                    count_of_host = 0
                    for current_host in test_scenario.get_all_hosts():
                        path_separators.insert(count_of_host, current_host.get_path_sep())
                        file_separators.insert(count_of_host, current_host.get_file_sep())
                        test_home = ospl_roots[count_of_host] + file_separators[count_of_host] + osplo_name + file_separators[count_of_host] + testsuite_name + file_separators[count_of_host] + rbt_name + file_separators[count_of_host] + services_name + file_separators[count_of_host] + durability_name + file_separators[count_of_host] + test_dir_name
                        test_homes.insert(count_of_host, test_home)
                        current_host.set_env_value(ospl_uri_name, "file://" + test_home + file_separators[count_of_host] + ospl_uri_folder_name + file_separators[count_of_host] + ospl_uri_file_name)
                        current_host.set_ospl_uri("file://" + test_home + file_separators[count_of_host] + ospl_uri_folder_name + file_separators[count_of_host] + ospl_uri_file_name)
                        main_class_paths.insert(count_of_host, current_host.get_env_value("CLASSPATH"))
                        current_host.set_ospl_log_dir(current_host.get_ospl_home())
                        if(current_host.is_windows()):
                        #not implemented
                            current_host.set_ospl_bin(current_host.get_ospl_home() + '/exec/' + ospl_release_names[count_of_host] + file_separators[count_of_host])
                        else:
                            current_host.set_ospl_bin(current_host.get_ospl_home() + '/exec/' + ospl_release_names[count_of_host] + file_separators[count_of_host])
                        javaHomeDirPaths.insert(count_of_host, current_host.get_env_value("JAVA_HOME") + file_separators[count_of_host] + "bin" + file_separators[count_of_host])
                        if (current_host.get_env_value("JAVA_HOME") == ""):
                            raise Exception('Error', "Please set JAVA_HOME variable (java installation directory in host %s)" % current_host.get_host_name())

                        if(count_of_host == 0): #master host
                            start_java_cps.insert(count_of_host, test_homes[count_of_host] + file_separators[count_of_host] + path_to_classes + path_separators[count_of_host] + test_homes[count_of_host] + file_separators[count_of_host] + path_to_libs + file_separators[count_of_host] + lib1_name + path_separators[count_of_host] + test_homes[count_of_host] + file_separators[count_of_host] + path_to_libs + file_separators[count_of_host] + lib2_name + path_separators[count_of_host] + test_homes[count_of_host] + file_separators[count_of_host] + path_to_libs + file_separators[count_of_host] + lib3_name + path_separators[count_of_host] + test_homes[count_of_host] + file_separators[count_of_host] + path_to_libs + file_separators[count_of_host] + lib4_name + path_separators[count_of_host] + current_host.get_ospl_home() + file_separators[count_of_host] + "jar" + file_separators[count_of_host] + ospl_release_names[count_of_host] + file_separators[count_of_host] + lib5_name)
                        else:
                            start_java_cps.insert(count_of_host, test_homes[count_of_host] + file_separators[count_of_host] + path_to_classes + path_separators[count_of_host] + test_homes[count_of_host] + file_separators[count_of_host] + path_to_libs + file_separators[count_of_host] + lib3_name + path_separators[count_of_host] + test_homes[count_of_host] + file_separators[count_of_host] + path_to_libs + file_separators[count_of_host] + lib4_name + path_separators[count_of_host] + current_host.get_ospl_home() + file_separators[count_of_host] + "jar" + file_separators[count_of_host] + ospl_release_names[count_of_host] + file_separators[count_of_host] + lib5_name)

                        count_of_host +=1

                    #init of  array of results of tests
                    array_of_test_results = STAXGlobal([])
                    host2_time       = STAXGlobal([])
                    host3_time       = STAXGlobal([])
                    current_log_dir_names = STAXGlobal([])
                    #This class is implementation of entity of results of test
                    class LogResult:
                        """
                        This class is implementation of entity of results of test
                        """
                        def __init__(self, name, log_name, log_dir_name, op_key, param_name):
                            self.name_ = name
                            self.op_key_ = op_key
                            self.log_name_ = log_name
                            self.log_dir_name_ = log_dir_name
                            self.param_name_ = param_name
                        #getting  name of test
                        def get_name(self):
                            """
                            getting  name of test 
                            """
                            return self.name_
                        #getting  log file name of test    
                        def get_log_name(self):
                            """
                            getting  log file name of test    
                            """
                            return self.log_name_
                        #getting  of directory of log file name of test
                        def get_log_dir_name(self):
                            """
                            getting  of directory of log file name of test
                            """
                            return self.log_dir_name_
                        #getting  of operation key
                        def get_op_key(self):
                            """
                            getting  of operation key
                            """
                            return self.op_key_
                        #getting  of parametr name
                        def get_param_name(self):
                            """
                            getting  of parametr name
                            """
                            return self.param_name_
                    #This class extens from Process class, operation key field was added
                    class ExtProcess(Process):
                        """
                        This class extens from Process class, operation key field was added
                        """
                        def __init__(self, process_for_init, op_key):
                            Process.__init__(self, process_for_init.get_command())
                            # The arguments for a process:
                            self.args        = process_for_init.get_args()
                            # The working directory for a process:
                            self.working_dir = process_for_init.get_working_dir()
                            # The log file for a process:
                            self.log_file    = process_for_init.get_log_file()
                            # The process STAF ID:
                            self.id          = process_for_init.get_id()
                            # The process STAF handle:
                            self.handle      = process_for_init.get_handle()
                            # The process port:
                            self.port        = process_for_init.get_port()
                            # Use test sync lib:
                            self.use_test_syn_lib = process_for_init.is_test_sync_lib_used()
                            # The process operation key 
                            self.self_op_key = op_key
                        #gettin operation key for process    
                        def get_op_key(self):
                            """
                            gettin operation key for process
                            """
                            return self.self_op_key
                            
                    #define master writer process
                    count_of_host = 0
                    slave_wait_process = []
                    slave_log_names = []
                    log_file_full_paths = []
                    for current_host in test_scenario.get_all_hosts():
                        current_process = current_host.define_process("no_command")
                        current_host.set_env_value("CLASSPATH", start_java_cps[count_of_host])
                        current_process.set_command(javaHomeDirPaths[count_of_host] + "java")
                        current_process.set_working_dir(test_homes[count_of_host])
                        #first host - master
                        if (count_of_host == 0):
                            master_write_proccess = current_process
                            master_write_proccess.set_args('dds1581.FlightPlansWriter ' + test_homes[count_of_host] + file_separators[count_of_host] + path_to_data + file_separators[count_of_host] + data_file_name )
                            #setting common part of log file name
                            master_log_name = "%s_%s.log" % (current_host.get_host_name(), "writer")
                        else:
                            current_process.set_args('dds1581.Waiter')
                            slave_wait_process.insert(count_of_host, current_process)
                            #setting common part of log file name
                            slave1_log_name = "%s_%s.log" % (current_host.get_host_name(), "waiter")
                            slave_log_names.insert(count_of_host, slave1_log_name)
                        count_of_host +=1
                    
                </script>
                <iterate var="host" in="test_scenario.get_all_hosts()">
                    <sequence>
                        <call function="'CreateTestLogDirectory'">[host, test_name]</call>
                        <script>
                            current_log_dir_name = STAXResult
                            current_log_dir_names.append(current_log_dir_name)
                            time.sleep(1)
                        </script>
                    </sequence>
                </iterate>
                
                <script>      
                    count_of_host = 0
                    for current_host in test_scenario.get_all_hosts():
                        
                        log_file_full_path = current_host.get_test_root() + file_separators[count_of_host] + test_name + file_separators[count_of_host]  + current_log_dir_names[count_of_host]
                        
                        log_file_full_paths.insert(count_of_host, log_file_full_path)
                        #first host - master
                        if (count_of_host == 0):
                            master_write_proccess.set_log_file(log_file_full_path + file_separators[count_of_host] + master_log_name)
                            log_result = LogResult("writer", log_file_full_path + file_separators[count_of_host] + master_log_name, log_file_full_path, "java","")
                        else:
                            slave_wait_process[count_of_host - 1].set_log_file(log_file_full_path + file_separators[count_of_host] + slave_log_names[count_of_host - 1])
                            log_result = LogResult("waiter", log_file_full_path + file_separators[count_of_host] + slave_log_names[count_of_host - 1], log_file_full_path, "java","")
                        array_of_test_results.insert(count_of_host, log_result)
                        count_of_host +=1              
                </script>
                <testcase name = "test_scenario.get_name()">
                    <sequence>
                        <script>
                            starttime = time.time() # record starting test time
                        </script>

                        <!-- start master host and writer -->
                        <call function="'StartOSPL'">test_scenario.get_all_hosts()[0]</call>
                        <call function="'RunProcess'">[test_scenario.get_all_hosts()[0], master_write_proccess, '300s']</call>
                        <call function="'PASS-if-0'">STAXResult</call>

                        <!--  restart master host -->
                        <call function="'StopOSPL'">test_scenario.get_all_hosts()[0]</call>                         
                        <call function="'StartOSPL'">test_scenario.get_all_hosts()[0]</call>

                        <!--  start master host and slave host for T time calculation -->
                        <script>
                            t_starttime = time.time() # record starting T time
                        </script>

                        <!-- start slave host host and waiter -->
                        <call function="'StartOSPL'">test_scenario.get_all_hosts()[1]</call>
                        <call function="'RunProcess'">[test_scenario.get_all_hosts()[1], slave_wait_process[0], '500s']</call>
                        <script>
                            t_endtime = time.time() # record ending T time
                        </script>
                        <call function="'PASS-if-0'">STAXResult</call>
                        <call function="'StopOSPL'">test_scenario.get_all_hosts()[1]</call>                
                        <call function="'StopOSPL'">test_scenario.get_all_hosts()[0]</call>
                    
                        <!-- start master and 2 slave host -->
                        <call function="'StartOSPL'">test_scenario.get_all_hosts()[0]</call>                
                        <sequence>
                            <try>
                                <parallel>
                                    <sequence>
                                        <script>
                                            host2_time.append(time.time()) # record starting time
                                        </script>
                                        <call function="'StartOSPL'">test_scenario.get_all_hosts()[1]</call>
                                        <call function="'RunProcess'">[test_scenario.get_all_hosts()[1], slave_wait_process[0], '500s']</call>
                                        <script>
                                            host2_time.append(time.time()) # record ending time
                                        </script>
                                        <call function="'PASS-if-0'">STAXResult</call>
                                        <call function="'CopyProcessLogToHost'">
                                            [test_scenario.get_all_hosts()[1], test_scenario.get_all_hosts()[0], slave_wait_process[0], current_log_dir_names[0]]
                                        </call>
                                    </sequence>
                                    <sequence>
                                        <script>
                                            host3_time.append(time.time()) # record starting time
                                        </script>
                                        <call function="'StartOSPL'">test_scenario.get_all_hosts()[2]</call>
                                        <call function="'RunProcess'">[test_scenario.get_all_hosts()[2], slave_wait_process[1], '500s']</call>
                                        <script>
                                            host3_time.append(time.time()) # record ending time
                                        </script>
                                        <call function="'PASS-if-0'">STAXResult</call>
                                        <call function="'CopyProcessLogToHost'">
                                            [test_scenario.get_all_hosts()[2], test_scenario.get_all_hosts()[0], slave_wait_process[1], current_log_dir_names[0]]
                                        </call>
                                    </sequence>
                                </parallel>
                            <finally>
                                <sequence>
                                    <parallel>
                                        <sequence>
                                            <call function="'StopOSPL'">test_scenario.get_all_hosts()[1]</call>
                                        </sequence>
                                        <sequence>
                                            <call function="'StopOSPL'">test_scenario.get_all_hosts()[2]</call>
                                        </sequence>
                                    </parallel>
                                    <parallel>
                                        <sequence>
                                            <call function="'MoveSysLogToHost'">
                                                [test_scenario.get_all_hosts()[1], test_scenario.get_all_hosts()[0], current_log_dir_names[0]]
                                            </call>
                                        </sequence>
                                        <sequence>
                                            <call function="'MoveSysLogToHost'">
                                                [test_scenario.get_all_hosts()[2], test_scenario.get_all_hosts()[0], current_log_dir_names[0]]
                                            </call>
                                        </sequence>
                                    </parallel>
                                    <call function="'StopOSPL'">test_scenario.get_all_hosts()[0]</call>
                                    <call function="'MoveSysLogToHost'">
                                        [test_scenario.get_all_hosts()[0], test_scenario.get_all_hosts()[0], current_log_dir_names[0]]
                                    </call>
                                </sequence>
                            </finally>
                            </try>
                        </sequence>
                        

                        <script>
                            stoptime = time.time()
                            common_elapsedSecs = stoptime - starttime
                            t_elapsedSecs = t_endtime - t_starttime
                            # All tests should complete in less that ((T-5 [time paused for alignment to occur])*3)
                            t_elapsedSecs = t_elapsedSecs - 5
                            if (1 > t_elapsedSecs):
                                t_elapsedSecs = 1
                            expected_time = t_elapsedSecs * 3
                            host2_elapsedSecs = host2_time[1] - host2_time[0]
                            host3_elapsedSecs = host3_time[1] - host3_time[0]
                        </script>

                        <message>'Test complete ran for %d seconds' % common_elapsedSecs</message>
                        <message>'T time is %d seconds and expected time is %d seconds: (T time - 5 secs)*3' % (t_elapsedSecs, expected_time)</message>
                        <message>'Test time for host: %s is %d seconds' % (test_scenario.get_all_hosts()[1].get_host_name(), host2_elapsedSecs)</message>
                        <message>'Test time for host: %s is %d seconds' % (test_scenario.get_all_hosts()[2].get_host_name(), host3_elapsedSecs)</message>

                        
                        <if expr="(host2_elapsedSecs > expected_time) or (host3_elapsedSecs > expected_time)">
                            <sequence>
                                <message>'Test failed cause one of hosts test time more than expected (than %d seconds)' % expected_time</message>
                            </sequence>
                        <else>
                            <sequence>
                                <message>'Test passed. All of hosts test time less than expected (than %d seconds)' % expected_time</message>
                            </sequence>
                        </else>
                        </if>
                        
                        <!--<call function="'AnalyzeTestLog'">[log_file_full_path1, array_of_test_results]</call>-->
                        
                    </sequence>
                </testcase>
        </sequence>
        <else>
            <script>
                test_scenario.analyze()
            </script>
        </else>
        </if>
    </sequence>
  </function>
</stax>
