<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE stax SYSTEM "../../stax/stax.dtd">

<!--
    run_dds2617_test.xml - Run the Ping Pong examples test using STAX.
    
    CoFlight requirement eFDPfi_MW_GEN_3 requires that on a given platform, 
    the CoFlight eFDP middleware shall support multiple, 
    and running simultaneously, instances of a system. 
    
    Test description:
    To test this requirement install 3 instances of OpenSplice DDS. 
    Change the port numbers on the Network Service to ensure that each installation is using different port numbers.
    Build a PingPong example in each of the installations.
    Run the PingPong example in each of the installations using the RUN script, 
    making sure that all installations are running the PingPong example simultaneously.

    The expected test results:
        * thePingPong example will run successfully for each of the installations
        
         
    Job Description:
    This job runs the Ping Pong examples using STAX.
    The examples are run within an installed distributions.
-->

<stax>

  <defaultcall function="dds2617_main">
  </defaultcall>

  <function name="dds2617_main" scope="local" >
    <function-prolog>
      This test is for CoFlight requirement eFDPfi_MW_GEN_3.
      CoFlight requirement eFDPfi_MW_GEN_3 requires that on a given platform, 
      the CoFlight eFDP middleware shall support multiple, 
      and running simultaneously, instances of a system. 
      
      Test description:
      To test this requirement install 3 instances of OpenSplice DDS. 
      Change the port numbers on the Network Service to ensure that each installation is using different port numbers.
      Build a PingPong example in each of the installations.
      Run the PingPong example in each of the installations using the RUN script, 
      making sure that all installations are running the PingPong example simultaneously.

      The expected test results:
        * thePingPong example will run successfully for each of the installations
        
      Job Description:
      This job runs the Ping Pong examples using STAX.
      The examples are run within an installed distributions.
    </function-prolog>

    <function-list-args>
      <function-required-arg name="host_name">
        The host name you wish test on in double quotes, use the following format: "host"
      </function-required-arg>
      <function-required-arg name="ospl_home1">
        Location of first instance of OSPL in double quotes and double backslash, use the following format: "dir1\\dir2"
      </function-required-arg>
      <function-required-arg name="ospl_home2">
        Location of second instance of OSPL in double quotes and double backslash, use the following format: "dir1\\dir2"
      </function-required-arg>
      <function-required-arg name="ospl_home3">
        Location of third instance of OSPL in double quotes and double backslash, use the following format: "dir1\\dir2"
      </function-required-arg>
      <function-required-arg name="log_dir">
        The location where the logs will be stored on the host, use the following format: "dir1\\dir2".
      </function-required-arg>
      <function-required-arg name="operation_key1">
        The operation key in double quotes, use the following format: "operation_key1"
      </function-required-arg>
      <function-optional-arg name="operation_key2" default="">
        The operation key in double quotes, use the following format: "operation_key2"
      </function-optional-arg>
      
      <function-optional-arg name="staf_port" default="'6500'">
        The STAF port number on the machine you wish test on in double quotes, use the following format: "port"
      </function-optional-arg>
    </function-list-args>
    
    <sequence>
        <!-- Always call initialise first -->
        <import file="'../../stax/test_ospl.xml'"/>
        <import file="'../../PingPong/pingpong_test_functions.xml'"/>
        
        <try>
            <sequence>
                <call function="'Initialise'" />
        
                <script>
                    #init of  operationn keys names
                    java_key = "Java"
                    c_key = "C"
                    cpp_key = "C++"
                    cpp_on_c_key = "C++OnC"
                    cs_key = "Cs"
                    of_cpp_key = "OF_C++"
                    jo_java_key = "JO_Java"
                    rto_java_key = "RTO_Java"
                    sa_key = "STANDALONE"
                    crb_key = "CORBA"
                    all_key = "ALL"
                    
                    err_msg = ""
                    if((operation_key1 != java_key) and (operation_key1 != c_key) and (operation_key1 != cpp_key) and (operation_key1 != cpp_on_c_key) and (operation_key1 != of_cpp_key) and (operation_key1 != jo_java_key) and (operation_key1 != rto_java_key) and (operation_key1 != sa_key) and (operation_key1 != crb_key) and (operation_key1 != all_key)):
                        err_msg = "operation_key1 should be one of: '%s', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '%s'" % (java_key, c_key, cpp_key, cpp_on_c_key, of_cpp_key, jo_java_key, rto_java_key, sa_key, crb_key, all_key)
                    elif((operation_key2 != java_key) and (operation_key2 != c_key) and (operation_key2 != cpp_key) and (operation_key2 != cpp_on_c_key) and (operation_key2 != of_cpp_key) and (operation_key2 != jo_java_key) and (operation_key2 != rto_java_key) and (operation_key2 != "")):
                        err_msg = "operation_key2 should be one of: '%s', '%s', '%s', '%s', '%s', '%s', '%s' or empty" % (java_key, c_key, cpp_key, cpp_on_c_key, of_cpp_key, jo_java_key, rto_java_key)
                    elif( ((operation_key1 == java_key) or (operation_key1 == c_key) or (operation_key1 == cpp_key) or (operation_key1 == cpp_on_c_key) or (operation_key1 == of_cpp_key) or (operation_key1 == rto_java_key)) and (operation_key2 == "")):
                        err_msg = "operation_key2 should be one of: '%s', '%s', '%s', '%s', '%s', '%s', '%s'" % (java_key, c_key, cpp_key, cpp_on_c_key, of_cpp_key, jo_java_key, rto_java_key)
                    elif( ((operation_key1 == sa_key) or (operation_key1 == crb_key) or (operation_key1 == all_key)) and (operation_key2 != "")):
                        err_msg = "operation_key2 should be empty"
                    
                </script>
                <if expr="err_msg != ''">
                    <call function="'ShowErrorMsgAndThrowException'">[err_msg]</call>
                </if>
                
                <script>
                    from process import Process
                    import time
                    test_name = "DDS2617"
                    test_scenario = BaseTestScenario(test_name,"Test OpenSplice PingPong for CoFlight requirement eFDPfi_MW_GEN_3")
        
                    host1 = test_scenario.define_host(test_root = log_dir, ospl_home = ospl_home1, host_name = host_name, staf_port = staf_port)
                    host2 = test_scenario.define_host(test_root = log_dir, ospl_home = ospl_home2, host_name = host_name, staf_port = staf_port)
                    host3 = test_scenario.define_host(test_root = log_dir, ospl_home = ospl_home3, host_name = host_name, staf_port = staf_port)
                    
                    # Set test case result log file:
                    this_xml_dir = STAXCurrentXMLFile[:STAXCurrentXMLFile.rfind(os.sep)]
                    host1.set_log_dir(this_xml_dir)
                    test_scenario.set_result_file(host1.get_log_dir() + host1.get_file_sep() + test_scenario.get_name() + "_result.log")
               </script>
        
                <iterate var="host" in="test_scenario.get_all_hosts()">
                    <call function="'InitHost'">host</call>
                </iterate>
                
                <script>
                    test_scenario.set_test_scenario_initialized(1)
                </script>
            </sequence>
            <!-- Catch all possible exceptions -->
            <catch exception="'...'" typevar="type" var="info">
                <sequence>
                    <script>
                        test_scenario.fail()
                        test_scenario.errors.append("Initializing process error: %s (%s)!"% (type, info))
                    </script>
                </sequence>
            </catch>
        </try> 

        <if expr="test_scenario.is_test_scenario_initialized() == 1">
            <sequence>
                <script>
                    host1.set_ospl_log_dir(ospl_home1)
                    host2.set_ospl_log_dir(ospl_home2)
                    host3.set_ospl_log_dir(ospl_home3)
                    
                    file_path_separator = host1.get_file_sep()
                    
                    path_separator = host1.get_path_sep()
                    
                    main_class_path1 = host1.get_env_value("CLASSPATH")
                    main_class_path2 = host2.get_env_value("CLASSPATH")
                    main_class_path3 = host3.get_env_value("CLASSPATH")
                    
                    #init of params array for ping test (for detail read README file for ping pong test)
                    array_of_ping_params = ["m","q","s","f","a","t"]
                    #init of quantity of blocks for ping test (for detail read README file for ping pong test)
                    blocks = " 100 "
                    #init of quantity of cycles for ping test (for detail read README file for ping pong test)
                    nof_cycles = " 100 "
                    #init of partition for ping test (for detail read README file for ping pong test)
                    ping_partition = " PongRead "
                    #init of partition for ping test (for detail read README file for ping pong test)
                    pong_partition = " PongWrite"
                    #init of  array of results of tests
                    array_of_test_results1 = STAXGlobal([])
                    array_of_test_results2 = STAXGlobal([])
                    array_of_test_results3 = STAXGlobal([])
                    
                    #init of test directories names
                    standalone_dir_name = "standalone"
                    corba_dir_name = "CORBA"
                    examples_dir_name = "examples"
                    dcps_dir_name = "dcps"
                    open_fusion_dir_name ="OpenFusion"
                    jac_orb_dir_name = "JacORB"
                    rt_orb_dir_name = "RTORB"
                    bld_dir_name = "bld"
                    java_dir_name = "Java"
                    c_dir_name = "C"
                    cpp_dir_name = "C++"
                    cpp_on_c_dir_name = "C++OnC" 
                    cs_dir_name = "CS"
                    release_dir_name = "Release"
                    ping_dir_name = "Ping"
                    pong_dir_name = "Pong"
                    ping_pong_dir_name = "PingPong"
                    exec_dir_name = "exec"
                    #testsuite_dir_name = "testsuite"
                    #tests_dir_name = "tests"
                    #log_dir_name = "Log"
                            
                    #init of path to tests
                    path_to_examples = examples_dir_name + file_path_separator + dcps_dir_name + file_path_separator
                    
                    path_to_standalone = standalone_dir_name + file_path_separator
                    
                    path_to_corba = corba_dir_name + file_path_separator
                    
                    path_to_java_ping_test = java_dir_name + file_path_separator + ping_pong_dir_name + file_path_separator + bld_dir_name
                    
                    path_to_java_pong_test = java_dir_name + file_path_separator + ping_pong_dir_name + file_path_separator + bld_dir_name
                    
                    if(host1.is_windows()):
                        pong_execute_dir_name = pong_dir_name
                    else:
                        pong_execute_dir_name = exec_dir_name
                        
                    if(host1.is_windows()):
                        ping_execute_dir_name = ping_dir_name
                    else:
                        ping_execute_dir_name = exec_dir_name
                        
                    path_to_c_ping_test = c_dir_name + file_path_separator + ping_pong_dir_name + file_path_separator + ping_execute_dir_name
                    
                    path_to_c_pong_test = c_dir_name + file_path_separator + ping_pong_dir_name + file_path_separator + pong_execute_dir_name
                            
                    if(host1.is_windows()):
                        pong_execute_dir_name = pong_dir_name + file_path_separator + release_dir_name
                    else:
                        pong_execute_dir_name = exec_dir_name
                    if(host1.is_windows()):
                        ping_execute_dir_name = ping_dir_name + file_path_separator + release_dir_name
                    else:
                        ping_execute_dir_name = exec_dir_name
                    
                    path_to_cpp_ping_test = cpp_dir_name + file_path_separator + ping_pong_dir_name + file_path_separator + ping_execute_dir_name
                    
                    path_to_cpp_pong_test = cpp_dir_name + file_path_separator + ping_pong_dir_name + file_path_separator + pong_execute_dir_name
                    
                    if(host1.is_windows()):
                        pong_execute_dir_name = pong_dir_name
                    else:
                        pong_execute_dir_name = exec_dir_name
                    if(host1.is_windows()):
                        ping_execute_dir_name = ping_dir_name
                    else:
                        ping_execute_dir_name = exec_dir_name
                    
                    path_to_cppOnC_ping_test = cpp_on_c_dir_name + file_path_separator + ping_pong_dir_name + file_path_separator + ping_execute_dir_name 
                    
                    path_to_cppOnC_pong_test = cpp_on_c_dir_name + file_path_separator + ping_pong_dir_name + file_path_separator + pong_execute_dir_name
                    
                    if(host1.is_windows()):
                        pong_execute_dir_name = pong_dir_name + file_path_separator + release_dir_name
                    else:
                        pong_execute_dir_name = exec_dir_name
                    if(host1.is_windows()):
                        ping_execute_dir_name = ping_dir_name + file_path_separator + release_dir_name
                    else:
                        ping_execute_dir_name = exec_dir_name
                    
                    path_to_of_cpp_ping_test = cpp_dir_name + file_path_separator + open_fusion_dir_name + file_path_separator + ping_pong_dir_name + file_path_separator + ping_execute_dir_name
                    
                    path_to_of_cpp_pong_test = cpp_dir_name + file_path_separator + open_fusion_dir_name + file_path_separator + ping_pong_dir_name + file_path_separator + pong_execute_dir_name
                    
                    path_to_jo_java_ping_test = java_dir_name + file_path_separator + jac_orb_dir_name + ping_pong_dir_name + file_path_separator + bld_dir_name
                    
                    path_to_jo_java_pong_test = java_dir_name + file_path_separator + jac_orb_dir_name + ping_pong_dir_name + file_path_separator + bld_dir_name
                    
                    path_to_rto_java_ping_test = java_dir_name + file_path_separator + rt_orb_dir_name + ping_pong_dir_name + file_path_separator + bld_dir_name
                    
                    path_to_rto_java_pong_test = java_dir_name + file_path_separator + rt_orb_dir_name + ping_pong_dir_name + file_path_separator + bld_dir_name
                    
                    #This class is implementation of entity of results of test
                    class LogResult:
                        """
                        This class is implementation of entity of results of test
                        """
                        def __init__(self, name, log_name, log_dir_name, op_key, param_name):
                            self.name_ = name
                            self.op_key_ = op_key
                            self.log_name_ = log_name
                            self.log_dir_name_ = log_dir_name
                            self.param_name_ = param_name
                        #getting  name of test
                        def get_name(self):
                            """
                            getting  name of test 
                            """
                            return self.name_
                        #getting  log file name of test    
                        def get_log_name(self):
                            """
                            getting  log file name of test    
                            """
                            return self.log_name_
                        #getting  of directory of log file name of test
                        def get_log_dir_name(self):
                            """
                            getting  of directory of log file name of test
                            """
                            return self.log_dir_name_
                        #getting  of operation key
                        def get_op_key(self):
                            """
                            getting  of operation key
                            """
                            return self.op_key_
                        #getting  of parametr name
                        def get_param_name(self):
                            """
                            getting  of parametr name
                            """
                            return self.param_name_
                    #This class extens from Process class, operation key field was added
                    class ExtProcess(Process):
                        """
                        This class extens from Process class, operation key field was added
                        """
                        def __init__(self, process_for_init, op_key):
                            Process.__init__(self, process_for_init.get_command())
                            # The arguments for a process:
                            self.args        = process_for_init.get_args()
                            # The working directory for a process:
                            self.working_dir = process_for_init.get_working_dir()
                            # The log file for a process:
                            self.log_file    = process_for_init.get_log_file()
                            # The process STAF ID:
                            self.id          = process_for_init.get_id()
                            # The process STAF handle:
                            self.handle      = process_for_init.get_handle()
                            # The process port:
                            self.port        = process_for_init.get_port()
                            # Use test sync lib:
                            self.use_test_syn_lib = process_for_init.is_test_sync_lib_used()
                            # The process operation key 
                            self.self_op_key = op_key
                        #gettin operation key for process    
                        def get_op_key(self):
                            """
                            gettin operation key for process
                            """
                            return self.self_op_key
                    #for normalize of length of operation key
                    def normalize_length_of_key(in_key, pong_keys, ping_keys):
                        """
                        for normalize of length of operation key
                        """
                        max_length = 0
                        #search key with max length in pongs keys  
                        for key1 in pong_keys:
                            if len(key1) > max_length:
                                max_length = len(key1)
                        #search key with max length in pings keys  
                        for key2 in ping_keys:
                            if len(key2) > max_length:
                                max_length = len(key2)
                        #getting current length
                        current_length = len(in_key)
                        #normalize length
                        if max_length > current_length:
                            for i in range(max_length - current_length + 1):
                                in_key = in_key + "_"
                        return in_key
                        
                    
                    # set up keys list  for the processes
                    pong_keys = []
                    ping_keys = []
                    #setting arrays of operation keys by key
                    if ((operation_key1 == sa_key) or (operation_key1 == crb_key) or (operation_key1 == all_key)):
                        if operation_key1 == sa_key:
                            pong_keys.append(java_key)
                            pong_keys.append(c_key)
                            pong_keys.append(cpp_key)
                            pong_keys.append(cpp_on_c_key)
                            #pong_keys.append(cs_key)
                            ping_keys.append(java_key)
                            ping_keys.append(c_key)
                            ping_keys.append(cpp_key)
                            ping_keys.append(cpp_on_c_key)
                            #ping_keys.append(cs_key)
                            
                        if operation_key1 == crb_key:
                            pong_keys.append(jo_java_key)
                            pong_keys.append(rto_java_key)
                            pong_keys.append(of_cpp_key)
                            
                            ping_keys.append(jo_java_key)
                            ping_keys.append(rto_java_key)
                            ping_keys.append(of_cpp_key)
                            
                        if (operation_key1 == all_key):
                            pong_keys.append(java_key)
                            pong_keys.append(c_key)
                            pong_keys.append(cpp_key)
                            pong_keys.append(cpp_on_c_key)
                            pong_keys.append(jo_java_key)
                            pong_keys.append(rto_java_key)
                            pong_keys.append(of_cpp_key)
                            
                            ping_keys.append(java_key)
                            ping_keys.append(c_key)
                            ping_keys.append(cpp_key)
                            ping_keys.append(cpp_on_c_key)
                            ping_keys.append(jo_java_key)
                            ping_keys.append(rto_java_key)
                            ping_keys.append(of_cpp_key)
                        operation_key2 = ""
                    else:
                        pong_keys.append(operation_key1)
                        ping_keys.append(operation_key2)
                    
                    if operation_key2 == "":
                        operation_key2 = "no_key"
                    
                    #setting path for commands for tests
                    full_path1 = ospl_home1 + file_path_separator + path_to_examples
                    full_path2 = ospl_home2 + file_path_separator + path_to_examples
                    full_path3 = ospl_home3 + file_path_separator + path_to_examples
                    
                    path_to_sa_classes = path_to_standalone + path_to_java_ping_test
                    
                    path_to_classes = ping_pong_dir_name + file_path_separator + bld_dir_name
                    
                    path_to_java_lib = "jar" + file_path_separator + "dcpssaj.jar"
                    
                    path_to_crb_java = path_to_corba + java_dir_name + file_path_separator
                    
                    path_to_crb_c = path_to_corba + cpp_dir_name + file_path_separator
                    
                    start_c_sa1 = ospl_home1 + file_path_separator + path_to_examples + path_to_standalone
                    start_c_sa2 = ospl_home2 + file_path_separator + path_to_examples + path_to_standalone
                    start_c_sa3 = ospl_home3 + file_path_separator + path_to_examples + path_to_standalone
                    
                    start_java_sa1 = full_path1 + path_to_sa_classes + path_separator + ospl_home1 + file_path_separator + path_to_java_lib 
                    start_java_sa2 = full_path2 + path_to_sa_classes + path_separator + ospl_home2 + file_path_separator + path_to_java_lib
                    start_java_sa3 = full_path3 + path_to_sa_classes + path_separator + ospl_home3 + file_path_separator + path_to_java_lib 
                    
                    start_java_jo_1 = full_path1 + path_to_crb_java + jac_orb_dir_name + file_path_separator +path_to_classes + path_separator + ospl_home1 + file_path_separator + path_to_java_lib
                    start_java_jo_2 = full_path2 + path_to_crb_java + jac_orb_dir_name + file_path_separator +path_to_classes + path_separator + ospl_home2 + file_path_separator + path_to_java_lib
                    start_java_jo_3 = full_path3 + path_to_crb_java + jac_orb_dir_name + file_path_separator +path_to_classes + path_separator + ospl_home3 + file_path_separator + path_to_java_lib
                    
                    start_java_rto_1 = full_path1 + path_to_crb_java + rt_orb_dir_name + file_path_separator +path_to_classes + path_separator + ospl_home1 + file_path_separator + path_to_java_lib
                    start_java_rto_2 = full_path2 + path_to_crb_java + rt_orb_dir_name + file_path_separator +path_to_classes + path_separator + ospl_home2 + file_path_separator + path_to_java_lib
                    start_java_rto_3 = full_path3 + path_to_crb_java + rt_orb_dir_name + file_path_separator +path_to_classes + path_separator + ospl_home2 + file_path_separator + path_to_java_lib
                    
                </script>
                <!-- call function="'CreateTestLogDirectory'">[host1, test_scenario.get_name()]</call>
                <script>
                    current_log_dir_name1 = STAXResult
                    time.sleep(1)
                </script>
                <call function="'CreateTestLogDirectory'">[host2, test_scenario.get_name()]</call>
                <script>
                    current_log_dir_name2 = STAXResult
                    time.sleep(1)
                </script>
                <call function="'CreateTestLogDirectory'">[host3, test_scenario.get_name()]</call-->
                <script>
                    current_log_dir_name3 = STAXResult
                    
                    pongs_array_lenght = 0
                    pings_array_lenght = 0
                    #init arrays of pingpong processes tests
                    pongs1 = []
                    pongs2 = []
                    pongs3 = []
                    pings1 = []
                    pings2 = []
                    pings3 = []
                    
                    #setting commands for tests by keys
                    for pong_key in pong_keys: 
                        pongs_array_lenght += 1
                        next_pong1 = host1.define_process("no_command")
                        next_pong2 = host2.define_process("no_command")
                        next_pong3 = host3.define_process("no_command")
                        
                        if pong_key == java_key:
                            #setting command
                            cp = main_class_path1 + path_separator + start_java_sa1
                            host1.set_env_value("CLASSPATH", cp)
                            cp = main_class_path2 + path_separator + start_java_sa2
                            host2.set_env_value("CLASSPATH", cp)
                            cp = main_class_path3 + path_separator + start_java_sa3
                            host3.set_env_value("CLASSPATH", cp)
                            next_pong1.set_command("java")
                            next_pong1.set_args("pong")
                            next_pong2.set_command("java")
                            next_pong2.set_args("pong")
                            next_pong3.set_command("java")
                            next_pong3.set_args("pong")
        
                        if pong_key == c_key:
                            next_pong1.set_command(start_c_sa1 + path_to_c_pong_test + file_path_separator + "pong")
                            next_pong1.set_working_dir(start_c_sa1 + path_to_c_pong_test)
                            next_pong2.set_command(start_c_sa2 + path_to_c_pong_test + file_path_separator + "pong")
                            next_pong2.set_working_dir(start_c_sa2 + path_to_c_pong_test)
                            next_pong3.set_command(start_c_sa3 + path_to_c_pong_test + file_path_separator + "pong")
                            next_pong3.set_working_dir(start_c_sa3 + path_to_c_pong_test)
                            
                        if pong_key == cpp_key:
                            next_pong1.set_command(start_c_sa1 + path_to_cpp_pong_test + file_path_separator + "pong")
                            next_pong1.set_working_dir(start_c_sa1 + path_to_cpp_pong_test)
                            next_pong2.set_command(start_c_sa2 + path_to_cpp_pong_test + file_path_separator + "pong")
                            next_pong2.set_working_dir(start_c_sa2 + path_to_cpp_pong_test)
                            next_pong3.set_command(start_c_sa3 + path_to_cpp_pong_test + file_path_separator + "pong")
                            next_pong3.set_working_dir(start_c_sa3 + path_to_cpp_pong_test)
                        
                        if pong_key == cpp_on_c_key:
                            common_path = path_to_cppOnC_pong_test + file_path_separator + "pong"
                            next_pong1.set_command(start_c_sa1 + common_path)
                            next_pong1.set_working_dir(start_c_sa1 + path_to_cppOnC_pong_test)
                            next_pong2.set_command(start_c_sa2 + common_path)
                            next_pong2.set_working_dir(start_c_sa2 + path_to_cppOnC_pong_test)
                            next_pong3.set_command(start_c_sa3 + common_path)
                            next_pong3.set_working_dir(start_c_sa3 + path_to_cppOnC_pong_test)
                                    
                        if pong_key == of_cpp_key:
                            common_path = file_path_separator + path_to_examples + path_to_corba + path_to_of_cpp_pong_test
                            next_pong1.set_command(ospl_home1 + common_path + file_path_separator + "pong")
                            next_pong1.set_working_dir(ospl_home1 + common_path)
                            next_pong2.set_command(ospl_home2 + common_path + file_path_separator + "pong")
                            next_pong2.set_working_dir(ospl_home2 + common_path)
                            next_pong3.set_command(ospl_home3 + common_path + file_path_separator + "pong")
                            next_pong3.set_working_dir(ospl_home3 + common_path)
                            
                        if pong_key == jo_java_key:
                            cp = main_class_path1 + path_separator + start_java_jo_1
                            host1.set_env_value("CLASSPATH", cp)
                            next_pong1.set_command("java")
                            next_pong1.set_args("pong")
                            cp = main_class_path2 + path_separator + start_java_jo_2
                            host2.set_env_value("CLASSPATH", cp)
                            next_pong2.set_command("java")
                            next_pong2.set_args("pong")
                            cp = main_class_path3 + path_separator + start_java_jo_3
                            host3.set_env_value("CLASSPATH", cp)
                            next_pong3.set_command("java")
                            next_pong3.set_args("pong")
                            
                        if pong_key == rto_java_key:
                            cp = main_class_path1 + path_separator + start_java_rto_1
                            host1.set_env_value("CLASSPATH", cp)
                            next_pong1.set_command("java")
                            next_pong1.set_args("pong")
                            cp = main_class_path2 + path_separator + start_java_rto_2
                            host2.set_env_value("CLASSPATH", cp)
                            next_pong2.set_command("java")
                            next_pong2.set_args("pong")
                            cp = main_class_path3 + path_separator + start_java_rto_3
                            host3.set_env_value("CLASSPATH", cp)
                            next_pong3.set_command("java")
                            next_pong3.set_args("pong")
                        
                        next_pong_ext1 = ExtProcess(next_pong1, pong_key)
                        next_pong_ext2 = ExtProcess(next_pong2, pong_key)
                        next_pong_ext3 = ExtProcess(next_pong3, pong_key)
                        pongs1.append(next_pong_ext1)
                        pongs2.append(next_pong_ext2)
                        pongs3.append(next_pong_ext3)
                    
                    #setting commands for tests by keys
                    for ping_key in ping_keys:
                        pings_array_lenght += 1
                        next_ping1 = host1.define_process("no_command")
                        next_ping2 = host2.define_process("no_command")
                        next_ping3 = host3.define_process("no_command")
                        
                        if ping_key == java_key:
                            cp = main_class_path1 + path_separator + start_java_sa1
                            host1.set_env_value("CLASSPATH", cp)
                            next_ping1.set_command("java")
                            next_ping1.set_args("ping")
                            cp = main_class_path2 + path_separator + start_java_sa2
                            host2.set_env_value("CLASSPATH", cp)
                            next_ping2.set_command("java")
                            next_ping2.set_args("ping")
                            cp = main_class_path3 + path_separator + start_java_sa3
                            host3.set_env_value("CLASSPATH", cp)
                            next_ping3.set_command("java")
                            next_ping3.set_args("ping")
                            
                        if ping_key == c_key:
                            next_ping1.set_command(start_c_sa1 + path_to_c_ping_test + file_path_separator + "ping")
                            next_ping1.set_working_dir(start_c_sa1 + path_to_c_ping_test)
                            next_ping2.set_command(start_c_sa2 + path_to_c_ping_test + file_path_separator + "ping")
                            next_ping2.set_working_dir(start_c_sa2 + path_to_c_ping_test)
                            next_ping3.set_command(start_c_sa3 + path_to_c_ping_test + file_path_separator + "ping")
                            next_ping3.set_working_dir(start_c_sa3 + path_to_c_ping_test)
                            
                        if ping_key == cpp_key:
                            next_ping1.set_command(start_c_sa1 + path_to_cpp_ping_test + file_path_separator + "ping")
                            next_ping1.set_working_dir(start_c_sa1+ path_to_cpp_ping_test)    
                            next_ping2.set_command(start_c_sa2 + path_to_cpp_ping_test + file_path_separator + "ping")
                            next_ping2.set_working_dir(start_c_sa2+ path_to_cpp_ping_test)    
                            next_ping3.set_command(start_c_sa3 + path_to_cpp_ping_test + file_path_separator + "ping")
                            next_ping3.set_working_dir(start_c_sa3+ path_to_cpp_ping_test)    
                        
                        if ping_key == cpp_on_c_key:
                            next_ping1.set_command(start_c_sa1 + path_to_cppOnC_ping_test + file_path_separator + "ping")
                            next_ping1.set_working_dir(start_c_sa1 + path_to_cppOnC_ping_test)
                            next_ping2.set_command(start_c_sa2 + path_to_cppOnC_ping_test + file_path_separator + "ping")
                            next_ping2.set_working_dir(start_c_sa2 + path_to_cppOnC_ping_test)
                            next_ping3.set_command(start_c_sa3 + path_to_cppOnC_ping_test + file_path_separator + "ping")
                            next_ping3.set_working_dir(start_c_sa3 + path_to_cppOnC_ping_test)
                                            
                        if ping_key == of_cpp_key:
                            common_path = file_path_separator + path_to_examples + path_to_corba + path_to_of_cpp_ping_test
                            next_ping1.set_command(ospl_home1 + common_path + file_path_separator +"ping")
                            next_ping1.set_working_dir(ospl_home1 + common_path)
                            next_ping2.set_command(ospl_home2 + common_path + file_path_separator +"ping")
                            next_ping2.set_working_dir(ospl_home2 + common_path)
                            next_ping3.set_command(ospl_home3 + common_path + file_path_separator +"ping")
                            next_ping3.set_working_dir(ospl_home3 + common_path)
                            
                        if ping_key == jo_java_key:
                            cp = main_class_path1 + path_separator + start_java_jo_1
                            host1.set_env_value("CLASSPATH", cp)
                            next_ping1.set_command("java")
                            next_ping1.set_args("ping")
                            cp = main_class_path2 + path_separator + start_java_jo_2
                            host2.set_env_value("CLASSPATH", cp)
                            next_ping2.set_command("java")
                            next_ping2.set_args("ping")
                            cp = main_class_path3 + path_separator + start_java_jo_3
                            host3.set_env_value("CLASSPATH", cp)
                            next_ping3.set_command("java")
                            next_ping3.set_args("ping")
                            
                        if ping_key == rto_java_key:
                            cp = main_class_path1 + path_separator + start_java_rto_1
                            host1.set_env_value("CLASSPATH", cp)
                            next_ping1.set_command("java")
                            next_ping1.set_args("ping")
                            cp = main_class_path2 + path_separator + start_java_rto_2
                            host2.set_env_value("CLASSPATH", cp)
                            next_ping2.set_command("java")
                            next_ping2.set_args("ping")
                            cp = main_class_path3 + path_separator + start_java_rto_3
                            host3.set_env_value("CLASSPATH", cp)
                            next_ping3.set_command("java")
                            next_ping3.set_args("ping")
                        
                        next_ping_ext1 = ExtProcess(next_ping1, ping_key)
                        next_ping_ext2 = ExtProcess(next_ping2, ping_key)
                        next_ping_ext3 = ExtProcess(next_ping3, ping_key)
                        pings1.append(next_ping_ext1)
                        pings2.append(next_ping_ext2)
                        pings3.append(next_ping_ext3)
                                    
                    
                starttime = time.time() # record starting time
                </script>
                <testcase name = "test_scenario.get_name()" >
                 
                <sequence>
                    <script>
                        time_stamp = time.strftime("%d-%m-%Y-%H-%M-%S", time.localtime())
                        log_subdir1 = test_name + file_path_separator + time_stamp
                        host1.set_log_dir(host1.get_test_root() + file_path_separator + log_subdir1)
                        
                        time.sleep(1)
                        time_stamp = time.strftime("%d-%m-%Y-%H-%M-%S", time.localtime())
                        log_subdir2 = test_name + file_path_separator + time_stamp
                        host2.set_log_dir(host2.get_test_root() + file_path_separator + log_subdir2)
                        
                        time.sleep(1)
                        time_stamp = time.strftime("%d-%m-%Y-%H-%M-%S", time.localtime())
                        log_subdir3 = test_name + file_path_separator + time_stamp
                        host3.set_log_dir(host3.get_test_root() + file_path_separator + log_subdir3)
                        
                        
                        full_log_dir_path1 = host1.get_log_dir()
                        full_log_dir_path2 = host2.get_log_dir()
                        full_log_dir_path3 = host3.get_log_dir()
                        
                        host1.set_ospl_log_dir(host1.get_log_dir())
                        host2.set_ospl_log_dir(host2.get_log_dir())
                        host3.set_ospl_log_dir(host3.get_log_dir())
                        
                    </script>
                    
                    <try>
                        <sequence>
                            <iterate var="host" in="test_scenario.get_all_hosts()">
                                <!-- Create log directory on the host -->
                                <call function="'CreateLogDirOnHost'">host</call>
                            </iterate>
                            
                            <iterate var="host" in="test_scenario.get_all_hosts()">
                                <call function="'StartOSPL'">host</call>
                            </iterate>
                            
                            
                            <loop var="current_pong_index" from="0" to="pongs_array_lenght - 1">
                                <sequence>
                                    <script>
                                        a_pong1 = pongs1[current_pong_index]
                                        a_pong2 = pongs2[current_pong_index]
                                        a_pong3 = pongs3[current_pong_index]
                                        
                                        start_pong_args1 = a_pong1.get_args()
                                        start_pong_args2 = a_pong2.get_args()
                                        start_pong_args3 = a_pong3.get_args()
                                    </script>
                                    <loop var="current_ping_index" from="0" to="pings_array_lenght - 1">
                                        <sequence>
                                            <script>
                                                a_ping1 = pings1[current_ping_index]
                                                a_ping2 = pings2[current_ping_index]
                                                a_ping3 = pings3[current_ping_index]
                                                
                                                start_ping_args1 = a_ping1.get_args()
                                                start_ping_args2 = a_ping2.get_args()
                                                start_ping_args3 = a_ping3.get_args()
                                            </script>
                                            
                                            <script>
                                                #normalize keys length
                                                pong_name_key = normalize_length_of_key(a_pong1.get_op_key(), pong_keys, ping_keys)
                                                ping_name_key = normalize_length_of_key(a_ping1.get_op_key(), pong_keys, ping_keys)
                                                
                                                #setting common part of log file name
                                                start_log_name = "%s_%s_to_%s_%s" % (host1.get_host_name(), pong_name_key, host1.get_host_name(), ping_name_key)
                                                pong_log_name = start_log_name + "___pong.log"
                                                
                                                a_pong1.set_args(start_pong_args1 + ping_partition + pong_partition) 
                                                a_pong2.set_args(start_pong_args2 + ping_partition + pong_partition) 
                                                a_pong3.set_args(start_pong_args3 + ping_partition + pong_partition) 
                                                
                                                #setting pong log filename 
                                                a_pong1.set_log_file(full_log_dir_path1 + file_path_separator + pong_log_name)
                                                a_pong2.set_log_file(full_log_dir_path2 + file_path_separator + pong_log_name)
                                                a_pong3.set_log_file(full_log_dir_path3 + file_path_separator + pong_log_name)
                                                
                                                
                                                log_result1 = LogResult("pong", full_log_dir_path1 + file_path_separator + pong_log_name, full_log_dir_path1, a_pong1.get_op_key(),"")
                                                if array_of_test_results1.count(log_result1) == 0:
                                                    array_of_test_results1.append(log_result1)
                                                
                                                log_result2 = LogResult("pong", full_log_dir_path2 + file_path_separator + pong_log_name, full_log_dir_path2, a_pong2.get_op_key(),"")
                                                if array_of_test_results2.count(log_result2) == 0:
                                                    array_of_test_results2.append(log_result2)
                                                
                                                log_result3 = LogResult("pong", full_log_dir_path3 + file_path_separator + pong_log_name, full_log_dir_path3, a_pong3.get_op_key(),"")
                                                if array_of_test_results3.count(log_result3) == 0:
                                                    array_of_test_results3.append(log_result3)
                                                
                                                
                                            </script>
        
                                            <parallel>
                                                <sequence>
                                                   <call function="'RunProcess'">[host1, a_pong1, '300s']</call>
                                                   <call function="'PASS-if-0'">STAXResult</call>
                                                </sequence>
                                                <sequence>
                                                    <call function="'RunProcess'">[host2, a_pong2, '300s']</call>
                                                    <call function="'PASS-if-0'">STAXResult</call>
                                                </sequence>
                                                <sequence>
                                                    <call function="'RunProcess'">[host3, a_pong3, '300s']</call>
                                                    <call function="'PASS-if-0'">STAXResult</call>
                                                </sequence>
                                            
        
                                                <sequence>
                                                    <loop var="index" from="0" to="len(array_of_ping_params) - 1 ">
                                                        <sequence>
                                                            <script>
                                                                first_key = a_pong1.get_op_key()
                                                                if (((first_key == java_key ) or (first_key == rto_java_key) or (first_key == jo_java_key)) and (index == 0)):
                                                                    #wait  (in some case pong process not start at once)
                                                                    time.sleep(5)
                                                                
                                                                #addition of args for ping tests
                                                                a_ping1.set_args(start_ping_args1 + blocks + nof_cycles  + str(array_of_ping_params[index]) + ping_partition + pong_partition)
                                                                a_ping2.set_args(start_ping_args2 + blocks + nof_cycles  + str(array_of_ping_params[index]) + ping_partition + pong_partition)
                                                                a_ping3.set_args(start_ping_args3 + blocks + nof_cycles  + str(array_of_ping_params[index]) + ping_partition + pong_partition)
                                                                
                                                                ping_log_name = start_log_name + "_" + array_of_ping_params[index] +  "_ping.log"
                                                                #setting ping log filename
                                                                a_ping1.set_log_file(full_log_dir_path1 + file_path_separator + ping_log_name)
                                                                a_ping2.set_log_file(full_log_dir_path2 + file_path_separator + ping_log_name)
                                                                a_ping3.set_log_file(full_log_dir_path3 + file_path_separator + ping_log_name)
                                                                
                                                                #in case 't' params we dont add log file in array cause this last process  - terminated ping process
                                                                if (array_of_ping_params[index] != 't'):
                                                                    log_result1 = LogResult("ping", full_log_dir_path1 + file_path_separator + ping_log_name, full_log_dir_path1, a_ping1.get_op_key(),str(array_of_ping_params[index]))
                                                                    array_of_test_results1.append(log_result1)
                                                                    log_result2 = LogResult("ping", full_log_dir_path2 + file_path_separator + ping_log_name, full_log_dir_path2, a_ping2.get_op_key(),str(array_of_ping_params[index]))
                                                                    array_of_test_results2.append(log_result2)
                                                                    log_result3 = LogResult("ping", full_log_dir_path3 + file_path_separator + ping_log_name, full_log_dir_path3, a_ping3.get_op_key(),str(array_of_ping_params[index]))
                                                                    array_of_test_results3.append(log_result3)
                                                                else:
                                                                    a_ping1.set_log_file("")
                                                                    a_ping2.set_log_file("")
                                                                    a_ping3.set_log_file("")
                                                                
                                                            </script>
                                                            
                                                            
                                                            <if expr="array_of_ping_params[index] != 't'">
                                                                <parallel>
                                                                    <sequence>
                                                                        <call function="'RunProcess'">[host1, a_ping1]</call>
                                                                        <call function="'PASS-if-0'">STAXResult</call>
                                                                    </sequence>
                                                                    <sequence>
                                                                        <call function="'RunProcess'">[host2, a_ping2]</call>
                                                                        <call function="'PASS-if-0'">STAXResult</call>
                                                                    </sequence>
                                                                    <sequence>
                                                                        <call function="'RunProcess'">[host3, a_ping3]</call>
                                                                        <call function="'PASS-if-0'">STAXResult</call>
                                                                    </sequence>
                                                                </parallel>
                                                            <else>
                                                                <parallel>
                                                                    <sequence>
                                                                       <call function="'RunProcess'">[host1, a_ping1, '10s']</call>
                                                                        <call function="'PASS-if-0'">STAXResult</call>
                                                                    </sequence>
                                                                    <sequence>
                                                                        <call function="'RunProcess'">[host2, a_ping2, '10s']</call>
                                                                        <call function="'PASS-if-0'">STAXResult</call>
                                                                    </sequence>
                                                                    <sequence>
                                                                        <call function="'RunProcess'">[host3, a_ping3, '10s']</call>
                                                                        <call function="'PASS-if-0'">STAXResult</call>
                                                                    </sequence>
                                                                </parallel>
                                                            </else>
                                                            </if>
                                                        </sequence>
                                                    </loop>
                                                </sequence>
                                            
                                            </parallel>
                                            
                                        </sequence>
                                    </loop>
                                </sequence>
                            </loop>
                            
                            
                            
                        </sequence>
                    <finally>
                        <sequence>
                            <iterate var="host" in="test_scenario.get_all_hosts()">
                                <call function="'StopOSPL'">host</call>
                            </iterate>
                        </sequence>
                    </finally>
                    </try>
        
                    <script>
                        stoptime = time.time()
                        elapsedSecs = stoptime - starttime
                    </script>
        
                    <message>'Test complete ran for %d seconds' % elapsedSecs</message>
                    
                    <call function="'AnalyzeTestLog'">[full_log_dir_path1, array_of_test_results1, blocks]</call>
                    <call function="'AnalyzeTestLog'">[full_log_dir_path2, array_of_test_results2, blocks]</call>
                    <call function="'AnalyzeTestLog'">[full_log_dir_path3, array_of_test_results3, blocks]</call>
                    
                  </sequence>
                  
                </testcase>
            </sequence>
        <else>
             <script>
                test_scenario.analyze()
            </script>
        </else>
        </if>
    
    </sequence>
  </function>
</stax>
