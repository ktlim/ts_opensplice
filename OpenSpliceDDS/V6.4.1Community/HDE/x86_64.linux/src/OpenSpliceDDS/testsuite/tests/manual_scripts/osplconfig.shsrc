#!/bin/bash

# Care must be taken when editing this file since tabs and spaces at end of
# lines are very important here and should not be removed.

# This file must only be sourced.
if [ -z "$BASH_SOURCE" -o "$0" = "$BASH_SOURCE" ]; then
    echo "ERROR: Only source '$0' file"
    exit 1
fi

# Source current settings.
. "$(dirname "$BASH_SOURCE")/osplsettings.shsrc" "$@"
. "$(dirname "$BASH_SOURCE")/ospltestutils.shsrc" "$@"

function orig_ospl_config ()
{
    if [ $# -ne 2 ]; then
        error_trace "ERROR: Wrong number of arguments to ${FUNCNAME[0]}"
        return 1
    fi

    local runtype="$1" && test -n "$runtype" || error_trace "ERROR: Parameter \$1 is empty" || return 1
    local transport="$2" && test -n "$transport" || error_trace "ERROR: Parameter \$2 is empty" || return 1

    if [ "$runtype" = "sp" ]; then
        if [ "$transport" = 'broadcast' -o "$transport" = 'multicast' ]; then
            echo "ospl_sp_nativeRT.xml_orig"
        elif [ "$transport" = 'ddsi2' ]; then
            echo "ospl.xml_orig"
        else
            error_help "ERROR: Unknown transport '$transport' for '$runtype'"
            return 1
        fi
    elif [ "$runtype" = "shm" ]; then
        if [ "$transport" = 'broadcast' -o "$transport" = 'multicast' ]; then
            echo "ospl_shmem_nativeRT.xml_orig"
        elif [ "$transport" = 'ddsi2' ]; then
            echo "ospl_shmem_ddsi.xml_orig"      
        else
            error_help "ERROR: Unknown transport '$transport' for '$runtype'"
            return 1
        fi
    else
        error_help "ERROR: Unknown transport '$runtype'"
        return 1
    fi
}

function my_ospl_config ()
{
    if [ $# -ne 3 ]; then
        error_trace "ERROR: Wrong number of arguments to ${FUNCNAME[0]}"
        return 1
    fi

    local machine="$1" && test -n "$machine" || error_trace "ERROR: Parameter \$1 is empty" || return 1
    local runtype="$2" && test -n "$runtype" || error_trace "ERROR: Parameter \$2 is empty" || return 1
    local transport="$3" && test -n "$transport" || error_trace "ERROR: Parameter \$3 is empty" || return 1

    echo "ospl_${machine}_${USER}_${runtype}_${transport}.xml"
}

function osplconfig_current_path ()
{  
  echo "$PWD/$(dirname "$BASH_SOURCE")"
}

function create_ospl_config ()
{
    if [ $# -ne 5 ]; then
        error_trace "ERROR: Wrong number of arguments to ${FUNCNAME[0]}"
        return 1
    fi

    local machine="$1" && test -n "$machine" || error_trace "ERROR: Parameter \$1 is empty" || return 1
    local runtype="$2" && test -n "$runtype" || error_trace "ERROR: Parameter \$2 is empty" || return 1
    local transport="$3" && test -n "$transport" || error_trace "ERROR: Parameter \$3 is empty" || return 1
    local my_port="$4" && test -n "$my_port" || error_trace "ERROR: Parameter \$4 is empty" || return 1
    local domain_suffix="$5" && test -n "$domain_suffix" || error_trace "ERROR: Parameter \$5 is empty" || return 1

    local ospl_distver my_ospl
    ospl_distver="$(remote_var_value "$machine" OSPL_DISTVER)" || return 1
    my_ospl="$(my_ospl_config "$machine" "$runtype" "$transport")" || return 1

    # On Solaris we need to use gpatch instead of patch
    if [ "$(uname)" != 'SunOS' ]; then
       patch=patch
    else
       patch=gpatch
    fi
 
    # n=$RANDOM

    # let domainID=$(( n %= 200 ))

    if [ "$transport" = 'broadcast' -o "$transport" = 'multicast' ]; then
        local besteffort_port="$my_port" reliable_port discovery_port
        let "reliable_port=besteffort_port+10"
        let "discovery_port=besteffort_port+20"
        local interface="$transport"
        if [ "$transport" = 'multicast' ]; then
            if [ -z "$MY_MCAST_ADDR" -o "$MY_MCAST_ADDR" = '0.0.0.0' ]; then
                error_help "ERROR: MY_MCAST_ADDR is not correctly set to '$MY_MCAST_ADDR'"
                return 1
            fi
            interface="$MY_MCAST_ADDR"
        fi

        if [ "$(echo "$ospl_distver" | sed -e 's|\..*||')" = 'V5' ]; then
            $patch -p0 <<_EOF
--- $(osplconfig_current_path)/$my_ospl	2011-01-01 12:00:00.000000000 +0000
+++ $(osplconfig_current_path)/$my_ospl	2011-01-01 12:00:00.000000000 +0000
@@ -1,6 +1,6 @@
 <OpenSplice>
    <Domain>
-      <Name>OpenSplice${ospl_distver}_default</Name>
+      <Name>OpenSplice${ospl_distver}_${USER}_${transport}_${domain_suffix}</Name>
       <Database>
          <Size>10485760</Size>
       </Database>
@@ -16,18 +16,18 @@
    </Domain>
    <NetworkService name="networking">
       <Partitioning>
-         <GlobalPartition Address="broadcast"/>
+         <GlobalPartition Address="$interface"/>
       </Partitioning>
       <Channels>
          <Channel default="true" enabled="true" name="BestEffort" reliable="false">
-            <PortNr>53400</PortNr>
+            <PortNr>$besteffort_port</PortNr>
          </Channel>
          <Channel enabled="true" name="Reliable" reliable="true">
-            <PortNr>53410</PortNr> 
+            <PortNr>$reliable_port</PortNr> 
          </Channel>
       </Channels>
       <Discovery enabled="true">
-         <PortNr>53420</PortNr>
+         <PortNr>$discovery_port</PortNr>
       </Discovery>
    </NetworkService>
    <DurabilityService name="durability">
_EOF
        elif [ "$(echo "$ospl_distver" | sed -e 's|\..*||')" = 'V6' ]; then
            if [ "$runtype" = "sp" ]; then
                $patch -p0 <<_EOF
--- $(osplconfig_current_path)/$my_ospl	2011-01-01 12:00:00.000000000 +0000
+++ $(osplconfig_current_path)/$my_ospl 2011-01-01 12:00:00.000000000 +0000
@@ -1,7 +1,7 @@
 <OpenSplice>
    <Domain>
-      <Name>ospl_sp_nativeRT</Name>
-      <Id>0</Id>
+      <Name>${ospl_distver}_ospl_sp_nativeRT_${transport}_${domain_suffix}</Name>
+      <Id>129</Id>
       <SingleProcess>true</SingleProcess>
       <Service name="networking">
          <Command>networking</Command>
@@ -15,18 +15,18 @@
    </Domain>
    <NetworkService name="networking">
       <Partitioning>
-         <GlobalPartition Address="broadcast"/>
+         <GlobalPartition Address="$interface"/>
       </Partitioning>
       <Channels>
          <Channel default="true" enabled="true" name="BestEffort" reliable="false">
-            <PortNr>54400</PortNr>
+            <PortNr>$besteffort_port</PortNr>
          </Channel>
          <Channel enabled="true" name="Reliable" reliable="true">
-            <PortNr>54410</PortNr>
+            <PortNr>$reliable_port</PortNr>
          </Channel>
       </Channels>
       <Discovery enabled="true">
-         <PortNr>54420</PortNr>
+         <PortNr>$discovery_port</PortNr>
       </Discovery>
    </NetworkService>
    <DurabilityService name="durability">
_EOF
            elif [ "$runtype" = "shm" ]; then
                $patch -p0 <<_EOF
--- $(osplconfig_current_path)/$my_ospl	2011-01-01 12:00:00.000000000 +0000
+++ $(osplconfig_current_path)/$my_ospl	2011-01-01 12:00:00.000000000 +0000
@@ -1,8 +1,8 @@
 <OpenSplice>
    <Domain>
-      <Name>ospl_shmem_nativeRT</Name>
-      <Id>0</Id>
+      <Name>${ospl_distver}_ospl_shmem_nativeRT_${transport}_${domain_suffix}</Name>
+      <Id>129</Id>
       <Database>
          <Size>10485760</Size>
       </Database>
       <Service name="networking">
@@ -17,18 +17,18 @@
    </Domain>
    <NetworkService name="networking">
       <Partitioning>
-         <GlobalPartition Address="broadcast"/>
+         <GlobalPartition Address="$interface"/>
       </Partitioning>
       <Channels>
          <Channel default="true" enabled="true" name="BestEffort" reliable="false">
-            <PortNr>54400</PortNr>
+            <PortNr>$besteffort_port</PortNr>
          </Channel>
          <Channel enabled="true" name="Reliable" reliable="true">
-            <PortNr>54410</PortNr>
+            <PortNr>$reliable_port</PortNr>
          </Channel>
       </Channels>
       <Discovery enabled="true">
-         <PortNr>54420</PortNr>
+         <PortNr>$discovery_port</PortNr>
       </Discovery>
    </NetworkService>
    <DurabilityService name="durability">
@@ -53,7 +53,7 @@
    </DurabilityService>
    <TunerService name="cmsoap">
       <Server>
-         <PortNr>50000</PortNr>
+         <PortNr>$cmsoap_port</PortNr>
       </Server>
    </TunerService>
 </OpenSplice>
_EOF
            else
                error_help "ERROR: runtype '$runtype' is unknown"
            fi
        else
            error_help "ERROR: Version '$ospl_distver' is unknown"
        fi
        test $? -eq 0 || return 1
    elif [ "$transport" = 'ddsi2' ]; then
        local interface="AUTO"
        # Note that for V6 the domain ID when running under DDSI2 must be in the range 0 - 229
        if [ "$(echo "$ospl_distver" | sed -e 's|\..*||')" = 'V5' ]; then
            # In V5 version was V5.5 instead of V5.X.X.
            $patch -p0 <<_EOF
--- $(osplconfig_current_path)/$my_ospl	2011-01-01 12:00:00.000000000 +0000
+++ $(osplconfig_current_path)/$my_ospl	2011-01-01 12:00:00.000000000 +0000
@@ -1,6 +1,6 @@
 <OpenSplice>
    <Domain>
-      <Name>OpenSplice${ospl_distver}_with_DDSI2</Name>
+      <Name>OpenSplice${ospl_distver}_with_DDSI2_${USER}_${domain_suffix}</Name>
       <Database>
          <Size>10485760</Size>
       </Database>
@@ -13,7 +13,7 @@
    </Domain>
    <DDSI2Service name="ddsi2">
       <General>
-         <NetworkInterfaceAddress>AUTO</NetworkInterfaceAddress>
+         <NetworkInterfaceAddress>$interface</NetworkInterfaceAddress>
          <AllowMulticast>true</AllowMulticast>
          <EnableMulticastLoopback>true</EnableMulticastLoopback>
          <CoexistWithNativeNetworking>false</CoexistWithNativeNetworking>
_EOF
        elif [ "$(echo "$ospl_distver" | sed -e 's|\..*||')" = 'V6' ]; then
            if [ "$runtype" = "sp" ]; then
                $patch -p0 <<_EOF
--- $(osplconfig_current_path)/$my_ospl	2011-01-01 12:00:00.000000000 +0000
+++ $(osplconfig_current_path)/$my_ospl	2011-01-01 12:00:00.000000000 +0000
@@ -1,7 +1,7 @@
 <OpenSplice>
    <Domain>
-      <Name>ospl_sp_ddsi</Name>
-      <Id>0</Id>
+      <Name>${ospl_distver}_ospl_sp_ddsi_${domain_suffix}</Name>
+      <Id>145</Id>
       <SingleProcess>true</SingleProcess>
       <Service name="ddsi2">
          <Command>ddsi2</Command>
@@ -21,7 +21,7 @@
    </Domain>
    <DDSI2Service name="ddsi2">
       <General>
-         <NetworkInterfaceAddress>AUTO</NetworkInterfaceAddress>
+         <NetworkInterfaceAddress>$interface</NetworkInterfaceAddress>
          <AllowMulticast>true</AllowMulticast>
          <EnableMulticastLoopback>true</EnableMulticastLoopback>
          <CoexistWithNativeNetworking>false</CoexistWithNativeNetworking>
_EOF
            elif [ "$runtype" = "shm" ]; then
                $patch -p0 <<_EOF
--- $(osplconfig_current_path)/$my_ospl	2011-01-01 12:00:00.000000000 +0000
+++ $(osplconfig_current_path)/$my_ospl	2011-01-01 12:00:00.000000000 +0000
@@ -1,7 +1,7 @@
 <OpenSplice>
    <Domain>
-      <Name>ospl_shmem_ddsi</Name>
-      <Id>0</Id>
+      <Name>${ospl_distver}_ospl_shmem_ddsi_${domain_suffix}</Name>
+      <Id>145</Id>
       <Database>
          <Size>10485760</Size>
       </Database>
@@ -17,7 +17,7 @@
    </Domain>
    <DDSI2Service name="ddsi2">
       <General>
-         <NetworkInterfaceAddress>AUTO</NetworkInterfaceAddress>
+         <NetworkInterfaceAddress>$interface</NetworkInterfaceAddress>
          <AllowMulticast>true</AllowMulticast>
          <EnableMulticastLoopback>true</EnableMulticastLoopback>
          <CoexistWithNativeNetworking>false</CoexistWithNativeNetworking>
@@ -52,7 +52,7 @@
    </DurabilityService>
    <TunerService name="cmsoap">
       <Server>
-         <PortNr>50000</PortNr>
+         <PortNr>$cmsoap_port</PortNr>
       </Server>
    </TunerService>
 </OpenSplice>
_EOF
            else
                error_help "ERROR: runtype '$runtype' is unknown"
            fi
        else
            error_help "ERROR: Version '$ospl_distver' is unknown"
        fi
        test $? -eq 0 || return 1
    else
        error_help "ERROR: Unknown transport '$transport'"
        return 1
    fi
}

function backup_ospl_configs ()
{
    echo "Backing up ospl configs ....."

    if [ $# -ne 1 ]; then
        error_trace "ERROR: Wrong number of arguments to ${FUNCNAME[0]}"
        return 1
    fi

    local distdir="$1" && test -n "$distdir" || error_trace "ERROR: Parameter \$1 is empty" || return 1
    if [ ! -d "$distdir" ]; then
        error_help "ERROR: '$distdir' doesn't exist"
        return 1
    fi

    # Copy OSPL xml configs to $(basename).xml_orig.
    if [ "$(uname)" != 'SunOS' ]; then
        find "$distdir" -type f -regex '.*/etc/config/.*\.xml$' -exec "$(dirname "$BASH_SOURCE")/.cp_chmod" '{}' '{}_orig' \; || return 1
    else
        echo "It's SunOS and regex doesn't work" 
        find "$distdir" -type f -name 'ospl*.xml' -exec "$(dirname "$BASH_SOURCE")/.cp_chmod" '{}' '_orig' \; || return 1
    fi
}

function clean_ospl_configs ()
{
    if [ $# -ne 1 ]; then
        error_trace "ERROR: Wrong number of arguments to ${FUNCNAME[0]}"
        return 1
    fi

    local distdir="$1" && test -n "$distdir" || error_trace "ERROR: Parameter \$1 is empty" || return 1
    if [ ! -d "$distdir" ]; then
        error_help "ERROR: '$distdir' doesn't exist"
        return 1
    fi

    # Remove original config files (ignoring errors).
    if [ "$(uname)" != 'SunOS' ]; then
        find "$distdir" -type f -regex '.*\.xml_orig$' -exec rm -f '{}' \; &>/dev/null
    else
        echo "It's SunOS and regex doesn't work " || return 1
        find "$distdir" -name '*.xml_orig' -exec rm -f '{}' \; &>/dev/null
    fi

    # From this point we are always successful.
    return 0
}

function _check_osplconfig_args ()
{
    while [ $# -ne 0 ]
    do
        case "$1" in
            -h|--help)
                # Nothing to print as help here.
                return 1
                ;;
            *)
                shift
                ;;
        esac
    done
}
if [ -z "$g_osplconfig_loaded" ]; then
    g_osplconfig_loaded='yes'
    # This is the last line in this file. It can set $? which is important for
    # the outside code. Don't do anything after this!!!
    _check_osplconfig_args "$@"
fi
