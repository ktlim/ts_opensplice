<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE stax SYSTEM "../../stax/stax.dtd">
<stax>
    <function name="StartOpenSplice">
        <function-prolog>
            <![CDATA[
                <p>Call this function to start OpenSplice on a deployed host.
                Since this is essential to most all testcases, a TestCase.OpenSpliceException is thrown if something goes wrong causing the current testcase to fail.
                This alleviates the need to do error handling in each testcase (it is not recoverable anyway).
                OpenSplice can be started in two modes: standalone mode will start all services and the splice daemon seperately. This allows to attach debuggers and other tools like pstack, just set a <breakpoint/> somewhere to give yourself the opportunity to attach.
                Currently the following services are supported in standalone mode (to be extended as soon a testcase actually needs a service):
                - Splice daemon
                - Networking service
                - Durability service
                If standalone mode is disabled, services will automatically be started by spliced, as dictated by the OpenSplice configuration file.
                TODO: support multiple services of the same type and multiple concurrent OpenSplice instances (domains)
                </p>
            ]]>
        </function-prolog>
        <function-list-args>
            <function-required-arg name="host">TestHost to start OpenSplice on</function-required-arg>
            <function-optional-arg name="uri" default="None">Optional: string to use for OSPL_URI (The recommended way is to call SetURI as this will copy the file to the remote machine). If omitted, the uri will be retrieved from the TestHost object</function-optional-arg>
            <function-optional-arg name="standalone" default="1">In standalone mode, the OpenSplice daemon (spliced) and services are started seperately</function-optional-arg>
        </function-list-args>
        <try>
        <sequence>
            <if expr="host.is_deployed()">
                <sequence>
                    <script>
                        if uri != None:
                            host.set_env('OSPL_URI', uri)
                        host.set_process(host.get_env('OSPL_EXEC'))
                    </script>
                    <if expr="host.get_env('OSPL_URI') != None">
                        <sequence>
                            <script>
                                request_env = host.get_cmd_envs()
                                request_cmd = '%s %s' % (host.get_process(), host.get_env('OSPL_URI'))
                                request_workdir = host.get_logdir()
                                request_stdout = host.get_logdir() + host.get_filesep() + host.get_scenario() + '-ospl-start.log'
                                request = R'START SHELL COMMAND %s WORKDIR %s %s WORKLOAD OpenSplice ASYNC STATICHANDLENAME spliced SAMECONSOLE STDOUT %s STDERRTOSTDOUT' % (request_cmd, request_workdir, request_env, request_stdout)
                            </script>
                            <stafcmd name="'StartSpliced'">
                                <location>host.get_staf_url()</location>
                                <service>'PROCESS'</service>
                                <request>request</request>
                            </stafcmd>

                            <if expr="RC != STAFRC.Ok">
                                <throw exception="'TestCase.OpenSpliceException'">'Failed to start OpenSplice on %s, %s (RC=%s)' % (host.get_hostname(), STAFResult, RC)</throw>
                                <else>
                                <sequence>
                                    <log message="STAXMessageLog" level="'debug'">'Started OpenSplice on %s, JobID: %s' % (host.get_hostname(), STAFResult)</log>
                                    <stafcmd name="'SplicedStartupDelay'">
                                        <location>host.get_staf_url()</location>
                                        <service>'DELAY'</service>
                                        <request>'DELAY 5s'</request>
                                    </stafcmd>
                                </sequence>
                                </else>
                            </if>
                            <!-- Start services seperately (for debugging) -->
                            <!-- THIS IS CURRENTLY NO LONGER SUPPORTED (networking must be started by spliced for groupReadyToAcceptSample stuff to work) -->
                            <!--
                            <if expr="standalone">
                                <sequence>
                                    <script>
                                        networking_service = host.get_env('OSPL_NWEXEC')
                                        durability_service = host.get_env('OSPL_DEXEC')
                                    </script>
                                    <if expr="networking_service != None">
                                        <sequence>
                                            <script>
                                                host.set_process(networking_service)
                                                request_cmd = '%s %s %s' % (host.get_process(), 'networking', host.get_env('OSPL_URI'))
                                                request = R'START SHELL COMMAND %s WORKDIR %s %s WORKLOAD OpenSplice ASYNC STATICHANDLENAME networking SAMECONSOLE' % (request_cmd, request_workdir, request_env)
                                            </script>
                                            <stafcmd name="'StartNetworking'">
                                                <location>host.get_staf_url()</location>
                                                <service>'PROCESS'</service>
                                                <request>request</request>
                                            </stafcmd>
                                            <if expr="RC != STAFRC.Ok">
                                                <throw exception="'TestCase.OpenSpliceException'">'Failed to start networking on %s, %s, (RC=%s)' % (host.get_hostname(), STAFResult, RC)</throw>
                                                <else>
                                                    <sequence>
                                                        <log message="STAXMessageLog" level="'debug'">'Started networking on %s, JobID: %s' % (host.get_hostname(), STAFResult)</log>
                                                        <stafcmd name="'NetworkingStartupDelay'">
                                                            <location>host.get_staf_url()</location>
                                                            <service>'DELAY'</service>
                                                            <request>'DELAY 5s'</request>
                                                        </stafcmd>
                                                    </sequence>
                                                </else>
                                            </if>
                                        </sequence>
                                    </if>
                                    <if expr="durability_service != None">
                                        <sequence>
                                            <script>
                                                host.set_process(durability_service)
                                                request_cmd = '%s %s %s' % (host.get_process(), 'durability', host.get_env('OSPL_URI'))
                                                request = R'START SHELL COMMAND %s WORKDIR %s %s WORKLOAD OpenSplice ASYNC STATICHANDLENAME durability SAMECONSOLE' % (request_cmd, request_workdir, request_env)
                                            </script>
                                            <stafcmd name="'StartDurability'">
                                                <location>host.get_staf_url()</location>
                                                <service>'PROCESS'</service>
                                                <request>request</request>
                                            </stafcmd>
                                            <if expr="RC != STAFRC.Ok">
                                                <throw exception="'TestCase.OpenSpliceException'">'Failed to start durability on %s, %s, (RC=%s)' % (host.get_hostname(), STAFResult, RC)</throw>
                                                <else>
                                                    <sequence>
                                                        <log message="STAXMessageLog" level="'debug'">'Started durability on %s, JobID: %s' % (host.get_hostname(), STAFResult)</log>
                                                        <stafcmd name="'DurabilityStartupDelay'">
                                                            <location>host.get_staf_url()</location>
                                                            <service>'DELAY'</service>
                                                            <request>'DELAY 5s'</request>
                                                        </stafcmd>
                                                    </sequence>
                                                </else>
                                            </if>
                                        </sequence>
                                    </if>
                                </sequence>
                            </if>
                             -->
                        </sequence>
                        <else>
                            <throw exception="'TestCase.OpenSpliceException'">'Can\'t start OpenSplice on host %s, OSPL_URI is not set' % host.get_hostname()</throw>
                        </else>
                    </if>
                </sequence>
                <else>
                    <throw exception="'TestCase.OpenSpliceException'">'Can\'t start OpenSplice if host %s is not in deployed state.' % host.get_hostname()</throw>
                </else>
            </if>
            </sequence>
            <catch exception="'TestCase.OpenSpliceException'" typevar="eType" var="eInfo">
                <sequence>
                    <tcstatus result="'fail'">'Failed to start OpenSplice on %s\nException: %s' % (host.get_hostname(), eInfo)</tcstatus>
                    <rethrow/>
                </sequence>
            </catch>
        </try>
    </function>

    <function name="StopOpenSplice">
        <function-prolog>
        <![CDATA[
            <p>Call this function to stop OpenSplice deamon and services. Note the current termination behaviour of OpenSplice is broken, therefore this function will need to be cleaned up when behaviour is consistent
            By default the OpenSplice logs are kept since OpenSplice may be started/stopped multiple times during a test. Logs will usually be appended or written to different files.
            Eventually the host cleanup function will call StopOpenSplice to make sure it is stopped in case someone forgot to do it in their testcase, and it will also purge the logs.
            </p>
        ]]>
        </function-prolog>
        <function-list-args>
            <function-required-arg name="host">TestHost</function-required-arg>
            <function-optional-arg name="purgeLogs" default="0">Copy and purge the hosts' logdir</function-optional-arg>
        </function-list-args>
        <sequence>
            <!-- Identify running OpenSplice processes -->
            <stafcmd>
                <location>host.get_staf_url()</location>
                <service>'PROCESS'</service>
                <request>'LIST RUNNING WORKLOAD OpenSplice LONG'</request>
            </stafcmd>
            <if expr="len(STAFResult) > 0">
                <sequence>
                    <!-- Try to stop properly by running ospl -a stop -->
                    <script>msg = 'Stopping OpenSplice workload running on %s:\n' % host.get_hostname()</script>
                    <call function="'LogWorkload'">STAFResult, msg</call>
                    <script>
                        host.set_process('ospl -a stop')
                        request_env = host.get_cmd_envs()
                        request_cmd = host.get_process()
                        request_workdir = host.get_logdir()
                        request_stdout = host.get_logdir() + host.get_filesep() + host.get_scenario() + '-ospl-stop.log'
                        request = R'START SHELL COMMAND %s WORKDIR %s %s WORKLOAD OpenSplice WAIT 1m STATICHANDLENAME ospl-stop SAMECONSOLE STDOUT %s STDERRTOSTDOUT' % (request_cmd, request_workdir, request_env, request_stdout)
                    </script>
                    <stafcmd name="'StopOpenSplice::Stop'">
                        <location>host.get_staf_url()</location>
                        <service>'PROCESS'</service>
                        <request>request</request>
                    </stafcmd>
                    <script>
                        result = RC
                        # Workaround broken exit/signal handling: 'ospl stop' sometimes returns before durability process is cleaned up
                        import time
                        time.sleep(5)
                    </script>
                    <!-- Check if all processes exited -->
                    <stafcmd name="'StopOpenSplice::Monitor'">
                        <location>host.get_staf_url()</location>
                        <service>'PROCESS'</service>
                        <request>'LIST RUNNING WORKLOAD OpenSplice LONG'</request>
                    </stafcmd>
                    <script>stopList = STAFResult</script>
                    <if expr="len(stopList) > 0">
                        <sequence>
                            <call function="'LogWorkload'">stopList, 'Failed to properly stop OpenSplice processes on %s:\n' % host.get_hostname()</call>
                            <if expr="STAXCurrentTestcase != None">
                                <tcstatus result="'fail'">'Failed to properly stop OpenSplice processes on %s:\n' % host.get_hostname()</tcstatus>
                            </if>
                            <!-- Kill any process still running -->
                            <stafcmd name="'StopOpenSplice::StopWorkload'">
                                <location>host.get_staf_url()</location>
                                <service>'PROCESS'</service>
                                <request>'STOP WORKLOAD OpenSplice USING SIGKILLALL'</request>
                            </stafcmd>
                            <if expr="RC == STAFRC.Ok">
                                <!-- Stopping may take up to 30 seconds -->
                                <sequence>
                                    <stafcmd name="'StopOpenSplice::Monitor'">
                                        <location>host.get_staf_url()</location>
                                        <service>'PROCESS'</service>
                                        <request>'LIST RUNNING WORKLOAD OpenSplice LONG'</request>
                                    </stafcmd>
                                    <script>stopList = STAFResult</script>
                                    <timer duration="'30s'">
                                        <loop while="len(stopList) > 0">
                                            <sequence>
                                                <stafcmd name="'StopOpenSplice::Monitor'">
                                                    <location>host.get_staf_url()</location>
                                                    <service>'PROCESS'</service>
                                                    <request>'LIST RUNNING WORKLOAD OpenSplice LONG'</request>
                                                </stafcmd>
                                                <script>stopList = STAFResult</script>
                                                <!-- Don't flood the machine with STAF requests -->
                                                <stafcmd name="'StopOpenSplice::Delay'">
                                                    <location>host.get_staf_url()</location>
                                                    <service>'DELAY'</service>
                                                    <request>'DELAY 5s'</request>
                                                </stafcmd>
                                            </sequence>
                                        </loop>
                                    </timer>
                                </sequence>
                            </if>
                        </sequence>
                    </if>
                </sequence>
                <else>
                	<!-- No OpenSplice processes running -->
                    <sequence>
                        <!-- Fail if called during a testcase. Can also be called during general cleanup (no testcase running) -->
                        <!-- <if expr="STAXCurrentTestcase != None">
                            <tcstatus result="'fail'">'No OpenSplice workload running on %s' % host.get_hostname()</tcstatus>
                        </if>
                         -->
                	   <script>result = STAFRC.DoesNotExist</script>
                    </sequence>
                </else>
            </if>
            <!-- Copy and purge logdir -->
            <if expr="purgeLogs">
                <sequence>
                    <script>
                        source_dir = host.get_logdir()
                        target_dir = '{STAF/DataDir}' + file_sep + 'logfiles' + file_sep + STAXJobName + file_sep + host.get_hostname()
                        request = 'COPY DIRECTORY %s TODIRECTORY %s' % (source_dir, target_dir)
                    </script>
                    <stafcmd name="'StopOpenSplice::CopyLogs'">
                        <location>host.get_staf_url()</location>
                        <service>'FS'</service>
                        <request>request</request>
                    </stafcmd>
                    <if expr="(RC == STAFRC.Ok)">
                        <sequence>
                            <!-- purge logdir -->
                            <stafcmd name="'StopOpenSplice::PurgeLogs'">
                                <location>host.get_staf_url()</location>
                                <service>'FS'</service>
                                <request>'DELETE ENTRY %s CONFIRM RECURSE' % source_dir</request>
                            </stafcmd>
                            <if expr="RC != STAFRC.Ok">
                                <log message="STAXMessageLog" level="'debug'">'Failed to delete OpenSplice logs from %s (%s)' % (host.get_hostname(), STAFResult)</log>
                            </if>
                        </sequence>
                        <else>
                            <log message="STAXMessageLog" level="'debug'">'Failed to copy OpenSplice logs from %s (%s)' % (host.get_hostname(), STAFResult)</log>
                        </else>
                    </if>
                </sequence>
            </if>
            <return>result</return>
        </sequence>
    </function>

    <function name="SetURI">
        <function-prolog>
        <![CDATA[
            <p>Set OSPL_URI environment variable on a host and copy the OpenSplice configuration xml file to the host.
            A relative path to the file can be used in the 'cfg_file' argument. The file will be looked up on the local host, first
            in the path relative to the current STAX script, then relative to {STAF/DataDir}. The file is copied to the remote host
            and placed in {STAF/DataDir}/etc. It can then be used by OpenSplice on the remote host.</p>
        ]]>
        </function-prolog>
        <function-list-args>
            <function-required-arg name="host">TestHost</function-required-arg>
            <function-required-arg name="cfg_file">Absolute or relative path to xml file.</function-required-arg>
        </function-list-args>
        <sequence>
        	<script>
                if os.path.isfile(cfg_file):
                    abs_file = os.path.abspath(cfg_file)
                elif os.path.isfile(os.path.dirname(STAXCurrentXMLFile) + file_sep + cfg_file):
                    abs_file = os.path.abspath(os.path.dirname(STAXCurrentXMLFile) + file_sep + cfg_file)
                else:
                    abs_file = '{STAF/DataDir}' + file_sep + cfg_file
                target_dir = host.get_basedir() + host.get_filesep() + 'etc'
                target_file = os.path.basename(cfg_file)
            </script>
            <!-- Create target_dir if it doesn't exist -->
            <call function="'CreateDirectory'">host, target_dir</call>
            <!-- Copy file to host -->
            <stafcmd>
                <location>STAXCurrentXMLMachine</location>
                <service>'FS'</service>
                <request>'COPY FILE %s TODIRECTORY %s TOMACHINE %s TEXT FORMAT NATIVE' % (abs_file, target_dir, host.get_staf_url())</request>
            </stafcmd>
            <!-- Set URI on the host to file -->
            <if expr="RC != STAFRC.Ok">
                <log message="STAXMessageLog" level="'error'">'SetURI: Failed to copy %s to %s (%s)' % (cfg_file, host.get_hostname(), STAFResult)</log>
                <else>
                    <script>host.set_uri(target_dir + host.get_filesep() + target_file)</script>
                </else>
            </if>
        </sequence>
    </function>

    <function name="IdentifyStaticHandle">
        <function-list-args>
            <function-required-arg name="host">TestHost</function-required-arg>
            <function-required-arg name="handle">STAF Handle</function-required-arg>
        </function-list-args>
        <sequence>
            <stafcmd>
                <location>host.get_staf_url()</location>
                <service>'HANDLE'</service>
                <request>'QUERY HANDLE %s' % handle</request>
            </stafcmd>
            <if expr="RC == STAFRC.Ok">
                <return>[RC, STAFResult['name']]</return>
                <else>
                    <return>[RC, None]</return>
                </else>
            </if>
        </sequence>
    </function>

    <function name="LogWorkload">
        <function-list-args>
            <function-required-arg name="procList">Process list (output of 'PROCESS LIST ...' command)</function-required-arg>
            <function-optional-arg name="logMsg" default="''">Optional log message prefix</function-optional-arg>
        </function-list-args>
        <sequence>
            <script>
                last = len(STAFResult) - 1
            </script>
            <iterate in="procList" var="proc" indexvar="i">
                <sequence>
                    <call function="'IdentifyStaticHandle'">host, proc['handle']</call>
                    <script>
                        [rc, result] = STAXResult
                        if (rc == 0):
                            cmd = result
                        else:
                            cmd = proc['command']
                        logMsg += '\tProcess: %s (PID: %s, Handle: %s) Running since: %s' % (cmd, proc['pid'], proc['handle'], proc['startTimestamp'])
                        if i != last:
                            logMsg += '\n'
                    </script>
                </sequence>
            </iterate>
            <log message="STAXMessageLog" level="'info'">logMsg</log>
        </sequence>
    </function>

    <function name="StackTrace" scope="local">
        <function-prolog>
        <![CDATA[
            <p>Create a stack trace of a running process of the OpenSplice workload</p>
        ]]>
        </function-prolog>
        <function-epilog>
        <![CDATA[
            <p>The tool to create the stacktrace ('pstack') is only supported on *nix</p>
        ]]>
        </function-epilog>
        <function-list-args>
            <function-required-arg name="host">TestHost</function-required-arg>
            <function-required-arg name="process">String containing executable of the process</function-required-arg>
        </function-list-args>
        <sequence>
            <if expr="host.isWindows()">
                <sequence>
                    <log message="STAXMessageLog" level="'error'">'StackTrace: not supported on Windows host %s' % host.get_hostname()</log>
                    <return>0</return>
                </sequence>
            </if>
            <!-- Get PID of process -->
            <script>
                request = 'LIST RUNNING WORKLOAD OpenSplice LONG'
            </script>
            <stafcmd>
                <location>host.get_staf_url()</location>
                <service>'PROCESS'</service>
                <request>request</request>
            </stafcmd>
            <script>procList = STAFResult</script>
            <if expr="len(procList) > 0">
                <sequence>
                    <script>
                        pid = None
                        handle = None
                        for proc in procList:
                            if re.search(process, proc['command'], re.I):
                                if host.get_mode() == 'SRC':
                                    pid = int(proc['pid'])
                                else:
                                    pid = int(proc['pid'])+1
                                handle = int(proc['handle'])
                    </script>
                    <if expr="(pid != None) and (handle != None)">
                        <sequence>
                            <call function="'IdentifyStaticHandle'">host, handle</call>
                            <script>
                                rc, name = STAXResult
                                logfile = '%spstack_%s.log' % (host.get_logdir(), name)
                            </script>
                            <process>
                                <location>host.get_staf_url()</location>
                                <command mode="'shell'">'pstack %d > %s' % (pid, logfile)</command>
                                <stderr mode="'stdout'"/>
                                <returnstdout/>
                            </process>
                            <log if="RC != STAFRC.Ok">'StackTrace: pstack failed on %s (RC: %s, Result: %s)' % (host.get_hostname(), RC, STAFResult)</log>
                            <log if="RC == STAFRC.Ok">'StackTrace: created stacktrace for %s (Handle: %s)' % (name, handle)</log>
                        </sequence>
                        <else>
                            <log message="STAXMessageLog" level="'error'">'StackTrace: failed to find durability PID on %s' % host.get_hostname()</log>
                        </else>
                    </if>
                </sequence>
                <else>
                    <log message="STAXMessageLog" level="'error'">'StackTrace: no running OpenSplice workload on %s' % host.get_hostname()</log>
                </else>
            </if>
            <log message="STAXMessageLog" level="'info'">STAFResult</log>
        </sequence>
    </function>
</stax>
