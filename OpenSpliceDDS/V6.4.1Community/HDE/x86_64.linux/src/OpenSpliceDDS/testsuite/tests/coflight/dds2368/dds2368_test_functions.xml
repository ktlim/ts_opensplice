<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE stax SYSTEM "../../stax/stax.dtd">
<stax>  
<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
  <function name="CreateTestLogDirectory" scope="local">
     <function-prolog>
      <![CDATA[
        Creation of loging directory for tests by time
      ]]>
    </function-prolog>
    <function-epilog>
      <![CDATA[
        Creation of loging directory for tests by time
      ]]>
    </function-epilog>
    <function-list-args>
      <function-required-arg name="the_host">
        The host for creation loging directory
      </function-required-arg>
      <function-required-arg name="test_name">
        The test name 
      </function-required-arg>
    </function-list-args>
    <sequence>
        <script>
            file_sep = str(the_host.get_file_sep())
            request = 'CREATE DIRECTORY ' + the_host.get_test_root() + file_sep + test_name
        </script>
        <call function="'STAF'">the_host.get_staf_url(), 'FS', request</call>
        <script>[rc, result] = STAXResult</script>
        <if expr="rc != 0">
            <sequence>
                <script>err_msg = 'CreateTestLogDirectory: for %s failed RC=%s, Result=%s' % (the_host, rc, result)</script>
                <log level="'error'" message="1">err_msg</log>
                <throw exception="'ProcessNoWorkyError'">err_msg</throw>
            </sequence>
        </if>
        
        <script>
            from time import localtime, strftime
            current_log_dir_name = strftime("%d_%m_%Y_%H-%M-%S", localtime())
            request = 'CREATE DIRECTORY ' + the_host.get_test_root() + file_sep + test_name + file_sep + current_log_dir_name
        </script>
        <call function="'STAF'">the_host.get_staf_url(), 'FS', request</call>
        <script>[rc, result] = STAXResult</script>

        <if expr="rc != 0">
            <sequence>
                <script>err_msg = 'CreateTestLogDirectory: for %s failed RC=%s, Result=%s' % (the_host, rc, result)</script>
                <log level="'error'" message="1">err_msg</log>
                <throw exception="'ProcessNoWorkyError'">err_msg</throw>
            </sequence>
        </if>
        <return>
            current_log_dir_name
        </return>
    </sequence>
    </function>
<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->    
    <function name="AnalyzeTestLog" scope="local">
     <function-prolog>
      <![CDATA[
        Analyze of dds2368 test logs for compliance of expected results.
      ]]>
    </function-prolog>
    <function-epilog>
      <![CDATA[
        Create output analyze.txt file with quantity of passed or failed tests.
      ]]>
    </function-epilog>
    <function-list-args>
         <function-required-arg name="full_path_to_log_dir">
            The full path to loging directory
        </function-required-arg>
        <function-required-arg name="array_of_test_results">
            The array of test result entities
        </function-required-arg>
    </function-list-args>
    <sequence>
        <script>
            import fnmatch
            import os
            
            count_of_c_passed_tests = 0            
            count_of_c_failed_tests = 0

            count_of_iptables_log_passed_tests = 0            
            count_of_iptables_log_failed_tests = 0
            ip_tables_key = "ip_table"
            
            error_log_file_detected = "false"
            current_test_failed = "false"
            
            def calculation_of_test_results_counts_by_lang(lang, criteria):
                global count_of_c_passed_tests
                global count_of_c_failed_tests
                global count_of_iptables_log_passed_tests
                global count_of_iptables_log_failed_tests

                if criteria == "pass":
                    if lang == c_key:
                        count_of_c_passed_tests = count_of_c_passed_tests + 1
                    if lang == ip_tables_key:
                        count_of_iptables_log_passed_tests = count_of_iptables_log_passed_tests + 1
                    
                else:
                    if lang == c_key:
                        count_of_c_failed_tests = count_of_c_failed_tests + 1
                    if lang == ip_tables_key:
                        count_of_iptables_log_failed_tests = count_of_iptables_log_failed_tests + 1

            analyze_file_name = "analyze.txt"
            passed_name = "passed"
            failed_name = "failed"
            end_of_line = "\n"
            full_path_to_log_dir = full_path_to_log_dir + os.sep
            try:
                #Opens a file for writing only. Overwrites the file if the file exists. If the file does not exist, creates a new file for writing.
                analyze_file = open(full_path_to_log_dir + analyze_file_name, "w")
                analyze_file.write("-------------------------------------------------------------------------------" + end_of_line)
            except IOError:
                print "AnalyzeTestLog: Error: can\'t creates a new file %s for writing " % (analyze_file_name)
            else:
                for result in array_of_test_results:
                    
                    #check publisher result files
                    if result.get_name() == "node_A_publisher":
                        current_test_failed = "false"
                        if (os.path.exists(result.get_log_name()) and os.path.isfile(result.get_log_name())):
                            try:
                                try:
                                    publisher_log_file = open(result.get_log_name())
                                    lines = publisher_log_file.readlines()
                                finally:
                                    publisher_log_file.close()
                                
                            except IOError:
                                print "AnalyzeTestLog: Error: can\'t find file or read file data in %s" % (result.get_log_name())
                                analyze_file.write("Test " + result.get_name() + " on " + result.get_op_key() + " was " + failed_name + end_of_line)
                                analyze_file.write("reason: Error: can\'t find file or read file data in %s \n" % (result.get_log_name()))
                                calculation_of_test_results_counts_by_lang(result.get_op_key(), "fail")
                                break;
                            else:    
                                if len(lines) > 1:
                                    analyze_file.write("Test " + result.get_name() + " on " + result.get_op_key()  + " was " + passed_name + end_of_line)
                                    calculation_of_test_results_counts_by_lang(result.get_op_key(), "pass")
                                else:
                                    print "AnalyzeTestLog: publisher log file: %s is empty!" % (result.get_log_name())
                                    analyze_file.write("Test " + result.get_name() + " on " + result.get_op_key()  + " was " + failed_name + end_of_line)
                                    analyze_file.write("reason: publisher log file: %s is empty!\n" % (result.get_log_name()))
                                    calculation_of_test_results_counts_by_lang(result.get_op_key(), "fail")
                        else:
                            print "AnalyzeTestLog: publisher log file: %s not exist!" % (result.get_log_name())
                            analyze_file.write("Test " + result.get_name() + " on " + result.get_op_key()  + " was " + failed_name + end_of_line)
                            analyze_file.write("reason: publisher log file: %s not exist!\n" % (result.get_log_name()))
                            calculation_of_test_results_counts_by_lang(result.get_op_key(), "fail")

                    #check node_B_subscriber result files
                    if result.get_name() == "node_B_subscriber":
                        current_test_failed = "false"
                        if (os.path.exists(result.get_log_name()) and os.path.isfile(result.get_log_name())):
                            try:
                                try:
                                    subscriber_log_file = open(result.get_log_name())
                                    lines = subscriber_log_file.readlines()
                                finally:
                                    subscriber_log_file.close()
                                
                            except IOError:
                                print "AnalyzeTestLog: Error: can\'t find file or read file data in %s" % (result.get_log_name())
                                analyze_file.write("Test " + result.get_name() + " on " + result.get_op_key() + " was " + failed_name + end_of_line)
                                analyze_file.write("reason: Error: can\'t find file or read file data in %s \n" % (result.get_log_name()))
                                calculation_of_test_results_counts_by_lang(result.get_op_key(), "fail")
                                break;
                            else:    
                                if len(lines) > 0:
                                    if(result.get_param_name() == "a"):
                                        for i in range(len(lines)):
                                            # skipping the first row, starting from second
                                            if (i == 0):
                                                continue
                                            values =  lines[i].split()
                                            if (len(values) == 6):# 6 - quantity of split words: taken sample from A # 0
                                                if (values[3] != "A"):
                                                    print "AnalyzeTestLog: subscriber log file: %s has wrong information!" % (result.get_log_name())
                                                    analyze_file.write("Test " + result.get_name() + " on " + result.get_op_key()  + " was " + failed_name + end_of_line)
                                                    analyze_file.write("reason: Subscriber log file: %s has wrong information!\n" % (result.get_log_name()))
                                                    calculation_of_test_results_counts_by_lang(result.get_op_key(), "fail")
                                                    current_test_failed = "true"
                                                    break
                                        if (current_test_failed == "false"):
                                            analyze_file.write("Test " + result.get_name() + " on " + result.get_op_key()  + " was " + passed_name + end_of_line)
                                            calculation_of_test_results_counts_by_lang(result.get_op_key(), "pass")
                                    
                                    if(result.get_param_name() == "b"):
                                        for i in range(len(lines)):
                                            # skipping the first row, starting from second
                                            if (i == 0):
                                                continue
                                            values =  lines[i].split()
                                            if (len(values) == 6):# 6 - quantity of split words: taken sample from B # 0
                                                if (values[3] != "B"):
                                                    print "AnalyzeTestLog: subscriber log file: %s has wrong information!" % (result.get_log_name())
                                                    analyze_file.write("Test " + result.get_name() + " on " + result.get_op_key()  + " was " + failed_name + end_of_line)
                                                    analyze_file.write("reason: Subscriber log file: %s has wrong information!\n" % (result.get_log_name()))
                                                    calculation_of_test_results_counts_by_lang(result.get_op_key(), "fail")
                                                    current_test_failed = "true"
                                                    break
                                        if (current_test_failed == "false"):
                                            analyze_file.write("Test " + result.get_name() + " on " + result.get_op_key()  + " was " + passed_name + end_of_line)
                                            calculation_of_test_results_counts_by_lang(result.get_op_key(), "pass")
                                    if(result.get_param_name() == "c"):
                                        if len(lines) > 1:
                                            print "AnalyzeTestLog: subscriber log file: %s has more than 1 row!" % (result.get_log_name())
                                            analyze_file.write("Test " + result.get_name() + " on " + result.get_op_key()  + " was " + failed_name + end_of_line)
                                            analyze_file.write("reason: Subscriber log file: %s has more than 1 row!\n" % (result.get_log_name()))
                                            calculation_of_test_results_counts_by_lang(result.get_op_key(), "fail")
                                        else:
                                            analyze_file.write("Test " + result.get_name() + " on " + result.get_op_key()  + " was " + passed_name + end_of_line)
                                            calculation_of_test_results_counts_by_lang(result.get_op_key(), "pass")
                                else:
                                    print "AnalyzeTestLog: subscriber log file: %s is empty!" % (result.get_log_name())
                                    analyze_file.write("Test " + result.get_name() + " on " + result.get_op_key()  + " was " + failed_name + end_of_line)
                                    analyze_file.write("reason: Subscriber log file: %s is empty!\n" % (result.get_log_name()))
                                    calculation_of_test_results_counts_by_lang(result.get_op_key(), "fail")
                        else:
                            print "AnalyzeTestLog: subscriber log file: %s not exist!" % (result.get_log_name())
                            analyze_file.write("Test " + result.get_name() + " on " + result.get_op_key()  + " was " + failed_name + end_of_line)
                            analyze_file.write("reason: subscriber log file: %s not exist!\n" % (result.get_log_name()))
                            calculation_of_test_results_counts_by_lang(result.get_op_key(), "fail")

                    #check node_C_subscriber result files
                    if result.get_name() == "node_C_subscriber":
                        current_test_failed = "false"
                        if (os.path.exists(result.get_log_name()) and os.path.isfile(result.get_log_name())):
                            try:
                                try:
                                    subscriber_log_file = open(result.get_log_name())
                                    lines = subscriber_log_file.readlines()
                                finally:
                                    subscriber_log_file.close()
                                
                            except IOError:
                                print "AnalyzeTestLog: Error: can\'t find file or read file data in %s" % (result.get_log_name())
                                analyze_file.write("Test " + result.get_name() + " on " + result.get_op_key() + " was " + failed_name + end_of_line)
                                analyze_file.write("reason: Error: can\'t find file or read file data in %s \n" % (result.get_log_name()))
                                calculation_of_test_results_counts_by_lang(result.get_op_key(), "fail")
                                break;
                            else:    
                                if len(lines) > 0:
                                    if(result.get_param_name() == "a"):
                                        for i in range(len(lines)):
                                            # skipping the first row, starting from second
                                            if (i == 0):
                                                continue
                                            values =  lines[i].split()
                                            if (len(values) == 6):# 6 - quantity of split words: taken sample from A # 0
                                                if (values[3] != "A"):
                                                    print "AnalyzeTestLog: subscriber log file: %s has wrong information!" % (result.get_log_name())
                                                    analyze_file.write("Test " + result.get_name() + " on " + result.get_op_key()  + " was " + failed_name + end_of_line)
                                                    analyze_file.write("reason: Subscriber log file: %s has wrong information!\n" % (result.get_log_name()))
                                                    calculation_of_test_results_counts_by_lang(result.get_op_key(), "fail")
                                                    current_test_failed = "true"
                                                    break
                                        if (current_test_failed == "false"):
                                            analyze_file.write("Test " + result.get_name() + " on " + result.get_op_key()  + " was " + passed_name + end_of_line)
                                            calculation_of_test_results_counts_by_lang(result.get_op_key(), "pass")
                                    if(result.get_param_name() == "b"):
                                        if len(lines) > 1:
                                            print "AnalyzeTestLog: subscriber log file: %s has more than 1 row!" % (result.get_log_name())
                                            analyze_file.write("Test " + result.get_name() + " on " + result.get_op_key()  + " was " + failed_name + end_of_line)
                                            analyze_file.write("reason: Subscriber log file: %s has more than 1 row!\n" % (result.get_log_name()))
                                            calculation_of_test_results_counts_by_lang(result.get_op_key(), "fail")
                                        else:
                                            analyze_file.write("Test " + result.get_name() + " on " + result.get_op_key()  + " was " + passed_name + end_of_line)
                                            calculation_of_test_results_counts_by_lang(result.get_op_key(), "pass")
                                        
                                    if(result.get_param_name() == "c"):
                                        for i in range(len(lines)):
                                            # skipping the first row, starting from second
                                            if (i == 0):
                                                continue
                                            values =  lines[i].split()
                                            if (len(values) == 6):# 6 - quantity of split words: taken sample from C # 0
                                                if (values[3] != "C"):
                                                    print "AnalyzeTestLog: subscriber log file: %s has wrong information!" % (result.get_log_name())
                                                    analyze_file.write("Test " + result.get_name() + " on " + result.get_op_key()  + " was " + failed_name + end_of_line)
                                                    analyze_file.write("reason: Subscriber log file: %s has wrong information!\n" % (result.get_log_name()))
                                                    calculation_of_test_results_counts_by_lang(result.get_op_key(), "fail")
                                                    current_test_failed = "true"
                                                    break
                                        if (current_test_failed == "false"):
                                            analyze_file.write("Test " + result.get_name() + " on " + result.get_op_key()  + " was " + passed_name + end_of_line)
                                            calculation_of_test_results_counts_by_lang(result.get_op_key(), "pass")
                                        
                                else:
                                    print "AnalyzeTestLog: subscriber log file: %s is empty!" % (result.get_log_name())
                                    analyze_file.write("Test " + result.get_name() + " on " + result.get_op_key()  + " was " + failed_name + end_of_line)
                                    analyze_file.write("reason: subscriber log file: %s is empty!\n" % (result.get_log_name()))
                                    calculation_of_test_results_counts_by_lang(result.get_op_key(), "fail")
                        else:
                            print "AnalyzeTestLog: subscriber log file: %s not exist!" % (result.get_log_name())
                            analyze_file.write("Test " + result.get_name() + " on " + result.get_op_key()  + " was " + failed_name + end_of_line)
                            analyze_file.write("reason: subscriber log file: %s not exist!\n" % (result.get_log_name()))
                            calculation_of_test_results_counts_by_lang(result.get_op_key(), "fail")

                    #check node_A_iptables result files
                    if result.get_name() == "node_A_iptables":
                        current_test_failed = "false"
                        if (os.path.exists(result.get_log_name()) and os.path.isfile(result.get_log_name())):
                            try:
                                try:
                                    iptables_log_file = open(result.get_log_name())
                                    lines = iptables_log_file.readlines()
                                finally:
                                    iptables_log_file.close()
                                
                            except IOError:
                                print "AnalyzeTestLog: Error: can\'t find file or read file data in %s" % (result.get_log_name())
                                analyze_file.write("Test " + result.get_name() + " on " + result.get_op_key() + " was " + failed_name + end_of_line)
                                analyze_file.write("reason: Error: can\'t find file or read file data in %s \n" % (result.get_log_name()))
                                calculation_of_test_results_counts_by_lang(ip_tables_key, "fail")
                                break;
                            else:    
                                if len(lines) > 0:
                                    if(result.get_param_name() == "a"):
                                        for i in range(len(lines)):
                                            line =  lines[i]
                                            #searching in a line of a port DPT 2750
                                            if string.find(line, "DPT=2750") != -1:
                                                #if find value DPT=2750 then cheking DST field
                                                if string.find(line, "DST=230.230.230.1") == -1:
                                                    current_test_failed = "true"

                                        if (current_test_failed == "false"):
                                            analyze_file.write("Test " + result.get_name() + " on " + result.get_op_key()  + " was " + passed_name + end_of_line)
                                            calculation_of_test_results_counts_by_lang(ip_tables_key, "pass")
                                        else:
                                            analyze_file.write("Test " + result.get_name() + " on " + result.get_op_key()  + " was " + failed_name + end_of_line)
                                            calculation_of_test_results_counts_by_lang(ip_tables_key, "fail")
                                    if(result.get_param_name() == "b"):
                                        for i in range(len(lines)):
                                            line =  lines[i]
                                            #searching in a line of a port DPT 2750
                                            if string.find(line, "DPT=2750") != -1:
                                                #if find value DPT=2750 then cheking DST field
                                                if (string.find(line, "DST=230.230.230.1") == -1) and (string.find(line, "DST=230.230.230.2") == -1):
                                                    current_test_failed = "true"

                                        if (current_test_failed == "false"):
                                            analyze_file.write("Test " + result.get_name() + " on " + result.get_op_key()  + " was " + passed_name + end_of_line)
                                            calculation_of_test_results_counts_by_lang(ip_tables_key, "pass")
                                        else:
                                            analyze_file.write("Test " + result.get_name() + " on " + result.get_op_key()  + " was " + failed_name + end_of_line)
                                            calculation_of_test_results_counts_by_lang(ip_tables_key, "fail")
                                        
                                    if(result.get_param_name() == "c"):
                                        for i in range(len(lines)):
                                            line =  lines[i]
                                            #searching in a line of a port DPT 2750
                                            if string.find(line, "DPT=2750") != -1:
                                                #if find value DPT=2750 then cheking DST field
                                                if (string.find(line, "DST=230.230.230.1") == -1) and (string.find(line, "DST=230.230.230.3") == -1):
                                                    current_test_failed = "true"

                                        if (current_test_failed == "false"):
                                            analyze_file.write("Test " + result.get_name() + " on " + result.get_op_key()  + " was " + passed_name + end_of_line)
                                            calculation_of_test_results_counts_by_lang(ip_tables_key, "pass")
                                        else:
                                            analyze_file.write("Test " + result.get_name() + " on " + result.get_op_key()  + " was " + failed_name + end_of_line)
                                            calculation_of_test_results_counts_by_lang(ip_tables_key, "fail")
                                        
                                else:
                                    print "AnalyzeTestLog: iptables log file: %s is empty!" % (result.get_log_name())
                                    analyze_file.write("Test " + result.get_name() + " on " + result.get_op_key()  + " was " + failed_name + end_of_line)
                                    analyze_file.write("reason: iptables log file: %s is empty!\n" % (result.get_log_name()))
                                    calculation_of_test_results_counts_by_lang(ip_tables_key, "fail")
                        else:
                            print "AnalyzeTestLog: iptables log file: %s not exist!" % (result.get_log_name())
                            analyze_file.write("Test " + result.get_name() + " on " + result.get_op_key()  + " was " + failed_name + end_of_line)
                            analyze_file.write("reason: iptables log file: %s not exist!\n" % (result.get_log_name()))
                            calculation_of_test_results_counts_by_lang(ip_tables_key, "fail")                           

                analyze_file.write("-------------------------------------------------------------------------------" + end_of_line)
                analyze_file.write("Total of c passed tests       : " + str(count_of_c_passed_tests))
                analyze_file.write(" and failed tests : " + str(count_of_c_failed_tests) + end_of_line)
                analyze_file.write("-------------------------------------------------------------------------------" + end_of_line)
                analyze_file.write("Total of iptables passed logs : " + str(count_of_iptables_log_passed_tests))
                analyze_file.write(" and failed logs : " + str(count_of_iptables_log_failed_tests) + end_of_line)
                analyze_file.write("-------------------------------------------------------------------------------" + end_of_line)

                count_of_total_passed_tests = count_of_c_passed_tests + count_of_iptables_log_passed_tests
                count_of_total_failed_tests = count_of_c_failed_tests + count_of_iptables_log_failed_tests
                
                count_of_total_tests = count_of_total_passed_tests + count_of_total_failed_tests
                
                analyze_file.write("-------------------------------------------------------------------------------" + end_of_line)
                analyze_file.write("Total of passed results : " + str(count_of_total_passed_tests) + end_of_line)
                analyze_file.write("Total of failed results : " + str(count_of_total_failed_tests) + end_of_line)
                analyze_file.write("Total of all results    : " + str(count_of_total_tests) + end_of_line)
                analyze_file.write("-------------------------------------------------------------------------------" + end_of_line)
                
                for file in os.listdir(full_path_to_log_dir):
                    if fnmatch.fnmatch(file, "ospl-error-*.log"):
                        error_log_file_detected = "true"
                        break
                if error_log_file_detected == "true":
                    analyze_file.write("Error log file(s) was detected" + end_of_line)
                else:
                    analyze_file.write("Error log file(s) was't detected" + end_of_line)
                    
                analyze_file.write("-------------------------------------------------------------------------------" + end_of_line)
                analyze_file.close()

        </script>
    </sequence>
    </function>
<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->    
    <function name="CopyIptablesInfoIntoLog" scope="local">
     <function-prolog>
      <![CDATA[
        Copy log rows from /var/log/messages file into iptables logs files according uuid 
      ]]>
    </function-prolog>
    <function-epilog>
      <![CDATA[
        Copy log rows from /var/log/messages file into iptables logs files according uuid  
      ]]>
    </function-epilog>
    <function-list-args>
        <function-required-arg name="array_of_iptables_logs_paths">
            The array of full paths to iptables log files
        </function-required-arg>
        <function-required-arg name="uuids_array">
            The array of uuids - keys of iptaples processes
        </function-required-arg>
    </function-list-args>
    <sequence>
        <script>
            import fnmatch
            import os
      
            messages_file_name = "messages"
            end_of_line = "\n"
            full_path_to_system_messages_dir =  os.sep + "var" + os.sep + "log" + os.sep
            messages_file_name = full_path_to_system_messages_dir + messages_file_name

            if (os.path.exists(messages_file_name) and os.path.isfile(messages_file_name)):
                try:
                    try:
                        messages_log_file = open(messages_file_name)
                        lines = messages_log_file.readlines()
                    finally:
                        messages_log_file.close()
                    
                except IOError:
                    print "CopyIptablesInfoIntoLog: Error: can\'t find file or read file data in %s" % (messages_file_name)
                else:    
                    if 0 > len(lines):
                        print "CopyIptablesInfoIntoLog: publisher log file: %s is empty!" % (messages_file_name)                        
            else:
                print "CopyIptablesInfoIntoLog: publisher log file: %s not exist!" % (messages_file_name)

            try:
                #Opens a file for writing only. 
                log_file1 = open(array_of_iptables_logs_paths[0], "w")
            except IOError:
                print "CopyIptablesInfoIntoLog: Error: can\'t opened a new file %s for writing " % (log_file1)
            try:
                #Opens a file for writing only. 
                log_file2 = open(array_of_iptables_logs_paths[1], "w")
            except IOError:
                print "CopyIptablesInfoIntoLog: Error: can\'t opened a new file %s for writing " % (log_file2)
            try:
                #Opens a file for writing only. 
                log_file3 = open(array_of_iptables_logs_paths[2], "w")
            except IOError:
                print "CopyIptablesInfoIntoLog: Error: can\'t opened a new file %s for writing " % (log_file3)
            for i in range(len(lines)):
                values = lines[i].split()
                for current_value in values:
                    if (current_value == uuids_array[0]):
                        log_file1.write(lines[i])
                    if (current_value == uuids_array[1]):
                        log_file2.write(lines[i])
                    if (current_value == uuids_array[2]):
                        log_file3.write(lines[i])

            log_file1.close()
            log_file2.close()
            log_file3.close()
        </script>
    </sequence>
    </function>
<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
    <function name="MoveSysLogToHost" scope="local">
        <function-prolog>
            <![CDATA[
                Moving ospl process's logs (ospl-info and ospl-error) to destination host.
            ]]>
        </function-prolog>
        <function-epilog>
            <![CDATA[
                Moving ospl process's logs (ospl-info and ospl-error) to destination host and adding source host name.
        ]]>
        </function-epilog>

        <function-list-args>
            <function-required-arg name="source_host">
                The host instance with the process.
            </function-required-arg>
            <function-required-arg name="dest_host">
                The host instance where log will be copied.
            </function-required-arg>
            <function-required-arg name="dest_folder">
                Where process log will be stored on the local host.
            </function-required-arg>
        </function-list-args>

        <sequence>
            <script>
                import os
                info_log_file_name = "ospl-info.log"
                error_log_file_name = "ospl-error.log"
                request = "QUERY ENTRY %s" % (source_host.get_ospl_log_dir() + source_host.get_file_sep() + info_log_file_name)
            </script>
            <call function="'STAF'">[source_host.get_staf_url(), "FS", request]</call>
            <script>
                [RC, result] = STAXResult
            </script>

            <if expr="RC == 0">
                <sequence>
                    <!-- Copy the info log from the remote host to the local -->
                    <script>
                        dest_log_file = "ospl-info-" + str(source_host.get_host_name()) + ".log"
                        dest_log_file_path = "%s%s%s"% (dest_folder, dest_host.get_file_sep(), dest_log_file)
                                            
                        request = "COPY FILE %s TOFILE %s TOMACHINE %s" % (source_host.get_ospl_log_dir() + source_host.get_file_sep() +  info_log_file_name, dest_log_file_path, dest_host.get_staf_url())
                    </script>
                    <call function="'STAF'">[source_host.get_staf_url(), "FS", request]</call>
                    <script>
                        [RC, result] = STAXResult
                    </script>

                    <if expr="RC != 0">
                        <sequence>
                            <script>
                                err_msg = "MoveProcessLogToHost: Copy log [%s] from [%s] to [%s] failed with result [%s] [%s]"%\
                                    (info_log_file_name,
                                    source_host.get_host_name(),
                                    dest_host.get_host_name(),
                                    RC,
                                    result)
                            </script>
                            <call function="'ShowErrorMsgAndThrowException'">[err_msg]</call>
                        </sequence>
                    </if>
                </sequence>
            </if>
            <script>
                request = "QUERY ENTRY %s" % (source_host.get_ospl_log_dir() + source_host.get_file_sep() + error_log_file_name)
            </script>
            <call function="'STAF'">[source_host.get_staf_url(), "FS", request]</call>
            <script>
                [RC, result] = STAXResult
            </script>
            <if expr="RC == 0">
                <sequence>
                    <!-- Copy the log from the remote host to the local -->
                    <script>

                        dest_log_file = "ospl-error-" + str(source_host.get_host_name()) + ".log"
                        dest_log_file_path = "%s%s%s"% (dest_folder, dest_host.get_file_sep(), dest_log_file)
                        request = "COPY FILE %s TOFILE %s TOMACHINE %s" % (source_host.get_ospl_log_dir() + source_host.get_file_sep() +  error_log_file_name, dest_log_file_path, dest_host.get_staf_url())
                    </script>
                    <call function="'STAF'">[source_host.get_staf_url(), "FS", request]</call>
                    <script>
                        [RC, result] = STAXResult
                    </script>

                    <if expr="RC != 0">
                        <sequence>
                            <script>
                                err_msg = "MoveProcessLogToHost: Copy log [%s] from [%s] to [%s] failed with result [%s] [%s]"%\
                                    (error_log_file_name,
                                    source_host.get_host_name(),
                                    dest_host.get_host_name(),
                                    RC,
                                    result)
                            </script>
                            <call function="'ShowErrorMsgAndThrowException'">[err_msg]</call>
                        </sequence>
                    </if>
                    <!-- Delete the log from the remote host  -->
                    <script>
                        request = "DELETE ENTRY %s CONFIRM RECURSE IGNOREERRORS "%\
                                (source_host.get_ospl_log_dir() + source_host.get_file_sep() + error_log_file_name)
                    </script>
                    <call function="'STAF'">[source_host.get_staf_url(), "FS", request]</call>
                    <script>
                        [RC, result] = STAXResult
                    </script>

                    <if expr="RC != 0">
                        <sequence>
                            <script>
                                err_msg = "MoveProcessLogToHost: Delete log [%s] failed with result [%s] [%s]"%\
                                        (error_log_file_name,
                                        RC,
                                        result)
                            </script>
                        <call function="'ShowErrorMsgAndThrowException'">[err_msg]</call>
                        </sequence>
                    </if>
                </sequence>
            </if>
        </sequence>
  </function>
<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
  </stax>