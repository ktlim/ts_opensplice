<?xml version="1.0" encoding="utf-8" standalone="no"?>
<!DOCTYPE stax SYSTEM "stax.dtd">

<!--
-->

<stax>
    <!-- Define default function to execute -->
    <defaultcall function="touchstone_main"/>

<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
    <!-- Function runs the DDS TouchStones -->
    <function name="touchstone_main" scope="local">

        <!-- Function description -->
        <function-prolog>
        </function-prolog>

        <function-list-args>
            <function-required-arg name="test_duration">
                How long the test will pass in seconds.
            </function-required-arg>

            <function-required-arg name="master_host_name">
                The name for the "master" host (i.e. 'my_computer1').
            </function-required-arg>
            <function-required-arg name="slave_host_name">
                The name for the "slave" host (i.e. 'my_computer2').
            </function-required-arg>

            <function-required-arg name="master_ospl_home">
                The OSPL location on the master host.
            </function-required-arg>
            <function-required-arg name="slave_ospl_home">
                The OSPL location on the slave host.
            </function-required-arg>

            <function-required-arg name="master_log_dir">
                The location where the logs will be stored on the master host.
            </function-required-arg>
            <function-required-arg name="slave_log_dir">
                The location where the logs will be stored on the slave host.
            </function-required-arg>

            <function-required-arg name="master_ts_bin">
                The location of the DDS TouchStones binaries on the master host.
            </function-required-arg>
            <function-required-arg name="slave_ts_bin">
                The location of the DDS TouchStones binaries on the slave host.
            </function-required-arg>

            <function-required-arg name="master_ts_lang">
                The language of the DDS TouchStones on the master host ('C', 'C++', 'Java').
            </function-required-arg>
            <function-required-arg name="slave_ts_lang">
                The language of the DDS TouchStones on the slave host ('C', 'C++', 'Java').
            </function-required-arg>

            <function-required-arg name="master_ts_number">
                The number of the DDS TouchStones on the master host.
            </function-required-arg>
            <function-required-arg name="slave_ts_number">
                The number of the DDS TouchStones on the slave host.
            </function-required-arg>

            <function-required-arg name="runtype">
                Whether to run in SP or SHM mode
            </function-required-arg>

            <function-required-arg name="master_ts_group_id">
                The group id of the DDS TouchStones on the master host.
            </function-required-arg>
            <function-required-arg name="slave_ts_group_id">
                The group id of the DDS TouchStones on the slave host.
            </function-required-arg>

            <function-required-arg name="master_ospl_config">
                The location of the OSPL config on the master host.
            </function-required-arg>
            <function-required-arg name="slave_ospl_config">
                The location of the OSPL config on the slave host.
            </function-required-arg>

            <function-required-arg name="test_sub_type">
                The test type e.g SN = Single Node, MN = Multi Node.
            </function-required-arg>
            <function-required-arg name="master_recorder_script">
                The DDS TouchStone recorder script on the master host which will be used for testing.
            </function-required-arg>

            <function-optional-arg name="master_ts_start_app_id" default="1">
                The start application id of the DDS TouchStones on the master host.
            </function-optional-arg>
            <function-optional-arg name="slave_ts_start_app_id" default="1">
                The start application id of the DDS TouchStones on the master host.
            </function-optional-arg>

            <function-optional-arg name="master_staf_port" default="'6500'">
                The STAF port number on the master host you wish test on in double quotes, use the following format: "port"
            </function-optional-arg>
            <function-optional-arg name="slave_staf_port" default="'6500'">
                The STAF port number on the the slave host you wish to test on in double quotes, use the following format: "port"
            </function-optional-arg>
        </function-list-args>

        <!-- Function body begin -->

        <sequence>
        <import file="'../stax/test_ospl.xml'"/>
            <try>
                <sequence>
                    <call function='"GetStafLocalTcpPort"'/>
                    <script>
                        localhost_staf_port = STAXResult
                    </script>
                    <call function="'Initialise'"/>
                    <script>
                        from time import *

                        # Get starting test time:
                        start_time = time()
                        time_stamp = strftime("%d-%m-%Y-%H-%M-%S", localtime())
                        #time_stamp = "13-04-2011-15-55-09"

                        # Create test case:
                        test_scenario = TouchStoneTestScenario("DDS Touchstones",
                                                               "Test DDS TouchStones [%s(%s*%d) VS %s(%s*%d)]"%\
                                                               (master_host_name, master_ts_lang, master_ts_number,
                                                                slave_host_name,  slave_ts_lang,  slave_ts_number),
                                                                master_log_dir)

                        # Define "master" host:
                        master_host = test_scenario.define_host(ospl_home = master_ospl_home,
                                                                test_root = master_log_dir,
                                                                host_name = master_host_name,
                                                                staf_port = master_staf_port)
                        # Define "slave" host:
                        slave_host  = test_scenario.define_host(ospl_home = slave_ospl_home,
                                                                test_root = slave_log_dir,
                                                                host_name = slave_host_name,
                                                                staf_port = slave_staf_port)
                        # Used to create test log dir:
                        test_type = "TouchStones" + test_sub_type

                        # Define "local" host:
                        local_host = Host(staf_port = localhost_staf_port)
                        local_host.set_log_dir(os.path.join(master_log_dir, test_type, time_stamp))
                        # Set result log file for the test scenario:
                        test_scenario.set_result_file( os.path.join(local_host.get_log_dir(), "result.log"))

                        # Set test case result log file:
                        this_xml_dir = STAXCurrentXMLFile[:STAXCurrentXMLFile.rfind(os.sep)]
                        master_host.set_log_dir(this_xml_dir)
                    </script>

                    <!-- For all defined hosts -->
                    <iterate var="host" in="test_scenario.get_all_hosts()">
                        <!-- Init the host -->
                        <call function="'InitHost'">host</call>
                    </iterate>
                     <script>
                            test_scenario.set_test_scenario_initialized(1)
                    </script>

                </sequence>
                <!-- Catch all possible exceptions -->
                <catch exception="'...'" typevar="type" var="info">
                    <sequence>
                        <script>
                            test_scenario.fail()
                            test_scenario.errors.append("Initializing process error: %s (%s)!"% (type, info))
                        </script>
                    </sequence>
                </catch>
            </try>

            <if expr="test_scenario.is_test_scenario_initialized() == 1">
                <sequence>
                    <try>
                        <sequence>
                            <script>
                                shm_type = "shm"
                                # "master" host file separator alias:
                                mfs = master_host.get_file_sep()
                                # "slave" host file separator alias:
                                sfs = slave_host.get_file_sep()

                                # DDS Touchstone java instance:
                                ts_jar = "touchstone.jar"

                                # Map for the language:
                                ts_lang = {"C"    : "c",
                                           "C++"  : "cpp",
                                           "Java" : "java"}

                                # Map for the language executables:
                                master_ts_exec = {"C"    : master_ts_bin + mfs + "touchstone_c",
                                                  "C++"  : master_ts_bin + mfs + "touchstone_cpp",
                                                  "Java" : "java"}
                                slave_ts_exec = {"C"    : slave_ts_bin + sfs + "touchstone_c",
                                                 "C++"  : slave_ts_bin + sfs + "touchstone_cpp",
                                                 "Java" : "java"}

                                # Map for the language executables additional arguments:
                                ts_exec_args = {"C"    : "",
                                                "C++"  : "",
                                                "Java" : "touchstone.Main"}

                                # Set log sub-directories for the hosts:
                                master_host_alias = master_host.get_host_name()
                                slave_host_alias = slave_host.get_host_name()
                                if master_host.get_host_name() == slave_host.get_host_name():
                                    master_host_alias = master_host.get_host_name() + '(1)'
                                    slave_host_alias = slave_host.get_host_name() + '(2)'

                                master_log_subdir = test_type                   + mfs +\
                                                    time_stamp                  + mfs +\
                                                    master_host_alias + '__' + ts_lang[master_ts_lang] + '__' + str(master_ts_number)
                                slave_log_subdir = test_type                    + sfs +\
                                                   time_stamp                   + sfs +\
                                                   slave_host_alias + '__' + ts_lang[slave_ts_lang] + '__' + str(slave_ts_number)
                            </script>

                            <script>
                                import os
                                # Set log directory for the hosts:
                                master_host.set_log_dir(master_host.get_test_root() + mfs + master_log_subdir)
                                slave_host.set_log_dir(slave_host.get_test_root()   + sfs + slave_log_subdir)

                                # Set log directory for the ospl daemon on the hosts:
                                master_host.set_ospl_log_dir(master_host.get_log_dir())
                                slave_host.set_ospl_log_dir(slave_host.get_log_dir())

                                # Set OSPL URI for the hosts:
                                master_host.set_ospl_uri("file://" + master_ospl_config)
                                slave_host.set_ospl_uri("file://"  + slave_ospl_config)
                                master_host.set_env_value("OSPL_URI", master_host.get_ospl_uri())
                                slave_host.set_env_value("OSPL_URI", slave_host.get_ospl_uri())

                                # Add DDS ToucStone java instance to the hosts CLASSPATH:
                                master_saj_jar = master_ospl_home + mfs + "jar" + mfs + "dcpssaj.jar"
                                master_ts_jar = master_ts_bin + mfs + ts_jar
                                old_classpath = master_host.get_env_value("CLASSPATH")
                                new_classpath = master_ts_jar + master_host.get_path_sep() + master_saj_jar + master_host.get_path_sep() + old_classpath
                                master_host.set_env_value("CLASSPATH", new_classpath)

                                print "classpath on master_host is %s" % new_classpath

                                slave_ts_jar  = slave_ts_bin + sfs + ts_jar
                                slave_saj_jar = slave_ospl_home + sfs + "jar" + sfs + "dcpssaj.jar"
                                old_classpath = slave_host.get_env_value("CLASSPATH")
                                new_classpath = slave_ts_jar + slave_host.get_path_sep() + slave_saj_jar + slave_host.get_path_sep() + old_classpath
                                slave_host.set_env_value("CLASSPATH", new_classpath)

                                print "classpath on slave_host is %s " % new_classpath

                                # Define "watcher" process for the hosts:
                                master_watcher = STAXGlobal(master_host.define_process(command  = master_ts_bin             + mfs + "watcher",
                                                                                       log_file = master_host.get_log_dir() + mfs + "watcher.log"))
                                slave_watcher =  STAXGlobal(slave_host.define_process(command  = slave_ts_bin                + sfs + "watcher",
                                                                                      log_file = slave_host.get_log_dir()    + sfs + "watcher.log"))

                                # Define "touchstone" process for the hosts:
                                master_ts = STAXGlobal([])
                                while len(master_ts) &lt; master_ts_number:
                                    # Set touchstone argumens:
                                    app_id   = master_ts_start_app_id + len(master_ts)
                                    gr_id    = master_ts_group_id
                                    ts_args  = "%d %d"% (app_id, gr_id)
                                    if ts_exec_args[master_ts_lang] != "":
                                        ts_args = ts_exec_args[master_ts_lang] + " " + ts_args
                                   # Set touchstone log file:
                                    ts_log = master_host.get_log_dir() + mfs + ("touchstone_%d_%d.log"% (app_id, gr_id))
                                    touchstone = master_host.define_process(command  = master_ts_exec[master_ts_lang],
                                                                            args     = ts_args,
                                                                            log_file = ts_log)
                                    master_ts.append(touchstone)

                                slave_ts = STAXGlobal([])
                                while len(slave_ts) &lt; slave_ts_number:
                                    # Set touchstone argumens:
                                    app_id   = slave_ts_start_app_id + len(slave_ts)
                                    gr_id    = slave_ts_group_id
                                    ts_args  = "%d %d"% (app_id, gr_id)
                                    if ts_exec_args[slave_ts_lang] != "":
                                        ts_args = ts_exec_args[slave_ts_lang] + " " + ts_args
                                    # Set touchstone log file:
                                    ts_log = slave_host.get_log_dir() + sfs + ("touchstone_%d_%d.log"% (app_id, gr_id))
                                    touchstone = slave_host.define_process(command  = slave_ts_exec[slave_ts_lang],
                                                                           args     = ts_args,
                                                                           log_file = ts_log)
                                    slave_ts.append(touchstone)

                                # Define "recorder" process for the master host only:
                                master_recorder = master_host.define_process(command  = master_ts_bin + mfs + "recorder",
                                                                             args     = "--autoplay -v 99 " + master_recorder_script,
                                                                             log_file = master_host.get_log_dir() + mfs + "recorder.log")
                            </script>

                            <!-- For all defined hosts -->
                            <iterate var="host" in="test_scenario.get_all_hosts()">
                                <!-- Create log directory on the host -->
                                <call function="'CreateLogDirOnHost'">host</call>
                            </iterate>
                        </sequence>
                        <!-- Catch all possible exceptions -->
                        <catch exception="'...'" typevar="type" var="info">
                            <sequence>
                                <script>
                                    test_scenario.fail()
                                    test_scenario.errors.append("Error duaring test scenario: %s (%s)!"% (type, info))
                                </script>
                            </sequence>
                        </catch>
                    </try>
                    <!-- Start testing -->
                    <testcase name = "test_scenario.get_name()">
                        <sequence>
                            <try>
                                <sequence>
                        <message>"master_host log dir is %s" % master_host.get_log_dir()</message>
                                    <if expr="runtype == shm_type">
                                        <!-- For all hosts start OSPL daemon in parellel -->
                                        <iterate var="host" in="test_scenario.get_all_hosts()">
                                            <call function="'StartOSPL'">host</call>
                                        </iterate>
                                    </if>
                                    <!-- Wait 5 sec to allow OSPL daemon start -->
                                    <script>sleep(5)</script>

                                    <!-- Start "touchstones" on the hosts -->
                                    <parallel>
                                        <!-- Master -->
                                            <iterate var="touchstone" in="master_ts">
                                                <call function="'SpawnProcess'">[master_host, touchstone]</call>
                                            </iterate>
                                        <!-- Slave -->
                                            <iterate var="touchstone" in="slave_ts">
                                                <call function="'SpawnProcess'">[slave_host, touchstone]</call>
                                            </iterate>
                                    </parallel>

                                    <!-- Wait 7 sec to allow touchstone start -->
                                    <script>sleep(7)</script>

                                    <!-- Start "watcher" on the hosts -->
                                    <parallel>
                                        <call function="'SpawnProcess'">[master_host, master_watcher]</call>
                                        <call function="'SpawnProcess'">[slave_host,  slave_watcher]</call>
                                    </parallel>

                                    <!-- Wait 7 sec to allow watcher start -->
                                    <script>sleep(7)</script>

                                    <!-- Start "recorder" on the "master" host -->
                                    <call function="'SpawnProcess'">[master_host, master_recorder]</call>

                                    <!-- Wait to allow DDS TouchStone framework work -->
                                    <message>"Performing tests [%d] seconds..."% test_duration</message>
                                    <script>sleep(test_duration)</script>
                                    <message>"Done."</message>

                                    <!-- Stop "watcher" on the hosts -->
                                    <parallel>
                                        <call function="'TerminateProcess'">[master_host, master_watcher]</call>
                                        <call function="'TerminateProcess'">[slave_host,  slave_watcher]</call>
                                    </parallel>

                                    <!-- Stop "recorder" on the "master" host -->
                                    <call function="'TerminateProcess'">[master_host, master_recorder]</call>

                                    <!-- Stop "touchstones" on the hosts -->
                                    <parallel>
                                        <!-- Master -->
                                        <iterate var="touchstone" in="master_ts">
                                            <call function="'TerminateProcess'">[master_host, touchstone]</call>
                                        </iterate>
                                        <!-- Slave -->
                                        <iterate var="touchstone" in="slave_ts">
                                            <call function="'TerminateProcess'">[slave_host, touchstone]</call>
                                        </iterate>
                                    </parallel>

                                    <!-- Get logs from the hosts -->
                                    <parallel>
                                        <call function="'CopyDirFromTo'">[master_host,
                                                                          local_host,
                                                                          master_host.get_log_dir(),
                                                                          os.path.join(test_scenario.get_log_root(), master_log_subdir)]</call>
                                        <call function="'CopyDirFromTo'">[slave_host,
                                                                          local_host,
                                                                          slave_host.get_log_dir(),
                                                                          os.path.join(test_scenario.get_log_root(), slave_log_subdir)]</call>
                                    </parallel>
                                </sequence>
                                <!-- Catch all possible exceptions -->
                                <catch exception="'...'" typevar="type" var="info">
                                    <sequence>
                                        <script>
                                            test_scenario.fail()
                                            test_scenario.errors.append("Error during test scenario: %s (%s)!"% (type, info))
                                        </script>
                                    </sequence>
                                </catch>
                                <!-- At the end -->
                                <finally>
                                    <try>
                                        <sequence>
                                            <if expr="runtype == shm_type">
                                                <!-- For all hosts stop OSPL daemon in parellel -->
                                                <paralleliterate var="host" in="test_scenario.get_all_hosts()">
                                                    <call function="'StopOSPL'">host</call>
                                                </paralleliterate>
                                            </if>
                                        </sequence>
                                        <catch exception="'...'" typevar="type" var="info">
                                            <sequence>
                                                <script>
                                                    test_scenario.fail()
                                                    test_scenario.errors.append("Error during test scenario: %s (%s)!"% (type, info))
                                                </script>
                                            </sequence>
                                        </catch>
                                    </try>
                                </finally>
                            </try>
                        </sequence>
                    </testcase>
                </sequence>
            </if>
            <script>
                # Get stopping test time:
                stop_time    = time()
                # Calc the difference:
                elapsed_secs = stop_time - start_time
                try:
                    test_scenario.check_results(os.path.join(test_scenario.get_log_root(), master_log_subdir), master_host)
                    test_scenario.check_results(os.path.join(test_scenario.get_log_root(), slave_log_subdir), slave_host)
                except:
                    pass
                test_scenario.analyze()
            </script>
            <message>'Test complete - ran for [%d] seconds.'% elapsed_secs</message>
        </sequence>
        <!-- Function body end -->

    </function>
    <!-- function: touchstone_main -->
<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
</stax>
