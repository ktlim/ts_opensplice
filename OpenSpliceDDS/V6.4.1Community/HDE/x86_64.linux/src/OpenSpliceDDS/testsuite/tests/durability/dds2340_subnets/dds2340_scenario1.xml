<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE stax SYSTEM "../../stax/stax.dtd">
<!--
## @defgroup dds2340_scenario1 DDS2340 - Merging across multiple subnets (merge-policy scenario 1)
#
# This test runs a mergepolicy scenario on hosts in two different subnets.
# The only modifications are in the OpenSplice configuration files: hostnames are hardcoded and 
# communicate using point-to-point unicast instead of the default broadcast (which doesn't work across subnet boundaries).
# If this testcase needs to be run on different hosts, make sure a suitable configuration file is added to the 'etc' directory
# for the particular host.
#
# To get an understanding of the scenario, see the original test description: \ref dds1583_scenario1
#
-->
<stax>
    <defaultcall function="Run"/>
    <function name="Run">
        <function-list-args>
            <function-optional-arg name="host1" default="None">
                STAF machine nickname (hostname) of host 1
            </function-optional-arg>
            <function-optional-arg name="host2" default="None">
                STAF machine nickname (hostname) of host 2
            </function-optional-arg>
        </function-list-args>
        
        <sequence>
            <script> 
                tc_hostsCount = 2
                tc_hosts = []
                tc_osplPortsCount = 3
                tc_osplPorts = []
                STAXMessageLog = 1
                if ((STAXJobName == None) or (len(STAXJobName) == 0)):
                    STAXJobName = 'Job%d_dds2340_scenario1' % STAXJobID
            </script>
            <import file="'../../common/HostManager.xml'"/>
            <import file="'../common/Publisher.xml'"/>
            <import file="'../common/Subscriber.xml'"/>
            <import file="'../../common/Firewall.xml'"/>
            <import file="'../../common/DurabilityService.xml'"/>
            <call function="'Initialize'"/>
            <try> <!-- Catching Resource.* and Testcase.* exceptions -->
                <sequence>
                    <!-- Reserve UDP ports -->
                    <block name="'RequestPorts'">
                        <loop from="0" to="tc_osplPortsCount - 1">
                            <sequence>
                                <call function="'RequestPortResource'"/>
                                <script>
                                    [RC, port] = STAXResult
                                    tc_osplPorts.append(port)
                                </script>
                            </sequence>
                        </loop>
                    </block>
                    
                    <!-- Request two linux machines by hostname -->
                    <block name="'RequestHosts'">
                        <if expr="(host1 != None) and (host2 != None)">
                            <sequence>
                                <call-with-map function="'RequestHost'">
                                    <call-map-arg name="'hostname'">host1</call-map-arg>
                                </call-with-map>
                                <script>tc_hosts.append(STAXResult)</script>
                                <call-with-map function="'RequestHost'">
                                    <call-map-arg name="'hostname'">host2</call-map-arg>
                                </call-with-map>
                                <script>tc_hosts.append(STAXResult)</script>
                            </sequence>
                            <else>
                                <loop from="0" to="tc_hostsCount - 1">
                                    <sequence>
                                        <call-with-map function="'RequestHost'">
                                            <call-map-arg name="'target'">'.*linux2\.6.*'</call-map-arg>
                                        </call-with-map>
                                        <script>tc_hosts.append(STAXResult)</script>
                                    </sequence>
                                </loop>
                            </else>
                        </if>
                    </block>
                    
                    <!-- Deploy OpenSplice on the machines and set some common properties -->
                    <block name="'DeployHosts'">
                        <paralleliterate in="tc_hosts" var="host">
                            <sequence>
                                <call-with-map function="'DeployHost'">
                                    <call-map-arg name="'host'">host</call-map-arg>
                                </call-with-map>
                                <script>
                                    # Set some common parameters
                                    host.set_scenario('tc_dds2340_subnets_001')
                                    host.set_env('OSPL_BESTEFFORT_PORT', tc_osplPorts[0])
                                    host.set_env('OSPL_RELIABLE_PORT', tc_osplPorts[1])
                                    host.set_env('OSPL_DISCOVERY_PORT', tc_osplPorts[2])
                                    host.set_env('OSPL_DOMAIN', host.get_scenario())                            
                                    host.set_env('OSPL_ERRORFILE', host.get_scenario() + '-ospl-error.log')
                                    host.set_env('OSPL_INFOFILE', host.get_scenario() + '-ospl-info.log')
                                    host.set_env('OSPL_DURABILITY_TRACE', host.get_scenario() + '-durability.log')
                                </script>
                            </sequence>
                        </paralleliterate>
                    </block>
                    
                    <block name="'DeployFiles'">
                        <paralleliterate in="tc_hosts" var="host">
                            <sequence>
                                <call function="'DeployPublisher'">host</call>
                                <call function="'DeploySubscriber'">host</call>
                                <call function="'DeployFwTool'">host</call>
                            </sequence>
                        </paralleliterate>
                    </block>
                    
                    <block name="'RunScenario'">
                        <sequence>
                            <!-- Global variables to keep track of durability log index between testcases -->
                            <script>
                                logIndex = STAXGlobal([])
                                nodeIds = STAXGlobal([])
                                for host in tc_hosts:
                                    logIndex.append(0)
                                    nodeIds.append(0)
                            </script>
                        
                            <call function="'tc_dds2340_subnets_001a'"/>

                            <call function="'tc_dds2340_subnets_001b'"/>

                            <call function="'tc_dds2340_subnets_001c'"/>
                        </sequence>
                    </block>
                </sequence>
                
                <catch exception="'Resource'" var="msg">
                    <log message="1">'An exception occurred related to a resource needed to run this test. The test cannot start.\nException: %s' % msg</log>
                </catch>
                
                <catch exception="'TestCase'" var="msg">
                    <sequence>
                        <log message="1">'An exception occured during a testcase. Succeeding tests are cancelled.\nException: %s' % msg</log>
                        <if expr="STAXCurrentTestcase != None">
                            <tcstatus result="'fail'">'Exception occurred'</tcstatus>
                        </if>
                    </sequence>
                </catch>
                
                <finally>
                    <!-- Release, cleanup resources -->
                    <sequence>
                        <if expr="len(tc_hosts) > 0">
                            <sequence>
                                <call function="'tc_dds2340_subnets_001d'"/>
                                <paralleliterate in="tc_hosts" var="host">
                                    <call function="'CleanupHost'">host</call>
                                </paralleliterate>
                            </sequence>
                        </if>
                        <loop var="idx" from="0" to="tc_osplPortsCount - 1">
                            <sequence>
                                <call function="'ReleasePortResource'">tc_osplPorts[idx]</call>
                            </sequence>
                        </loop>
                    </sequence>
                </finally>
            </try>
        </sequence>
    </function>
    
    <!-- Start OpenSplice on all nodes, verify preferred aligner -->
    <function name="tc_dds2340_subnets_001a">
        <function-no-args/>
        <testcase name="'tc_dds2340_subnets_001a'">
            <sequence>
                <script>proceed = STAXGlobal(1)</script>
                
                <!-- Start OpenSplice -->
                <paralleliterate in="tc_hosts" var="host">
                    <sequence>
                        <if expr="host.isWindows()">
                            <throw exception="'TestCase.IncompatibleHost'">'This testcase requires Linux hosts, %s is not usable' % host.get_hostname()</throw>
                        </if>
                        <call function="'SetURI'">host, os.path.dirname(STAXCurrentXMLFile) + file_sep + 'etc' + file_sep + 'config_dds2340-001-' + host.get_hostname() + '.xml'</call>
                        <call function="'StartOpenSplice'">host</call>
                        <tcstatus result="'info'">'Started OpenSplice on %s' % host.get_hostname()</tcstatus>
                    </sequence>
                </paralleliterate>
                
                <!-- Wait (max. 30 secs) for persistent source discovery -->
                <paralleliterate in="tc_hosts" var="host" indexvar="i">
                    <sequence>
                        <script>
                            success = 0
                            # Get the timestamp of service startup, node id, match the start of persistent source discovery state and get timestamp at end of state
                            conditions = []
                            conditions.append(re.compile(R"([0-9]+\.[0-9]+) INIT \(mainThread\) -> Configuration:"))
                            conditions.append(re.compile(R"[0-9]+\.[0-9]+ DISCOVER_FELLOWS_GROUPS \(mainThread\) -> My address is: '([0-9]+)'"))
                            conditions.append(re.compile(R"[0-9]+\.[0-9]+ DISCOVER_PERSISTENT_SOURCE \(mainThread\) -> ----ENTERING STATE----"))
                            conditions.append(re.compile(R"([0-9]+\.[0-9]+) DISCOVER_PERSISTENT_SOURCE \(mainThread\) -> ----LEAVING STATE----")) 
                        </script>
                        <timer duration="'30s'">
                            <loop while="success == 0">
                                <sequence>
                                    <stafcmd name="'PersistentSourceDiscoveryDelay'">
                                        <location>host.get_staf_url()</location>
                                        <service>'DELAY'</service>
                                        <request>'DELAY 5s'</request>
                                    </stafcmd>
                                    <call function="'GetDurabilityLog'">host, 1</call>
                                    <script>log = STAXResult</script>
                                    <if expr="log != None">
                                        <sequence>
                                            <call function="'VerifyLog'">log, conditions</call>
                                            <script>matchIndex, matches = STAXResult</script>
                                            <if expr="len(matches) == len(conditions)">
                                                <sequence>
                                                    <script>
                                                        tsServiceStart = float(matches[0].group(1))
                                                        nodeId = matches[1].group(1)
                                                        nodeIds[i] = nodeId # store durability ID for use later in testcase
                                                        logIndex[i] = matchIndex # store index in durability trace log for later use
                                                        tsEnd = float(matches[3].group(1))
                                                        success = 1
                                                    </script>
                                                    <log message="STAXMessageLog" level="'info'">'Host %s acquired persistent source %.2fs after service start' % (host.get_hostname(), tsEnd-tsServiceStart)</log>
                                                </sequence>
                                                <else>
                                                    <log level="'debug'" message="0">'Host %s failed persistent source discovery\nFailed condition: %s' % (host.get_hostname(), conditions[len(matches)].pattern)</log>
                                                </else>
                                            </if>
                                        </sequence>
                                    </if>
                                </sequence>
                            </loop>
                        </timer>
                        <!-- Timer timeout -->
                        <if expr="RC != 0">
                            <sequence>
                                <script>
                                    proceed.set(0)
                                    msg = 'Failed to verify persistent source discovery on host %s (timeout): ' % host.get_hostname()
                                    if log == None:
                                        msg += 'Could not get durability tracing log'
                                    else:
                                        msg += 'Failed condition (%s)\n' % conditions[len(matches)].pattern
                                        msg += 'Tracing log:\n'
                                        msg += '\n'.join(log)
                                </script>
                                <log message="STAXMessageLog" level="'debug'">msg</log>
                                <tcstatus result="'fail'">'Failed to verify persistent source discovery on host %s (timeout)' % host.get_hostname()</tcstatus>
                            </sequence>
                        </if>
                    </sequence>
                </paralleliterate>
                
                <if expr="proceed">
                    <sequence>
                        <call function="'GetMasterNode'">[tc_hosts]</call>
                        <script>rc, result = STAXResult</script>
                        <log message="STAXMessageLog" level="'info'">'Preferred aligner selection:\n%s' % result</log>
                        <if expr="rc">
                            <tcstatus result="'pass'">'Verified preferred aligner'</tcstatus>
                            <else>
                                <sequence>
                                    <tcstatus result="'fail'">'Failed to verify preferred aligner'</tcstatus>
                                    <breakpoint/>
                                    <!-- This failure makes running other tests useless, so throw appropriate exception -->
                                    
                                    <throw exception="'Testcase.Failure'">'Failed to verify preferred aligner'</throw>
                                    
                                </sequence>
                            </else>
                        </if>
                    </sequence>
                </if>
            </sequence>
        </testcase>
    </function>
    
    <function name="tc_dds2340_subnets_001b">
        <function-no-args/>
        <testcase name="'tc_dds2340_subnets_001b'">
            <sequence>
                <!-- Block networking ports -->
                <script>
                    proceed = STAXGlobal(1)
                    ports = "%d,%d,%d,%d" % (int(tc_hosts[0].get_env('OSPL_BESTEFFORT_PORT')), \
                                             int(tc_hosts[0].get_env('OSPL_DISCOVERY_PORT')), \
                                             int(tc_hosts[0].get_env('OSPL_RELIABLE_PORT')), \
                                             int(tc_hosts[0].get_env('OSPL_RELIABLE_PORT')) + 1)
                </script>
                <!-- On host 0, block incoming traffic from host 1 -->
                <log message="STAXMessageLog" level="'info'">'Dropping network connections'</log>
                <call function="'Firewall'">
                    { 'host':    tc_hosts[0],
                      'src_host': tc_hosts[1],
                      'action':   'close',
                      'portStr':  ports }
                </call>
                <!-- On host 1, block incoming traffic from host 0 -->
                <call function="'Firewall'">
                    { 'host':    tc_hosts[1],
                      'src_host': tc_hosts[0],
                      'action':   'close',
                      'portStr':  ports }
                </call>
                
                <!--  Catch any exception while ports are blocked and unblock ports in finally clause -->
                <try>  
                    <sequence>
                        <!-- Wait (max 30s) for lost fellows -->
                        <script>
                            tsLostFellows = STAXGlobal([0,0])
                            success = 0
                            host_conditions = [[re.compile(R"([0-9]+\.[0-9]+) ([A-Z_]+) \(statusListener\) -> Removing fellow: (%s)" % nodeIds[1])],
                                               [re.compile(R"([0-9]+\.[0-9]+) ([A-Z_]+) \(statusListener\) -> Removing fellow: (%s)" % nodeIds[0])]]
                        </script>
                        <paralleliterate in="tc_hosts" var="host" indexvar="i">
                            <sequence>
                                <timer duration="'30s'">
                                    <loop while="success == 0">
                                        <sequence>
                                            <stafcmd name="'NetworkFailureDelay'">
                                                <location>host.get_staf_url()</location>
                                                <service>'DELAY'</service>
                                                <request>'DELAY 5s'</request>
                                            </stafcmd>
                                            <call function="'GetDurabilityLog'">host, 1</call>
                                            <script>log = STAXResult</script>
                                            <if expr="log != None">
                                                <sequence>
                                                    <call function="'VerifyLog'">log, host_conditions[i], logIndex[i]</call>
                                                    <script>lineIndex, matches = STAXResult</script>
                                                    <if expr="len(matches) == len(host_conditions[i])">
                                                        <sequence>
                                                            <script>
                                                                tsLostFellows.insert(i, float(matches[0].group(1)))
                                                                success = 1
                                                                logIndex[i] = lineIndex
                                                            </script>
                                                            <log message="STAXMessageLog" level="'info'">'Host %s lost fellow %s (in state %s)' % (host.get_hostname(), matches[0].group(3), matches[0].group(2))</log>
                                                        </sequence>
                                                        <else>
                                                            <log level="'debug'" message="0">'Host %s failed to lose fellow\nFailed condition: %s' % (host.get_hostname(), host_conditions[i][0].pattern)</log>
                                                        </else>
                                                    </if>
                                                </sequence>
                                            </if>
                                        </sequence>
                                    </loop>
                                </timer>
                                <!-- Timer timeout -->
                                <if expr="RC != 0">
                                    <sequence>
                                        <script>
                                            proceed.set(0)
                                            msg = 'Failed to verify lost fellow on host %s (timeout)' % host.get_hostname()
                                        </script>
                                        <log message="STAXMessageLog" level="'debug'">msg</log>
                                        <tcstatus result="'fail'">msg</tcstatus>
                                    </sequence>
                                </if>
                            </sequence>
                        </paralleliterate>
                
                        <!-- Publish samples on host 0 -->
                        <script>
                            sample_file = os.path.dirname(STAXCurrentXMLFile) + file_sep + 'etc' + file_sep + 'samples_dds2340-001b.txt'
                        </script>
                        <call function="'Publisher'">
                            { 'host': tc_hosts[0],
                            'samples': sample_file }
                        </call>
                        <if expr="STAXResult != STAFRC.Ok">
                            <sequence>
                                <script>proceed.set(0)</script>
                                <log message="STAXMessageLog" level="'info'">'Publisher failed on %s (RC=%s)' % (tc_hosts[0].get_hostname(), STAXResult)</log>
                                <tcstatus result="'fail'">'Failed to write samples on %s' % tc_hosts[0].get_hostname()</tcstatus>
                            </sequence>
                            <else>
                                <log message="STAXMessageLog" level="'info'">'Publisher successful on %s (RC=%s)' % (tc_hosts[0].get_hostname(), STAXResult)</log>
                            </else>
                        </if>
                    </sequence>
                    <finally>
                        <sequence>
                            <!-- Unblock networking ports -->
                            <log message="STAXMessageLog" level="'info'">'Restoring network connections'</log>
                            <call function="'Firewall'">
                                { 'host':    tc_hosts[0],
                                'src_host': tc_hosts[1],
                                'action':   'open',
                                'portStr':  ports }
                            </call>
                            <call function="'Firewall'">
                                { 'host':    tc_hosts[1],
                                'src_host': tc_hosts[0],
                                'action':   'open',
                                'portStr':  ports }
                            </call>
                        </sequence>
                    </finally>
                </try>
                
                <!-- Wait (max 30s) for fellow rediscovery -->
                <script>
                    success = 0
                    merge_cond = re.compile(R"([0-9]+\.[0-9]+) COMPLETE \(sampleChainListener\) -> Updating state of namespace 'defaultNamespace' to '([0-9])' for role 'DefaultRole'")
                    host_conditions = [[re.compile(R"([0-9]+\.[0-9]+) COMPLETE \(groupLocalListener\) -> New fellow '(%s)' with state ([A-Z_]+)" % nodeIds[1]), merge_cond],
                                       [re.compile(R"([0-9]+\.[0-9]+) COMPLETE \(groupLocalListener\) -> New fellow '(%s)' with state ([A-Z_]+)" % nodeIds[0]), merge_cond]]
                </script>
                        <paralleliterate in="tc_hosts" var="host" indexvar="i">
                            <sequence>
                                <script>
                                </script>
                                <timer duration="'30s'">
                                    <loop while="success == 0">
                                        <sequence>
                                            <stafcmd name="'NetworkRestoreDelay'">
                                                <location>host.get_staf_url()</location>
                                                <service>'DELAY'</service>
                                                <request>'DELAY 5s'</request>
                                            </stafcmd>
                                            <call function="'GetDurabilityLog'">host, 1</call>
                                            <script>log = STAXResult</script>
                                            <if expr="log != None">
                                                <sequence>
                                                    <call function="'VerifyLog'">log, host_conditions[i], logIndex[i]</call>
                                                    <script>lineIndex, matches = STAXResult</script>
                                                    <if expr="len(matches) == len(host_conditions[i])">
                                                        <sequence>
                                                            <script>
                                                                disconnectTime = float(matches[0].group(1)) - tsLostFellows[i]
                                                                mergeTime = float(matches[1].group(1)) - float(matches[0].group(1))
                                                                success = 1
                                                            </script>
                                                            <log message="STAXMessageLog" level="'info'">'Host %s discovered fellow %s (state: %s, disconnected: %.2fs, consistent: %.2fs)' % (host.get_hostname(), matches[0].group(2), matches[0].group(3), disconnectTime, mergeTime)</log>
                                                        </sequence>
                                                        <else>
                                                            <log level="'debug'" message="0">'Host %s failed to merge with fellow\nFailed condition: %s' % (host.get_hostname(), host_conditions[i][len(matches)].pattern)</log>
                                                        </else>
                                                    </if>
                                                </sequence>
                                            </if>
                                        </sequence>
                                    </loop>
                                </timer>
                                <!-- Timer timeout -->
                                <if expr="RC != 0">
                                    <sequence>
                                        <script>
                                            proceed.set(0)
                                            msg = 'Failed to verify discovery of fellow on host %s (timeout)' % host.get_hostname()
                                        </script>
                                        <log message="STAXMessageLog" level="'debug'">msg</log>
                                        <tcstatus result="'fail'">msg</tcstatus>
                                    </sequence>
                                </if>
                            </sequence>
                        </paralleliterate>
                
                <if expr="proceed">
                    <!-- Read samples on host 1 -->
                    <sequence>
                        <call function="'Subscriber'">
                            { 'host': tc_hosts[1],
                              'samples': sample_file,
                              'take': 1,
                              'wait': 1000 }                       
                        </call>
                        <if expr="STAXResult != STAFRC.Ok">
                            <sequence>
                                <script>proceed.set(0)</script>
                                <log message="STAXMessageLog" level="'info'">'Subscriber failed on %s (RC=%s)' % (tc_hosts[1].get_hostname(), STAXResult)</log>
                                <tcstatus result="'fail'">'Failed to read samples on %s' % tc_hosts[1].get_hostname()</tcstatus>
                            </sequence>
                            <else>
                                <sequence>
                                    <log message="STAXMessageLog" level="'info'">'Subscriber successful on %s (RC=%s)' % (tc_hosts[1].get_hostname(), STAXResult)</log>
                                    <tcstatus result="'pass'">'Read all expected samples'</tcstatus>
                                </sequence>
                            </else>
                        </if>
                    </sequence>
                </if>
            </sequence>
        </testcase>
    </function>

    <function name="tc_dds2340_subnets_001c">
        <function-no-args/>
        <testcase name="'tc_dds2340_subnets_001c'">
            <sequence>
                <!-- Block networking ports -->
                <script>
                    proceed = STAXGlobal(1)
                    ports = "%d,%d,%d,%d" % (int(tc_hosts[0].get_env('OSPL_BESTEFFORT_PORT')), \
                                             int(tc_hosts[0].get_env('OSPL_DISCOVERY_PORT')), \
                                             int(tc_hosts[0].get_env('OSPL_RELIABLE_PORT')), \
                                             int(tc_hosts[0].get_env('OSPL_RELIABLE_PORT')) + 1)
                </script>
                <!-- On host 0, block incoming traffic from host 1 -->
                <log message="STAXMessageLog" level="'info'">'Dropping network connections'</log> 
                <call function="'Firewall'">
                    { 'host':    tc_hosts[0],
                      'src_host': tc_hosts[1],
                      'action':   'close',
                      'portStr':  ports }
                </call>
                <!-- On host 1, block incoming traffic from host 0 -->
                <call function="'Firewall'">
                    { 'host':    tc_hosts[1],
                      'src_host': tc_hosts[0],
                      'action':   'close',
                      'portStr':  ports }
                </call>
                
                <!--  Catch any exception while ports are blocked and unblock ports in finally clause -->
                <try>  
                    <sequence>
                        <!-- Wait (max 30s) for lost fellows -->
                        <script>
                            tsLostFellows = STAXGlobal([])
                            success = 0
                            host_conditions = [[re.compile(R"([0-9]+\.[0-9]+) ([A-Z_]+) \(statusListener\) -> Removing fellow: (%s)" % nodeIds[1])],
                                               [re.compile(R"([0-9]+\.[0-9]+) ([A-Z_]+) \(statusListener\) -> Removing fellow: (%s)" % nodeIds[0])]]
                        </script>
                        <paralleliterate in="tc_hosts" var="host" indexvar="i">
                            <sequence>
                                <timer duration="'30s'">
                                    <loop while="success == 0">
                                        <sequence>
                                            <stafcmd name="'NetworkFailureDelay'">
                                                <location>host.get_staf_url()</location>
                                                <service>'DELAY'</service>
                                                <request>'DELAY 5s'</request>
                                            </stafcmd>
                                            <call function="'GetDurabilityLog'">host, 1</call>
                                            <script>log = STAXResult</script>
                                            <if expr="log != None">
                                                <sequence>
                                                    <call function="'VerifyLog'">log, host_conditions[i], logIndex[i]</call>
                                                    <script>lineIndex, matches = STAXResult</script>
                                                    <if expr="len(matches) == len(host_conditions[i])">
                                                        <sequence>
                                                            <script>
                                                                tsLostFellows.insert(i, float(matches[0].group(1)))
                                                                success = 1
                                                                logIndex[i] = lineIndex
                                                            </script>
                                                            <log message="STAXMessageLog" level="'info'">'Host %s lost fellow %s (in state %s)' % (host.get_hostname(), matches[0].group(3), matches[0].group(2))</log>
                                                        </sequence>
                                                        <else>
                                                            <log level="'debug'" message="0">'Host %s failed to lose fellow\nFailed condition: %s' % (host.get_hostname(), host_conditions[i][0].pattern)</log>
                                                        </else>
                                                    </if>
                                                </sequence>
                                            </if>
                                        </sequence>
                                    </loop>
                                </timer>
                                <!-- Timer timeout -->
                                <if expr="RC != 0">
                                    <sequence>
                                        <script>
                                            proceed.set(0)
                                            msg = 'Failed to verify lost fellow on host %s (timeout)' % host.get_hostname()
                                        </script>
                                        <log message="STAXMessageLog" level="'debug'">msg</log>
                                        <tcstatus result="'fail'">msg</tcstatus>
                                    </sequence>
                                </if>
                            </sequence>
                        </paralleliterate>
                
                        <!-- Publish samples on host 0 -->
                        <script>
                            sample_file = os.path.dirname(STAXCurrentXMLFile) + file_sep + 'etc' + file_sep + 'samples_dds2340-001c_host0.txt'
                        </script>
                        <call function="'Publisher'">
                            { 'host': tc_hosts[0],
                            'samples': sample_file }
                        </call>
                        <if expr="STAXResult != STAFRC.Ok">
                            <sequence>
                                <script>proceed.set(0)</script>
                                <log message="STAXMessageLog" level="'info'">'Publisher failed on %s (RC=%s)' % (tc_hosts[0].get_hostname(), STAXResult)</log>
                                <tcstatus result="'fail'">'Failed to write samples on %s' % tc_hosts[0].get_hostname()</tcstatus>
                            </sequence>
                            <else>
                                <log message="STAXMessageLog" level="'info'">'Publisher successful on %s (RC=%s)' % (tc_hosts[0].get_hostname(), STAXResult)</log>
                            </else>
                        </if>
                        
                        <!--  Publish samples on host 1 -->
                        <script>
                            sample_file = os.path.dirname(STAXCurrentXMLFile) + file_sep + 'etc' + file_sep + 'samples_dds2340-001c_host1.txt'
                        </script>
                        <call function="'Publisher'">
                            { 'host': tc_hosts[1],
                            'samples': sample_file }
                        </call>
                        <if expr="STAXResult != STAFRC.Ok">
                            <sequence>
                                <script>proceed.set(0)</script>
                                <log message="STAXMessageLog" level="'info'">'Publisher failed on %s (RC=%s)' % (tc_hosts[1].get_hostname(), STAXResult)</log>
                                <tcstatus result="'fail'">'Failed to write samples on %s' % tc_hosts[1].get_hostname()</tcstatus>
                            </sequence>
                            <else>
                                <log message="STAXMessageLog" level="'info'">'Publisher successful on %s (RC=%s)' % (tc_hosts[1].get_hostname(), STAXResult)</log>
                            </else>
                        </if>
                    </sequence>
                    <finally>
                        <sequence>
                            <!-- Unblock networking ports -->
                            <log message="STAXMessageLog" level="'info'">'Restoring network connections'</log>
                            <call function="'Firewall'">
                                { 'host':    tc_hosts[0],
                                'src_host': tc_hosts[1],
                                'action':   'open',
                                'portStr':  ports }
                            </call>
                            <call function="'Firewall'">
                                { 'host':    tc_hosts[1],
                                'src_host': tc_hosts[0],
                                'action':   'open',
                                'portStr':  ports }
                            </call>
                        </sequence>
                    </finally>
                </try>
                
                <!-- Wait (max 30s) for fellow rediscovery -->
                <script>
                    success = 0
                    merge_cond = re.compile(R"([0-9]+\.[0-9]+) COMPLETE \(sampleChainListener\) -> Updating state of namespace 'defaultNamespace' to '([0-9])' for role 'DefaultRole'")
                    host_conditions = [[re.compile(R"([0-9]+\.[0-9]+) COMPLETE \(groupLocalListener\) -> New fellow '(%s)' with state ([A-Z_]+)" % nodeIds[1]), merge_cond],
                                       [re.compile(R"([0-9]+\.[0-9]+) COMPLETE \(groupLocalListener\) -> New fellow '(%s)' with state ([A-Z_]+)" % nodeIds[0]), merge_cond]]
                </script>
                        <paralleliterate in="tc_hosts" var="host" indexvar="i">
                            <sequence>
                                <timer duration="'30s'">
                                    <loop while="success == 0">
                                        <sequence>
                                            <stafcmd name="'NetworkRestoreDelay'">
                                                <location>host.get_staf_url()</location>
                                                <service>'DELAY'</service>
                                                <request>'DELAY 5s'</request>
                                            </stafcmd>
                                            <call function="'GetDurabilityLog'">host, 1</call>
                                            <script>log = STAXResult</script>
                                            <if expr="log != None">
                                                <sequence>
                                                    <call function="'VerifyLog'">log, host_conditions[i], logIndex[i]</call>
                                                    <script>lineIndex, matches = STAXResult</script>
                                                    <if expr="len(matches) == len(host_conditions[i])">
                                                        <sequence>
                                                            <script>
                                                                disconnectTime = float(matches[0].group(1)) - tsLostFellows[i]
                                                                mergeTime = float(matches[1].group(1)) - float(matches[0].group(1))
                                                                success = 1
                                                            </script>
                                                            <log message="STAXMessageLog" level="'info'">'Host %s discovered fellow %s (state: %s, disconnected: %.2fs, consistent: %.2fs)' % (host.get_hostname(), matches[0].group(2), matches[0].group(3), disconnectTime, mergeTime)</log>
                                                        </sequence>
                                                        <else>
                                                            <log level="'debug'" message="0">'Host %s failed to merge with fellow\nFailed condition: %s' % (host.get_hostname(), host_conditions[i][len(matches)].pattern)</log>
                                                        </else>
                                                    </if>
                                                </sequence>
                                            </if>
                                        </sequence>
                                    </loop>
                                </timer>
                                <!-- Timer timeout -->
                                <if expr="RC != 0">
                                    <sequence>
                                        <script>
                                            proceed.set(0)
                                            msg = 'Failed to verify discovery of fellow on host %s (timeout)' % host.get_hostname()
                                        </script>
                                        <log message="STAXMessageLog" level="'debug'">msg</log>
                                        <tcstatus result="'fail'">msg</tcstatus>
                                    </sequence>
                                </if>
                            </sequence>
                        </paralleliterate>
                
                <!-- Read samples on host 0 -->
                <if expr="proceed">
                    <sequence>
                        <script>
                            sample_file = os.path.dirname(STAXCurrentXMLFile) + file_sep + 'etc' + file_sep + 'samples_dds2340-001c_host1.txt'
                        </script>
                        <call function="'Subscriber'">
                            { 'host': tc_hosts[0],
                              'samples': sample_file,
                              'take': 1,
                              'wait': 1000 }                       
                        </call>
                        <if expr="STAXResult != STAFRC.Ok">
                            <sequence>
                                <script>proceed.set(0)</script>
                                <log message="STAXMessageLog" level="'info'">'Subscriber failed on %s (RC=%s)' % (tc_hosts[0].get_hostname(), STAXResult)</log>
                                <tcstatus result="'fail'">'Failed to read samples on %s' % tc_hosts[0].get_hostname()</tcstatus>
                            </sequence>
                            <else>
                                <sequence>
                                    <log message="STAXMessageLog" level="'info'">'Subscriber successful on %s (RC=%s)' % (tc_hosts[0].get_hostname(), STAXResult)</log>
                                </sequence>
                            </else>
                        </if>
                    </sequence>
                </if>
                
                <!-- Read samples on host 1 -->
                <if expr="proceed">
                    <sequence>
                        <script>
                            sample_file = os.path.dirname(STAXCurrentXMLFile) + file_sep + 'etc' + file_sep + 'samples_dds2340-001c_host0.txt'
                        </script>
                        <call function="'Subscriber'">
                            { 'host': tc_hosts[1],
                              'samples': sample_file,
                              'take': 1,
                              'wait': 1000 }                       
                        </call>
                        <if expr="STAXResult != STAFRC.Ok">
                            <sequence>
                                <script>proceed.set(0)</script>
                                <log message="STAXMessageLog" level="'info'">'Subscriber failed on %s (RC=%s)' % (tc_hosts[1].get_hostname(), STAXResult)</log>
                                <tcstatus result="'fail'">'Failed to read samples on %s' % tc_hosts[1].get_hostname()</tcstatus>
                            </sequence>
                            <else>
                                <sequence>
                                    <log message="STAXMessageLog" level="'info'">'Subscriber successful on %s (RC=%s)' % (tc_hosts[1].get_hostname(), STAXResult)</log>
                                    <tcstatus result="'pass'">'Read all expected samples'</tcstatus>
                                </sequence>
                            </else>
                        </if>
                    </sequence>
                </if>
            </sequence>
        </testcase>
    </function>

    <function name="tc_dds2340_subnets_001d">
        <function-no-args/>
        <testcase name="'tc_dds2340_subnets_001d'">
            <sequence>
                <script>success = STAXGlobal(1)</script>
                <paralleliterate in="tc_hosts" var="host">
                    <sequence>
                        <call function="'StopOpenSplice'">host</call>
                        <if expr="STAXResult != STAFRC.Ok">
                            <sequence>
                                <tcstatus result="'fail'">'Failure stopping OpenSplice on %s' % host.get_hostname()</tcstatus>
                                <script>success.set(0)</script>
                            </sequence>
                            <else>
                                <tcstatus result="'info'">'Stopped OpenSplice on %s' % host.get_hostname()</tcstatus>
                            </else>
                        </if>
                    </sequence>
                </paralleliterate>
                <if expr="success">
                    <tcstatus result="'pass'">'Stopped OpenSplice on all hosts'</tcstatus>                
                </if>
            </sequence>
        </testcase>
    </function>
</stax>
