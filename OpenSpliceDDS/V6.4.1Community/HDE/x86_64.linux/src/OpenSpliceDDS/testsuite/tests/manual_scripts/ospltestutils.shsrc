#!/bin/bash

# This file must only be sourced.
if [ -z "$BASH_SOURCE" -o "$0" = "$BASH_SOURCE" ]; then
    echo "ERROR: Only source '$0' file"
    exit 1
fi

# Source current settings.
. "$(dirname "$BASH_SOURCE")/osplsettings.shsrc" "$@"
. "$(dirname "$BASH_SOURCE")/ospldistutils.shsrc" "$@"

function testing_prefices ()
{
    echo "LIN64 LIN32 WIN32"
}

function testing_hosts ()
{
    local p
    for p in $(testing_prefices)
    do
        local varval
        eval "varval=\${${p}_HOSTNAME}"
        echo "$varval"
    done
}

function check_host ()
{
    host "$1" &>/dev/null || error_help "ERROR: Host '$1' cannot be resolved" || return 1
}

function check_testing_prereqs ()
{
    if [ "$(uname -o)" != 'Cygwin' ]; then
       which host &>/dev/null || error_help "ERROR: 'host' executable is not found (it's in a bind package)" || return 1

       # Don't use quoting for $(testing_hosts).
       local h
       for h in $(testing_hosts)
       do
           check_host "$h"
       done
    fi

    for h in $(testing_prefices)
    do
        local varval
        eval "varval=\${${h}_OSPL_DISTVER}"
        if [ "$LOCAL_OSPL_DISTVER" != "$varval" ]; then
            error_help "ERROR: Version ${h}_OSPL_DISTVER ($varval) is not the same as LOCAL_OSPL_DISTVER ($LOCAL_OSPL_DISTVER)"
            return 1
        fi
    done
}

function remote_var_value ()
{
    if [ $# -ne 2 ]; then
        error_trace "ERROR: Wrong number of arguments to ${FUNCNAME[0]}"
        return 1
    fi

    local machine="$1" && test -n "$machine" || error_trace "ERROR: Parameter \$1 is empty" || return 1
    local varbase="$2" && test -n "$varbase" || error_trace "ERROR: Parameter \$2 is empty" || return 1

    local p
    for p in $(testing_prefices)
    do
        local h v
        eval "h=\${${p}_HOSTNAME}"
        if [ "$machine" = "$h" ]; then
            eval "v=\${${p}_$varbase}"
            if [ -z "$v" ]; then
                error_help "ERROR: ${p}_$varbase is empty"
                return 1
            fi
            echo "$v"
            # Break the loop.
            return 0
        fi
    done

    # If we are here then the machine is not found.
    error_help "ERROR: Unknown host '$machine'"
}

function testing_slaves ()
{
    if [ $# -ne 1 ]; then
        error_trace "ERROR: Wrong number of arguments to ${FUNCNAME[0]}"
        return 1
    fi

    local master="$1" && test -n "$master" || error_trace "ERROR: Parameter \$1 is empty" || return 1

    local p result hasmaster
    for p in $(testing_prefices)
    do
        local h
        eval "h=\${${p}_HOSTNAME}"
        if [ -z "$h" ]; then
            error_help "ERROR: ${p}_HOSTNAME is empty"
            return 1
        fi
        if [ "$master" = "$h" ]; then
            hasmaster='yes'
        else
            result="$h $result"
        fi
    done

    if [ -z "$hasmaster" ]; then
        error_help "ERROR: Unknown host '$master'"
        return 1
    fi

    echo "$result"
}

function _print_ospltest_help ()
{
    echo "ospltest:"
    echo "    --force-tests - forces test execution even in case of errors"
    echo "    --clean-logs - cleans the logs before the tests start"
}

function _check_ospltest_args ()
{
    while [ $# -ne 0 ]
    do
        case "$1" in
            -h|--help)
                _print_ospltest_help
                return 1
                ;;
            --force-tests)
                g_force_tests='yes'
                shift
                ;;
            --clean-logs)
                g_cleanlogs='yes'
                shift
                ;;
            *)
                shift
                ;;
        esac
    done
}
if [ -z "$g_ospltestutils_loaded" ]; then
    g_ospltestutils_loaded='yes'
    # This is the last line in this file. It can set $? which is important for
    # the outside code. Don't do anything after this!!!
    _check_ospltest_args "$@"
fi
