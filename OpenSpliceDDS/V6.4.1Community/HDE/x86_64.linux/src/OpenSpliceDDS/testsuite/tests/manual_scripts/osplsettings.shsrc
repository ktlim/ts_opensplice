#!/bin/bash

# This file must only be sourced.
if [ -z "$BASH_SOURCE" -o "$0" = "$BASH_SOURCE" ]; then
    echo "ERROR: Only source '$0' file"
    exit 1
fi

function to_native_path ()
{
    if [ "$(uname)" != 'SunOS' ]; then
        if [ "$(uname -o)" = 'Cygwin' -a -n "$1" ]; then
            cygpath -w "$1" | sed -e 's|\\|/|g'
        else
            echo "$1"
        fi
    else
        echo $1
    fi
}

function to_unix_path ()
{
    if [ "$(uname)" != 'SunOS' ]; then
       if [ "$(uname -o)" = 'Cygwin' -a -n "$1" ]; then
           cygpath -u "$1"
       else
           echo "$1"
       fi
    else
       echo "$1"
    fi
}

function ospldev_arch_dot_os ()
{
    local arch_dot_os="$(uname -m)"
    if [ "$arch_dot_os" = 'x86_64' ]; then
        arch_dot_os='x64'
    else
        arch_dot_os='x86'
    fi

    if [ "$(uname)" != 'SunOS' ]; then
        if [ "$(uname -o)" = 'Cygwin' ]; then
            arch_dot_os="${arch_dot_os}.win32"
        else
            arch_dot_os="${arch_dot_os}.Linux"
        fi
    else
       echo -e "\nIt's SOLARIS ..."
       arch_dot_os="${arch_dot_os}.Linux"
    fi
    echo $arch_dot_os
}

function ospldist_arch_dot_os ()
{
    local arch_dot_os="$(uname -m)"
    if [ "$arch_dot_os" != 'x86_64' ]; then
        arch_dot_os='x86'
    fi

    if [ "$(uname)" != 'SunOS' ]; then
        if [ "$(uname -o)" = 'Cygwin' ]; then
            arch_dot_os="${arch_dot_os}.win32"
        else
             arch_dot_os="${arch_dot_os}.linux"
        fi
    else
        arch_dot_os='sparc.solaris10_studio12'
        echo -e "\nIt's SOLARIS ... arch_dot_os is $arch_dot_os ..... this is hardcoded for now"
    fi
    echo $arch_dot_os
}

function _print_start_help ()
{
    echo "Usage: '$0' [--option[=value]]"
    echo "    -h,--help - print help"
}

if [ -z "$g_osplsettings_loaded" ]; then
    g_osplsettings_loaded='yes'

    g_user_conf="${BASH_SOURCE}_$USER"

    if [ ! -f "$g_user_conf" ]; then
        # Initialize a file with user settings.
        echo "Initializing a default '$g_user_conf' for you..."
        cp -f "${BASH_SOURCE}_template" "$g_user_conf"
    fi

    if [ "${BASH_SOURCE}_template" -nt "$g_user_conf" ]; then
        # It could be that there is a new version of template which has to be
        # merged to user settings manually. We can only warn about this.
        echo "WARNING: '${BASH_SOURCE}_template' is newer than '$g_user_conf'"
    fi

    echo "Loading settings..."
    . "$g_user_conf"

    while [ $# -ne 0 ]
    do
        case "$1" in
            -h|--help)
                _print_start_help
                shift
                ;;
            *)
                shift
                ;;
        esac
    done
fi

# echo always succeeds but this function will echo and fail.
function error_trace ()
{
    echo -e "$1" >&2

    local i=1 # Don't include this function.
    echo -e "Stack trace:" >&2
    until [ "${FUNCNAME[$i]}" = 'main' ]
    do
        echo " ${FUNCNAME[$i]}() at ${BASH_SOURCE[$i]}:${BASH_LINENO[$i]}" >&2
        let "++i"
    done
    return 1
}

# echo always succeeds but this function will echo and fail.
function error_help ()
{
    echo -e "$1" >&2

    echo -e "       Read README/README.common and comments in $g_user_conf for more details or rerun the script with -h option" >&2
    return 1
}

function plain_hostname ()
{
    # Hostname we expect doesn't contain domain part and is lower case.
    echo "$(hostname | sed -e 's|\..*$||' | tr '[:upper:]' '[:lower:]')"
}
