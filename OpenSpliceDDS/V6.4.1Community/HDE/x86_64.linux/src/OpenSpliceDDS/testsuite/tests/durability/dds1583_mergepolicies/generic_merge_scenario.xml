<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE stax SYSTEM "../../stax/stax.dtd">
<stax>
    <function name="GenericMergeScenario">
        <function-map-args>
            <function-required-arg name="hosts">List of participating TestHosts</function-required-arg>
            <function-required-arg name="uri">OpenSplice URI</function-required-arg>
            <function-required-arg name="samples">List of files (absolute path) which contain the samples that will be published by each node</function-required-arg>
            <function-required-arg name="expected_samples">List of files (absolute path) which contain expected samples available on each node</function-required-arg>
            <!-- TODO add support for roles (master selection), namespaces (merging) -->
        </function-map-args>
        <sequence>
            <!-- Check some preconditions -->
            <if expr="len(hosts) &lt; 3">
                <throw exception="'TestCase.IncompatibleHost'">'Need (at least) three hosts to run this scenario!'</throw>
            </if>
            <paralleliterate in="hosts" var="host">
                <sequence>
                    <if expr="host.isWindows()">
                        <throw exception="'TestCase.IncompatibleHost'">'Test requires Linux hosts, %s is not usable' % host.get_hostname()</throw>
                    </if>
                    <if expr="not host.is_deployed()">
                        <throw exception="'TestCase.IncompatibleHost'">'Host %s is not deployed (use HostManager::DeployHost function)' % host.get_hostname()</throw>
                    </if>
                </sequence>
            </paralleliterate>
            
            <!-- Set URI and start OpenSplice on all nodes -->
            <script>
                import types
                if isinstance(uri, types.ListType):
                    uris = uri
                else:
                    uris = [uri for h in hosts]
                assert len(uris) == len(hosts)
            </script>
            <paralleliterate in="hosts" var="host" indexvar="i">
                <sequence>
                    <call function="'SetURI'">host, uris[i]</call>
                    <call function="'StartOpenSplice'">host</call>
                    <tcstatus result="'info'">'Started OpenSplice on %s' % host.get_hostname()</tcstatus>
                </sequence>
            </paralleliterate>

            <!--  Wait for and verify durability initialization -->            
            <script>proceed = 1</script>
            <call-with-list function="'ValidatePersistentSource'">
                <call-list-arg>hosts</call-list-arg>
            </call-with-list>
            <script>proceed = STAXResult</script>
            
            <!-- Verify initial preferred aligner selection based on the roles used by the nodes -->
            <if expr="proceed">
                <sequence>
                    <script>
                        # Sort nodes by role
                        roles = {}
                        for host in hosts:
                            role = host.get_env('OSPL_ROLE')
                            assert(role)
                            if role in roles.keys():
                                roles[role].append(host)
                            else:
                                roles[role] = [host]
                    </script>
                    <paralleliterate in="roles.keys()" var="role">
                        <sequence>
                            <call function="'GetMasterNode'">roles[role], 'defaultNameSpace'</call>
                            <script>rc, msg = STAXResult</script>
                            <if expr="rc">
                                <log message="STAXMessageLog" level="'info'">
                                    'Preferred aligner selection verified for role %s:\n%s' % (role, msg) 
                                </log>
                                <else>
                                    <sequence>
                                        <log message="STAXMessageLog" level="'info'">
                                            'Preferred aligner selection failed for role %s:\n%s' % (role, msg)
                                        </log>
                                        <tcstatus result="'fail'">'Failed to verify preferred aligner for role %s' % role</tcstatus>
                                        <script>proceed = 0</script>
                                    </sequence>
                                </else>
                            </if>
                        </sequence>
                    </paralleliterate>
                </sequence>
            </if>
            
            <!-- If any exception occurs before the network is restored,
                 make sure not to leave closed ports on remote machines -->
            <try> 
                <sequence>
                    <!-- Create network failure, split brain by creating two 'clusters' of nodes -->
                    <script>
                        hosts_a = [hosts[0]]
                        hosts_b = [hosts[1], hosts[2]]
                    </script>
                    
                    <if expr="proceed">
                        <call function="'NetworkFailure'">hosts_a, hosts_b</call>
                    </if>
                    
                    <!-- Publish samples on each host -->
                    <if expr="proceed">
                        <paralleliterate in="hosts" var="host" indexvar="i">
                            <sequence>
                                <call-with-map function="'Publisher'">
                                    <call-map-arg name="'host'">host</call-map-arg>
                                    <call-map-arg name="'samples'">samples[i]</call-map-arg>
                                </call-with-map>
                                <if expr="STAXResult != STAFRC.Ok">
                                    <sequence>
                                        <script>proceed.set(0)</script>
                                        <log message="STAXMessageLog" level="'info'">
                                            'Publisher failed on %s (RC=%s)' % (host.get_hostname(), STAXResult)
                                        </log>
                                        <tcstatus result="'fail'">
                                            'Failed to write samples on %s' % host.get_hostname()
                                        </tcstatus>
                                    </sequence>
                                    <else>
                                        <log message="STAXMessageLog" level="'info'">
                                            'Publisher successful on %s (RC=%s)' % (host.get_hostname(), STAXResult)
                                        </log>
                                    </else>
                                </if>
                            </sequence>
                        </paralleliterate>
                    </if>
                </sequence>
                <catch exception="'...'">
                    <sequence>
                        <call function="'NetworkAction'">hosts_a, hosts_b, 'open'</call>
                        <rethrow />
                    </sequence>
                </catch>
            </try>
            
            <!-- Restore network -->
            <if expr="proceed">
                <sequence>
                    <call function="'NetworkRestore'">hosts_a, hosts_b</call>
                    <if expr="not proceed">
                        <sequence>
                            <script>proceed.set(1)</script>
                        </sequence>
                    </if>
                </sequence>
                <else>
                    <sequence>
                        <log message="STAXMessageLog" level="'fail'">'Restoring network'</log>
                        <call function="'NetworkAction'">hosts_a, hosts_b, 'open'</call>
                    </sequence>
                </else>
            </if>
            
            <!-- Subscribe and check if all expected samples are available -->
            <if expr="proceed">
                <paralleliterate in="hosts" var="host" indexvar="i">
                    <sequence>
                        <call-with-map function="'Subscriber'">
                            <call-map-arg name="'host'">host</call-map-arg>
                            <call-map-arg name="'samples'">expected_samples[i]</call-map-arg>
                        </call-with-map>
                        <if expr="STAXResult != STAFRC.Ok">
                            <sequence>
                                <script>proceed.set(0)</script>
                                <log message="STAXMessageLog" level="'info'">
                                    'Subscriber failed on %s (RC=%s)' % (host.get_hostname(), STAXResult)</log>
                                <tcstatus result="'fail'">
                                    'Failed to read samples on %s' % host.get_hostname()
                                </tcstatus>
                            </sequence>
                            <else>
                                <log message="STAXMessageLog" level="'info'">
                                    'Subscriber successful on %s (RC=%s)' % (host.get_hostname(), STAXResult)
                                </log>
                            </else>
                        </if>
                    </sequence>
                </paralleliterate>
            </if>

            <!-- Stop OpenSplice -->
            <paralleliterate in="hosts" var="host">
                <sequence>
                    <call function="'StopOpenSplice'">host</call>
                    <if expr="STAXResult != STAFRC.Ok">
                        <sequence>
                            <tcstatus result="'fail'">
                                'Failure stopping OpenSplice on %s' % host.get_hostname()
                            </tcstatus>
                            <script>proceed.set(0)</script>
                        </sequence>
                        <else>
                            <tcstatus result="'info'">
                                'Stopped OpenSplice on %s' % host.get_hostname()
                            </tcstatus>
                        </else>
                    </if>
                </sequence>
            </paralleliterate>
            <if expr="proceed">
                <tcstatus result="'pass'">'Read all expected samples'</tcstatus>
            </if>
        </sequence>
    </function>
  
    <function name="NetworkFailure">
        <function-prolog>
        <![CDATA[
            <p>Create two clusters of hosts by blocking network traffic on OpenSplice ports, on hosts that are not in the same cluster</p>
        ]]>
        </function-prolog>
        <function-list-args>
            <function-required-arg name="ClusterA">List of TestHosts</function-required-arg>
            <function-required-arg name="ClusterB">List of TestHosts</function-required-arg>
        </function-list-args>
            <sequence>
            <call function="'NetworkAction'">ClusterA, ClusterB, 'close'</call>
            <try>
                <sequence>
                    <script>
                        # Create a string with all nodeid's of the hosts in a cluster
                        a_ids = '|'.join([h.get_env('D_NODEID') for h in ClusterA])
                        b_ids = '|'.join([h.get_env('D_NODEID') for h in ClusterB])
                        
                        # Create a string with all hostnames of the fellows of the hosts in a cluster
                        a_fellows = ', '.join([h.get_hostname() for h in ClusterB])
                        b_fellows = ', '.join([h.get_hostname() for h in ClusterA])
                        
                        # Create common conditions, applied to all hosts for each cluster
                        a_conditions = [re.compile("[0-9]+\.[0-9]+ [A-Z_]+ \(statusListener\) -&gt; Removing fellow: (%s)" % b_ids) for i in range(len(ClusterB))]
                        b_conditions = [re.compile("[0-9]+\.[0-9]+ [A-Z_]+ \(statusListener\) -&gt; Removing fellow: (%s)" % a_ids) for i in range(len(ClusterA))]
                    </script>
                    
                    <!-- Wait (max 30s per host) for lost fellows on all hosts in cluster A -->
                    <paralleliterate in="ClusterA" var="host" indexvar="i">
                        <sequence>
                            <script>success = 0</script>
                            <timer duration="'30s'">
                                <loop while="success == 0">
                                    <sequence>
                                        <stafcmd name="'NetworkFailureDelay'">
                                            <location>host.get_staf_url()</location>
                                            <service>'DELAY'</service>
                                            <request>'DELAY 2s'</request>
                                        </stafcmd>
                                        <call function="'GetDurabilityLog'">host, 1</call>
                                        <script>log = STAXResult</script>
                                        <if expr="log != None">
                                            <sequence>
                                                <call function="'VerifyLog'">log, a_conditions, host.get_env('D_LOGIDX')</call>
                                                <script>lineIndex, matches = STAXResult</script>
                                                <if expr="len(matches) == len(a_conditions)">
                                                    <sequence>
                                                        <script>
                                                            success = 1
                                                            host.set_env('D_LOGIDX', lineIndex)
                                                        </script>
                                                        <log message="STAXMessageLog" level="'info'">
                                                            'Host %s lost expected fellow(s): %s' % (host.get_hostname(), a_fellows)
                                                        </log>
                                                    </sequence>
                                                    <else>
                                                        <log level="'debug'" message="0">
                                                            'Host %s failed to lose all expected fellow(s)\nFailed condition: %d:%s' % (host.get_hostname(), len(matches), a_conditions[len(matches)].pattern)
                                                        </log>
                                                    </else>
                                                </if>
                                            </sequence>
                                        </if>
                                    </sequence>
                                </loop>
                            </timer>
                            <!-- Timer timeout -->
                            <if expr="RC != 0">
                                <sequence>
                                    <script>
                                        proceed.set(0)
                                        msg = 'Failed to verify lost fellow(s) on host %s: timeout' % host.get_hostname()
                                    </script>
                                    <log message="STAXMessageLog" level="'debug'">msg</log>
                                    <tcstatus result="'fail'">msg</tcstatus>
                                </sequence>
                            </if>
                        </sequence>
                    </paralleliterate>
                    
                    <!-- Wait (max 30s per host) for lost fellows on all hosts in cluster B -->
                    <paralleliterate in="ClusterB" var="host" indexvar="i">
                        <sequence>
                            <script>success = 0</script>
                            <timer duration="'30s'">
                                <loop while="success == 0">
                                    <sequence>
                                        <stafcmd name="'NetworkFailureDelay'">
                                            <location>host.get_staf_url()</location>
                                            <service>'DELAY'</service>
                                            <request>'DELAY 2s'</request>
                                        </stafcmd>
                                        <call function="'GetDurabilityLog'">host, 1</call>
                                        <script>log = STAXResult</script>
                                        <if expr="log != None">
                                            <sequence>
                                                <call function="'VerifyLog'">log, b_conditions, host.get_env('D_LOGIDX')</call>
                                                <script>
                                                    lineIndex, matches = STAXResult
                                                </script>
                                                <if expr="len(matches) == len(b_conditions)">
                                                    <sequence>
                                                        <script>
                                                            success = 1
                                                            host.set_env('D_LOGIDX', lineIndex)
                                                        </script>
                                                        <log message="STAXMessageLog" level="'info'">
                                                            'Host %s lost expected fellow(s): %s' % (host.get_hostname(), b_fellows)
                                                        </log>
                                                    </sequence>
                                                    <else>
                                                        <log level="'debug'" message="0">
                                                            'Host %s failed to lose all expected fellow(s)\nFailed condition: %d:%s' % (host.get_hostname(), len(matches), b_conditions[len(matches)].pattern)
                                                        </log>
                                                    </else>
                                                </if>
                                            </sequence>
                                        </if>
                                    </sequence>
                                </loop>
                            </timer>
                            <!-- Timer timeout -->
                            <if expr="RC != 0">
                                <sequence>
                                    <script>
                                        proceed.set(0)
                                        msg = 'Failed to verify lost fellow(s) on host %s: timeout' % host.get_hostname()
                                    </script>
                                    <log message="STAXMessageLog" level="'debug'">msg</log>
                                    <tcstatus result="'fail'">msg</tcstatus>
                                </sequence>
                            </if>
                        </sequence>
                    </paralleliterate>
                </sequence>
                <catch exception="'...'">
                    <sequence>
                        <call function="'NetworkAction'">ClusterA, ClusterB, 'open'</call>
                        <rethrow />
                    </sequence>
                </catch>
            </try>
        </sequence>
    </function>
    
    <function name="NetworkRestore">
        <function-prolog>
            <![CDATA[
                <p>Restore networking between two clusters of hosts by unblocking the ports used by OpenSplice networking service</p>
            ]]>
        </function-prolog>
        <function-list-args>
            <function-required-arg name="ClusterA">List of TestHosts</function-required-arg>
            <function-required-arg name="ClusterB">List of TestHosts</function-required-arg>
        </function-list-args>
        <sequence>
            <call function="'NetworkAction'">ClusterA, ClusterB, 'open'</call>
            <script>
                # Create a string with all nodeid's of the hosts in a cluster 
                a_ids = '|'.join([h.get_env('D_NODEID') for h in ClusterA])
                b_ids = '|'.join([h.get_env('D_NODEID') for h in ClusterB])
                
                # Create a string with all hostnames of the fellows of the hosts in a cluster
                a_fellows = ','.join([h.get_hostname() for h in ClusterB])
                b_fellows = ','.join([h.get_hostname() for h in ClusterA])
                
                # Create a string with all (unique) roles of the hosts in ClusterA
                a_initial_role = ClusterA[0].get_env('OSPL_ROLE')
                a_role_count = 1
                a_roles = a_initial_role
                for i in range(len(ClusterA)):
                    a_alt_role = ClusterA[i].get_env('OSPL_ROLE')
                    if a_alt_role != a_initial_role:
                        a_role_count += 1
                        a_roles = a_roles + '|' + a_alt_role
                        
                # Create a string with all (unique) roles of the hosts in ClusterB
                b_initial_role = ClusterB[0].get_env('OSPL_ROLE')
                b_role_count = 1
                b_roles = b_initial_role
                for i in range(len(ClusterB)):
                    b_alt_role = ClusterB[i].get_env('OSPL_ROLE')
                    if b_alt_role != b_initial_role:
                        b_role_count += 1
                        b_roles = b_roles + '|' + b_alt_role
                
                # Create common conditions, applied to all hosts for each cluster
                # Fellow discovery:
                common_a_conditions = [re.compile("[0-9]+\.[0-9]+ [A-Z_]+ \(groupLocalListener\) -&gt; New fellow '(%s)' with state ([A-Z_]+)" % b_ids) for i in range(len(ClusterB))]
                common_b_conditions = [re.compile("[0-9]+\.[0-9]+ [A-Z_]+ \(groupLocalListener\) -&gt; New fellow '(%s)' with state ([A-Z_]+)" % a_ids) for i in range(len(ClusterA))]
                # Merge action(s):
                common_a_conditions += [re.compile("[0-9]+\.[0-9]+ COMPLETE \(sampleChainListener\) -&gt; Updating state of namespace 'defaultNamespace' to '([0-9])' for role '%s'" % b_initial_role)]
                common_b_conditions += [re.compile("[0-9]+\.[0-9]+ COMPLETE \(sampleChainListener\) -&gt; Updating state of namespace 'defaultNamespace' to '([0-9])' for role '%s'" % a_initial_role)]
                
                #common_a_conditions += [re.compile("[0-9]+\.[0-9]+ COMPLETE \(sampleChainListener\) -&gt; Updating state of namespace 'defaultNamespace' to '([0-9])' for role '%s'" % b_roles) for i in range(b_role_count)]
                #common_b_conditions += [re.compile("[0-9]+\.[0-9]+ COMPLETE \(sampleChainListener\) -&gt; Updating state of namespace 'defaultNamespace' to '([0-9])' for role '%s'" % a_roles) for i in range(a_role_count)]
                
                j=0
                for c in common_a_conditions:
                    print 'A_CONDITON %d: %s' % (j, c.pattern)
                    j+=1
                    
                j=0
                for c in common_b_conditions:
                    print 'B_CONDITON %d: %s' % (j, c.pattern)
                    j+=1
                
            </script>
            <!-- Wait (max 30s per host) for lost fellows -->
            <paralleliterate in="ClusterA" var="host" indexvar="i">
                <sequence>
                    <script>success = 0</script>
                    <timer duration="'30s'">
                        <loop while="success == 0">
                            <sequence>
                                <stafcmd name="'NetworkRestoreDelay'">
                                    <location>host.get_staf_url()</location>
                                    <service>'DELAY'</service>
                                    <request>'DELAY 2s'</request>
                                </stafcmd>
                                <call function="'GetDurabilityLog'">host, 1</call>
                                <script>log = STAXResult</script>
                                <if expr="log != None">
                                    <sequence>
                                        <call function="'VerifyLog'">log, common_a_conditions, host.get_env('D_LOGIDX')</call>
                                        <script>lineIndex, matches = STAXResult</script>
                                        <if expr="len(matches) == len(common_a_conditions)">
                                            <sequence>
                                                <script>
                                                    success = 1
                                                    host.set_env('D_LOGIDX', lineIndex)
                                                </script>
                                                <log message="STAXMessageLog" level="'info'">'Host %s rediscovered all expected fellow(s): %s' % (host.get_hostname(), a_fellows)</log>
                                            </sequence>
                                            <else>
                                                <log level="'debug'" message="0">'Host %s failed to rediscover all expected fellow(s)\nFailed condition: %d:%s' % (host.get_hostname(), len(matches), common_a_conditions[len(matches)].pattern)</log>
                                            </else>
                                        </if>
                                    </sequence>
                                </if>
                            </sequence>
                        </loop>
                    </timer>
                    <!-- Timer timeout -->
                    <if expr="RC != 0">
                        <sequence>
                            <script>
                                proceed.set(0)
                                msg = 'Failed to rediscover fellow(s) on host %s: timeout' % host.get_hostname()
                            </script>
                            <log message="STAXMessageLog" level="'debug'">msg</log>
                            <tcstatus result="'fail'">msg</tcstatus>
                            <call function="'StackTrace'">host, host.get_env('OSPL_DEXEC')</call>
                        </sequence>
                    </if>
                </sequence>
            </paralleliterate>
            
            <!-- Wait (max 30s per host) for lost fellows -->
            <paralleliterate in="ClusterB" var="host" indexvar="i">
                <sequence>
                    <script>success = 0</script>
                    <timer duration="'30s'">
                        <loop while="success == 0">
                            <sequence>
                                <stafcmd name="'NetworkRestoreDelay'">
                                    <location>host.get_staf_url()</location>
                                    <service>'DELAY'</service>
                                    <request>'DELAY 2s'</request>
                                </stafcmd>
                                <call function="'GetDurabilityLog'">host, 1</call>
                                <script>log = STAXResult</script>
                                <if expr="log != None">
                                    <sequence>
                                        <call function="'VerifyLog'">log, common_b_conditions, host.get_env('D_LOGIDX')</call>
                                        <script>lineIndex, matches = STAXResult</script>
                                        <if expr="len(matches) == len(common_b_conditions)">
                                            <sequence>
                                                <script>
                                                    success = 1
                                                    host.set_env('D_LOGIDX', lineIndex)
                                                </script>
                                                <log message="STAXMessageLog" level="'info'">
                                                    'Host %s rediscovered all expected fellow(s): %s' % (host.get_hostname(), b_fellows)
                                                </log>
                                            </sequence>
                                            <else>
                                                <log level="'debug'" message="0">
                                                    'Host %s failed to rediscover all expected fellow(s)\nFailed condition: %d:%s' % (host.get_hostname(), len(matches), common_b_conditions[len(matches)].pattern)
                                                </log>
                                            </else>
                                        </if>
                                    </sequence>
                                </if>
                            </sequence>
                        </loop>
                    </timer>
                    <!-- Timer timeout -->
                    <if expr="RC != 0">
                        <sequence>
                            <script>
                                proceed.set(0)
                                msg = 'Failed to rediscover fellow(s) on host %s: timeout' % host.get_hostname()
                            </script>
                            <log message="STAXMessageLog" level="'debug'">msg</log>
                            <tcstatus result="'fail'">msg</tcstatus>
                            <call function="'StackTrace'">host, host.get_env('OSPL_DEXEC')</call>
                        </sequence>
                    </if>
                </sequence>
            </paralleliterate>
        </sequence>
    </function>
  
    <function name="NetworkAction" scope="local">
        <function-list-args>
            <function-required-arg name="ClusterA">List of TestHosts</function-required-arg>
            <function-required-arg name="ClusterB">List of TestHosts</function-required-arg>
            <function-required-arg name="action">'open' or 'close'</function-required-arg>
        </function-list-args>
        <sequence>
            <paralleliterate in="ClusterA" var="a_host">
                <iterate in="ClusterB" var="b_host">
                    <sequence>
                        <script>
                            ports = ''
                            if (b_host.get_env('OSPL_BESTEFFORT_PORT')):
                                ports += '%d,' % int(b_host.get_env('OSPL_BESTEFFORT_PORT'))
                            if (b_host.get_env('OSPL_DISCOVERY_PORT')):
                                ports += '%d,' % int(b_host.get_env('OSPL_DISCOVERY_PORT'))
                            if (b_host.get_env('OSPL_RELIABLE_PORT')):
                                reliable_port = int(b_host.get_env('OSPL_RELIABLE_PORT'))
                                ports += '%d,%d' % (reliable_port, reliable_port + 1)
                            if (ports.endswith(',')):
                                ports = ports[:-1]
                        </script>
                        <log if="action == 'close'" message="STAXMessageLog" level="'info'">'Discard network on host %s for host %s' % (a_host.get_hostname(), b_host.get_hostname())</log>
                        <log if="action == 'open'" message="STAXMessageLog" level="'info'">'Accept network on host %s for host %s' % (a_host.get_hostname(), b_host.get_hostname())</log>
                        <call-with-map function="'Firewall'">
                            <call-map-arg name="'host'">a_host</call-map-arg>
                            <call-map-arg name="'src_host'">b_host</call-map-arg>
                            <call-map-arg name="'action'">action</call-map-arg>
                            <call-map-arg name="'portStr'">ports</call-map-arg>
                        </call-with-map>
                    </sequence>
                </iterate>
            </paralleliterate>
            <paralleliterate in="ClusterB" var="b_host">
                <iterate in="ClusterA" var="a_host">
                    <sequence>
                        <script>
                            ports = ''
                            if (a_host.get_env('OSPL_BESTEFFORT_PORT')):
                                ports += '%d,' % int(a_host.get_env('OSPL_BESTEFFORT_PORT'))
                            if (a_host.get_env('OSPL_DISCOVERY_PORT')):
                                ports += '%d,' % int(a_host.get_env('OSPL_DISCOVERY_PORT'))
                            if (a_host.get_env('OSPL_RELIABLE_PORT')):
                                reliable_port = int(a_host.get_env('OSPL_RELIABLE_PORT'))
                                ports += '%d,%d' % (reliable_port, reliable_port + 1)
                            if (ports.endswith(',')):
                                ports = ports[:-1]
                        </script>
                        <log if="action == 'close'" message="STAXMessageLog" level="'info'">'Discard network on host %s for host %s' % (b_host.get_hostname(), a_host.get_hostname())</log>
                        <log if="action == 'open'" message="STAXMessageLog" level="'info'">'Accept network on host %s for host %s' % (b_host.get_hostname(), a_host.get_hostname())</log>
                        <call-with-map function="'Firewall'">
                            <call-map-arg name="'host'">b_host</call-map-arg>
                            <call-map-arg name="'src_host'">a_host</call-map-arg>
                            <call-map-arg name="'action'">action</call-map-arg>
                            <call-map-arg name="'portStr'">ports</call-map-arg>
                        </call-with-map>
                    </sequence>
                </iterate>
            </paralleliterate>
        </sequence>
    </function>
</stax>